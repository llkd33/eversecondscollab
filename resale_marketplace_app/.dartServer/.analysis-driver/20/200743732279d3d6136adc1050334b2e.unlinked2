ÅdetachtoString_containerLayerestimatedBoundsrepaintCompositedChild_repaintCompositedChildupdateLayerProperties%debugInstrumentRepaintCompositedChild
paintChild_compositeChildappendLayer_isRecording_currentLayer	_recorder_canvascanvas_startRecordingaddCompositionCallbackstopRecordingIfNeededsetIsComplexHintsetWillChangeHintaddLayer	pushLayercreateChildContextpushClipRectpushClipRRectpushClipRSuperellipsepushClipPathpushColorFilterpushTransformpushOpacityisTightisNormalizeddebugAssertIsValid_ownerlistenerdisposeonNeedVisualUpdateonSemanticsOwnerCreatedonSemanticsUpdateonSemanticsOwnerDisposedrequestVisualUpdaterootNode	_rootNode_shouldMergeDirtyNodes_nodesNeedingLayoutnodesNeedingLayoutdebugDoingLayout_debugDoingLayout_debugDoingChildLayoutflushLayout#_debugAllowMutationsToDirtySubtrees_enableMutationsToDirtySubtrees"_nodesNeedingCompositingBitsUpdateflushCompositingBits_nodesNeedingPaintnodesNeedingPaintdebugDoingPaint_debugDoingPaint
flushPaintsemanticsOwner_semanticsOwner debugOutstandingSemanticsHandles_outstandingSemanticsHandlesensureSemantics_updateSemanticsOwner_didDisposeSemanticsHandle_debugDoingSemantics_nodesNeedingSemanticsflushSemanticsdebugDescribeChildrendebugFillProperties	_children	_manifold_debugParent_debugSetParent%_debugRootSuffixForTimelineEventNamesattach!_debugAllowChildListModifications
adoptChild	dropChildvisitChildrensemanticsEnabled
reassembledebugDisposed_debugDisposed
parentDatasetupParentDatadepth_depthredepthChildredepthChildrenparent_parentsemanticsParentdebugCreator_reportExceptiondebugDoingThisResize_debugDoingThisResizedebugDoingThisLayout_debugDoingThisLayoutdebugActiveLayout_debugActiveLayout_withDebugActiveLayoutCleareddebugCanParentUseSize_debugCanParentUseSize_debugMutationsLocked_debugCanPerformMutationsdebugLayoutParentownerattacheddebugNeedsLayout_needsLayout_isRelayoutBoundary debugDoingThisLayoutWithCallback_doingThisLayoutWithCallbackconstraints_constraintsdebugAssertDoesMeetConstraintsdebugCheckingIntrinsics._debugRelayoutBoundaryAlreadyMarkedNeedsLayoutmarkNeedsLayoutmarkParentNeedsLayout%markNeedsLayoutForSizedByParentChangescheduleInitialLayout_layoutWithoutResizelayoutdebugResetSizesizedByParentperformResizeperformLayoutinvokeLayoutCallbackdebugDoingThisPaint_debugDoingThisPaintdebugActivePaint_debugActivePaintisRepaintBoundary!debugRegisterRepaintBoundaryPaintalwaysNeedsCompositing_wasRepaintBoundaryupdateCompositedLayerlayer_layerHandle
debugLayer_needsCompositingBitsUpdatemarkNeedsCompositingBitsUpdate_needsCompositingneedsCompositing_updateCompositingBitsdebugNeedsPaint_needsPaintdebugNeedsCompositedLayerUpdate_needsCompositedLayerUpdatemarkNeedsPaintmarkNeedsCompositedLayerUpdate_skippedPaintingOnLayerscheduleInitialPaintreplaceRootLayer_paintWithContextpaintBounds
debugPaintpaintapplyPaintTransformpaintsChildgetTransformTodescribeApproximatePaintClipdescribeSemanticsClipscheduleInitialSemanticsdescribeSemanticsConfigurationsendSemanticsEventsemanticBoundsdebugNeedsSemanticsUpdatedebugSemanticsclearSemanticsmarkNeedsSemanticsUpdate
_semanticsvisitChildrenForSemanticsassembleSemanticsNodehandleEventtoStringShorttoStringDeeptoStringShallowshowOnScreendescribeForErrordebugValidateChild_childchild_needsRebuildlayoutCallbackrunLayoutCallbackscheduleLayoutCallbackpreviousSiblingnextSibling_debugUltimatePreviousSiblingOf_debugUltimateNextSiblingOf_childCount
childCount_firstChild
_lastChild_insertIntoChildListinsertaddaddAll_removeFromChildListremove	removeAllmove
firstChild	lastChildchildBefore
childAftersystemFontsDidChange'_hasPendingSystemFontsDidChangeCallBack_scheduleSystemFontsUpdatemergeIntoParentblocksUserActionsexplicitChildNodestagsForChildren==hashCode_renderObject_isEffectiveConfigWritable_originalConfiguration_effectiveConfigurationwasSemanticsBoundary	effectiveoriginalupdateConfig	absorbAllresetclearconfigToMergeUpmergesToSibling markSiblingConfigurationConflictrenderObject_hasSiblingConflict_blocksPreviousSiblingelevationAdjustment_containsIncompleteFragmentbuiltcachedSemanticsNodesemanticsNodesmergeUp _childrenAndElevationAdjustmentssiblingMergeGroups_producedSiblingNodesAndOwnersgeometryconfigProviderparentDataDirtycontributesToSemanticsTreeisRootshouldFormSemanticsNodedebugCheckForParentDataisBlockingPreviousSibling
shouldDropmarkNeedsBuildupdateChildren_getNonBlockedChildren_getTagsForChildren#_collectChildMergeUpAndSiblingGroup_didUpdateParentDataensureGeometry_updateChildGeometry_updateGeometryensureSemanticsNode_buildSemantics_buildSemanticsSubtree_produceSemanticsNode_createSemanticsNode_mergeSiblingGroup_updateSemanticsNodeGeometry_updateSiblingNodesGeometriesmarkNeedsUpdate_marksConflictsInMergeGroup	transformsemanticsClipRectpaintClipRectrecthiddencomputeChildGeometry_transformRect_temporaryTransformHolder_computeClipRect_intersectRects
ParentDataPaintingContextCallbackPaintingContextConstraintsRenderObjectVisitorLayoutCallback_LocalSemanticsHandlePipelineOwnerPipelineOwnerVisitorPipelineManifoldRenderObjectRenderObjectWithChildMixin#RenderObjectWithLayoutCallbackMixinContainerParentDataMixinContainerRenderObjectMixin"RelayoutWhenSystemFontsChangeMixin_SemanticsParentData_SemanticsConfigurationProvider_SemanticsFragment_IncompleteSemanticsFragment_MergeUpAndSiblingMergeGroups_RenderObjectSemantics"debugDumpRenderObjectSemanticsTree'_debugCollectRenderObjectSemanticsTrees_SemanticsGeometryClips_SemanticsGeometryDiagnosticsDebugCreatorÇPictureRecorderDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsPropertyDoublePropertyEnumPropertyErrorDescription	ErrorHintErrorSummaryFlagPropertyFlutterErrorInformationCollectorIntPropertyStringPropertyHitTestEntryHitTestResultsetupParentData	protectedmustCallSupervoidoverrideStringcanvasOffsetCanvasrepaintCompositedChildClipContextContainerLayerRectisRepaintBoundarybool_needsPaintdebugAlsoPaintedParent!debugRegisterRepaintBoundaryPaintincludedParentincludedChildOffsetLayer_layerHandlelayerupdateCompositedLayeroldLayerattachedoffsetremoveAllChildren	identical_needsCompositedLayerUpdatedebugCreatorruntimeTypechildContextpaintBounds_paintWithContextzerostopRecordingIfNeeded_wasRepaintBoundarycustomContextdebugOnProfilePaintcallgetSaveCountLayerremoveappendPictureLayerRendererBindinginstancecreatePictureRecordercreateCanvasCompositionCallbackaddCompositionCallbackVoidCallbackdebugRepaintRainbowEnabledPaintstylePaintingStylestrokestrokeWidthcolordebugCurrentRepaintColortoColordrawRectdeflatedebugPaintLayerBordersEnabledColorpictureendRecordingisComplexHintwillChangeHintalwaysNeedsCompositinghasChildrenchildPaintBoundsneedsCompositingClipRectLayerCliphardEdgeclipBehaviornoneshiftclipRectclipRectAndPaintClipRRectLayerRRect	antiAlias	clipRRectclipRRectAndPaintRSuperellipseClipRSuperellipseLayerclipRSuperellipseclipRSuperellipseAndPaintPathClipPathLayerclipPathclipPathAndPaintColorFilterColorFilterLayercolorFilterMatrix4TransformLayertranslationValuesdxdymultiply	translate	transformMatrixUtilsinverseTransformRectsavestoragerestoreOpacityLayerintalphaobjectRuntimeTypehashCodeBoxConstraintsdebugAssertIsValid==toStringdebugDumpRenderTree	immutabledoublenanRenderConstrainedBoxadditionalConstraintslayoutvisitChildrenvisitChildrenForSemanticsinvokeLayoutCallbackTSemanticsHandledebugMaybeDispatchCreatedsemanticsOwneraddListenerdebugMaybeDispatchDisposedremoveListener_didDisposeSemanticsHandleDiagnosticableTreeMixinrequestVisualUpdateSemanticsUpdateFlutterViewSemanticsUpdateCallbackdetachattachList
nonVirtualIterablekReleaseModeMap#debugEnhanceLayoutTimelineArgumentslengthFlutterTimeline	startSync	arguments
isNotEmptysortadepthbiaddAllgetRange_needsLayoutowner_layoutWithoutResizechildflushLayoutisEmpty
finishSyncnode_needsCompositingBitsUpdate_updateCompositingBitsclearflushCompositingBits"debugEnhancePaintTimelineArgumentsupdateLayerProperties_skippedPaintingOnLayer
flushPaintsemanticsEnabledSemanticsOwnerSemanticsBinding debugOutstandingSemanticsHandles
DeprecatedensureSemantics_listeneronSemanticsUpdatedisposeSetscheduleInitialSemanticswhereobjecttoList
_semanticsparentDataDirtyupdateChildrendebugCheckForParentDataensureGeometryreversedensureSemanticsNodesendSemanticsUpdateflushSemanticstoDiagnosticsNodedebugFillPropertiesadddefaultValue_debugParent	drawFramecontainsforEach
adoptChild
ListenableonNeedVisualUpdateSchedulerBindingensureVisualUpdate	RenderBoxRenderObjectElementPictureImageSizesize
RenderViewhitTestmarkNeedsLayoutHitTestTargetdebugPaintSizeEnabledBindingBasereassembleApplication
reassemble
parentData_depthredepthChildrenOverlayPortalvisibleForOverriding_parentparent_isRelayoutBoundaryDebugCreatorwidgetsObject
StackTracereportErrorFlutterErrorDetails	exceptionstacklibrarycontextinformationCollector
kDebugModeDiagnosticsTreeStyletruncateChildrenpragma	fromPartserrorPropertydebugDoingLayout#_debugAllowMutationsToDirtySubtrees_doingThisLayoutWithCallback_debugMutationsLockeddebugLayoutParentdebugActiveLayoutdebugDoingThisLayoutperformLayoutconfigProvider	effectiveisSemanticBoundarybuiltRenderSliverSliverGeometry
StateError_debugDoingThisLayoutdebugPrintMarkNeedsLayoutStacksdebugPrintStacklabel_nodesNeedingLayout_debugDoingLayoutdebugPrintLayouts
debugPrintedebugProfileLayoutsEnabledtoTimelineArgumentsisAppliedConstraintcurrentsplitPatternRegExpmatchAsPrefixMatch
groupCountgrouptrimparentUsesSizeisTightcomputeDryLayoutoverlayChildLayoutBuilder	GlobalKey_enableMutationsToDirtySubtreesRepaintBoundaryLayerHandlemarkNeedsCompositingBitsUpdate"_nodesNeedingCompositingBitsUpdate_nodesNeedingPaintremoveWheretdebugDoingPaintdebugPrintMarkNeedsPaintStacksmarkNeedsPaintRenderOpacity_debugDoingPaintdebugProfilePaintsEnableddescribeForError
paintChildRenderOffstagepaintsChildrootNodeidentityindexapplyPaintTransforminvertpushClipRectSemanticsNodeRenderViewportBasecacheExtent_debugDoingSemantics_semanticsOwner_nodesNeedingSemanticsSemanticsConfigurationSemanticsEvent	sendEventcachedSemanticsNodeisMergedIntoParentsendSemanticsEventclearSemanticsmarkNeedsUpdate
updateWithconfigchildrenInInversePaintOrderPointerEventdescribeIdentityDiagnosticLevelinfodebugtoStringDeepprefixLineOneprefixOtherLinesminLevel	wrapWidthtoStringShallowjoinervalueifTrueleveltooltipmissingIfNull+isBlockingSemanticsOfPreviouslyPaintedNodesshowInViewportSingleChildScrollViewDurationCurveCurveseaseshowOnScreen
descendantrectdurationcurveshallownameSingleChildRenderObjectWidget	ChildTypeErrorSpacer_child	dropChildredepthChildlayoutCallbackscheduleLayoutCallbackOverlayOverlayEntryLayoutBuilderrunLayoutCallbackSliverLayoutBuilder_needsRebuilddebugNeedsLayoutnextSiblingpreviousSibling
firstChild	lastChildParentDataTypeRenderBoxContainerDefaultsMixinContainerBoxParentDataMultiChildRenderObjectWidget!SlottedContainerRenderObjectMixinequals_childCountafter_firstChild
_lastChild_debugUltimatePreviousSiblingOf_debugUltimateNextSiblingOf_insertIntoChildListinsert_removeFromChildListsystemFontsDidChangeTextPainter	ParagraphSchedulerPhasetransientCallbacksidleschedulerPhase'_hasPendingSystemFontsDidChangeCallBackscheduleFrameCallbackdebugDisposedPaintingBindingsystemFonts_scheduleSystemFontsUpdateMergeSemanticsSemanticsActiontapIgnorePointerAbsorbPointercontributesToSemanticsTreeexplicitChildNodesshouldFormSemanticsNodeSemanticsTagmergeIntoParentblocksUserActions	setEqualstagsForChildrenhashhashAllUnordereddescribeSemanticsConfigurationoriginalisBlockingUserActions	elevationchildConfigurationsDelegateValueSettercopyabsorbRenderParagraphhasBeenAnnotatedsemanticsParent_getNonBlockedChildrenBlockSemanticsisBlockingPreviousSiblingisInvisible	whereType	semanticsmarkNeedsBuildresetisMergingSemanticsOfDescendants$1$2	isMergeUpmapfragmentconfigToMergeUp	absorbAllchildSemantics _childrenAndElevationAdjustmentskeyspassUpChildelevationAdjustmentsiblingMergeGroupsupdateConfigaddTagForChildrenrenderChildtoSet$ChildSemanticsConfigurationsDelegaterenderObject_didUpdateParentDatamergeUp"ChildSemanticsConfigurationsResultsemanticBoundsrootcomputeChildGeometryparentPaintClipRectpaintClipRectparentSemanticsClipRectsemanticsClipRectparentTransform_updateGeometrynewGeometryisHiddenhiddenusedSemanticsIdstagsid_buildSemanticssemanticsNodesassembleSemanticsNodemergesToSiblingexpandMapEntryentriesentry	intersecttransformRectexpandToIncludekeywasSemanticsBoundarygeometry_blocksPreviousSibling markSiblingConfigurationConflictisCompatibleWithjquotedrenderViews
renderViewjoinclonesetZerolastisZerodescribeApproximatePaintClipsetIdentitydescribeSemanticsClip	ClipContextSemanticsHandleDiagnosticableTreeMixin
ListenableHitTestTargetRenderObject
ParentData_SemanticsFragmentDiagnosticsProperty8	KA€∏™T0!GX˜∏bÉ,ÑrDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsPropertyDoublePropertyEnumPropertyErrorDescription	ErrorHintErrorSummaryFlagPropertyFlutterErrorInformationCollectorIntPropertyStringProperty Çˇpackage:flutter/foundation.dartÑõÑªHitTestEntryHitTestResult Ñtpackage:flutter/gestures.dart  ÑΩpackage:flutter/painting.dart 
Å∞ÅƒPictureRecorder Åö   Å™Å≠uiÅ≠dart:ui  Å»   package:flutter/animation.dart  ÅÒ   package:flutter/foundation.dart  Ç   package:flutter/gestures.dart  ÇC   package:flutter/painting.dart  Çk   package:flutter/scheduler.dart  Çî   package:flutter/semantics.dart  Çæ   binding.dart  Ç’   
debug.dart  ÇÍ   
layer.dart¿ ¢ ¿é÷ós <ÄÜÄ§Ä•ÄøÄ√ÄÚÄˆÅÅ2ÅSÅoÅèÅòÅôÅ∆Å«ÅÇÇBÇjÇìÇºÇΩÇ‘ÇÈÇ˛ÇˇÉ(É1ÉVÉoÉåÉ§É∫É‘ÉÁÉ˝ÑÑ)ÑGÑ\ÑtÑΩÑÂÑÊÖ.Ö2Ö|ÖƒÖ¯Ö¸Ü
ÜÜYÜûÜ±ÜÓÜ˚ááá á,áMáOáPáÖáâá⁄à&à*à`àπà∫à–à‘â&âkâµâ…âÕäänäæãã"ã&ãmã´ã◊ã˘ãˇåGå^åkå™å´å”å‘ç!çhçnç©çØç˚éééAéGéíéﬂè0èLèRèbèhè∏èŸê;êZêÆê≤ê≥ê⁄êÙëë@ëGëlë|ë≥ë‚íí/í8íKíUíùíªí·ììì_ì™ìıîîiîûî´îËïïïEïZïfïåïÊïÙñ!ñuñÿó#ó,óaógóñóóó‘ò	òòcòvòÄòÅò∆ò˛òˇôNôÇôøôÈôÌôÓö<öBöçö⁄õ(õcõiõyõõœõú*úlúåú∫úªùù$ù4ù^ùqù{ù”ùﬂû
û\ûΩüüü@üoüsütü¡††E†K†[†a†Æ†»†˝°°@°l°s°É°¢°±°È¢¢¢*¢4¢8¢9¢]¢c¢±£ £P£á£ó£ø£“£‹£›§ §§E§ì§‹••?•f•ì•†•Õ•”•◊•ÿ¶¶/¶T¶ë¶í¶‘ßßRß_ßéß¥ßºßŒ®®:®à®ù®©®Ø®‰©7©]©Ä©Ñ©Ö©—©‡©Ê™/™u™¢™®™ı´´´7´R´f´â´ç´é´®´‘´‰´˚¨"¨E¨f¨u¨ú¨ø¨‡¨Ë¨˚≠≠≠≠ ≠5≠T≠u≠à≠â≠≠≠≥≠˝ÆGÆfÆrÆàÆ£ÆºÆ¬ÆÂÆ˙Æ˛ÆˇØØ5ØhØ™ØÎ∞∞∞∞m∞|∞Ç∞–±±h±®±Æ±Í±≤ ≤+≤q≤Æ≤≤≤≥≤Ó≤Ù≥@≥è≥ﬁ≥Î≥Ò¥@¥ã¥ù¥™¥ª¥‹¥ıµµ	µµAµ]µqµûµ¿µ¸∂:∂B∂m∂â∂ù∂ ∂Ï∑∑N∑V∑i∑s∑´∑≈∑€∑Ô∑Û∑Ù∏D∏X∏^∏≠∏ˆπππVπ¶πÚ∫∫0∫Q∫j∫p∫ô∫ù∫û∫Ò∫˜ªGªêª›ººº`º∞º¸ΩΩ;Ω\ΩuΩ{Ω•Ω©Ω™ΩﬂΩÂæ6æqæwæƒøøfø¨ø≤ø¬ø»¿ @¿ @#¿ @B¿ @_¿ @w¿ @{¿ @|¿ @Õ¿ A¿ Al¿ Aé¿ Aî¿ A„¿ B'¿ B;¿ BA¿ BÜ¿ B÷¿ C&¿ Ct¿ C∑¿ CÃ¿ C“¿ D#¿ Dt¿ D¡¿ E¿ Eb¿ E†¿ E¶¿ E∂¿ Eº¿ F¿ F¿ F-¿ FL¿ Fq¿ FÜ¿ F¢¿ F©¿ F˜¿ GH¿ Gj¿ Gê¿ Gñ¿ G≥¿ G–¿ H¿ H¿ HJ¿ HQ¿ HR¿ Hu¿ Hü¿ H£¿ H§¿ HÏ¿ HÚ¿ I8¿ IE¿ Iî¿ Iƒ¿ I»¿ I…¿ I¯¿ I˛¿ JP¿ Jò¿ Jœ¿ K¿ Kk¿ K©¿ KÌ¿ KÛ¿ LA¿ LÖ¿ Lö¿ L†¿ LË¿ M1¿ Mz¿ Mè¿ Mï¿ MÊ¿ N.¿ N>¿ ND¿ Nî¿ N’¿ N€¿ O$¿ O*¿ Ot¿ O¡¿ P¿ PU¿ P•¿ PÌ¿ Q9¿ Qo¿ QÑ¿ Q£¿ Qæ¿ Q—¿ Q‰¿ R¿ R2¿ RO¿ RV¿ R{¿ Rò¿ R´¿ R±¿ RÈ¿ S¿ SD¿ SP¿ St¿ Sõ¿ SÊ¿ S˙¿ T¿ Tj¿ T}¿ TÉ¿ Tá¿ Tà¿ Tø¿ T≈¿ U¿ U¿ U_¿ Ue¿ Uµ¿ U¯¿ U˛¿ VN¿ Vô¿ V¿¿ V∆¿ W¿ WY¿ W_¿ W∞¿ W∂¿ W˝¿ X¿ X9¿ XL¿ X]¿ Xr¿ Xô¿ X¡¿ Xﬂ¿ XÊ¿ Y¿ Y(¿ Y;¿ YA¿ Yu¿ Y∞¿ YÃ¿ Z¿ Z¿ Z?¿ Zf¿ ZØ¿ Z√¿ Z–¿ [3¿ [F¿ [L¿ [P¿ [Q¿ [ã¿ [ë¿ [‡¿ [Ê¿ \+¿ \1¿ \Å¿ \ƒ¿ \ ¿ ]%¿ ]p¿ ]ó¿ ]ù¿ ]ˆ¿ ^@¿ ^F¿ ^ó¿ ^ù¿ ^Ì¿ ^Û¿ _:¿ _k¿ _Ü¿ _ô¿ _™¿ _œ¿ _ˆ¿ `¿ `D¿ `K¿ `p¿ `ç¿ `†¿ `¶¿ `⁄¿ a!¿ a=¿ aé¿ aö¿ aƒ¿ aÎ¿ b4¿ bH¿ bU¿ bv¿ bã¿ b°¿ b∑¿ b‹¿ bÂ¿ b¯¿ b˛¿ c¿ c¿ c-¿ c3¿ cÇ¿ cà¿ cÕ¿ c”¿ d#¿ df¿ dl¿ dª¿ e¿ e"¿ e(¿ ex¿ eπ¿ eø¿ f¿ f	¿ fP¿ fo¿ fä¿ fù¿ fÆ¿ f¡¿ fË¿ g¿ g-¿ g4¿ gY¿ gv¿ gâ¿ gè¿ g√¿ g˚¿ h¿ hV¿ hb¿ hÜ¿ h≠¿ hˆ¿ i
¿ i¿ ix¿ iã¿ ië¿ iï¿ iñ¿ i»¿ iŒ¿ j¿ j¿ jg¿ jç¿ jì¿ j„¿ k*¿ k0¿ kw¿ k}¿ k ¿ l¿ ll¿ l≤¿ l÷¿ lÈ¿ m¿ m-¿ mM¿ mT¿ mó¿ mº¿ m„¿ mı¿ m˘¿ m˙¿ n+¿ n1¿ nÄ¿ nÜ¿ n◊¿ n˝¿ o¿ oO¿ o†¿ oŸ¿ oﬂ¿ p0¿ pr¿ px¿ pø¿ p‡¿ p˚¿ q¿ q%¿ qL¿ qj¿ qq¿ qò¿ q’¿ qı¿ r$¿ r@¿ rÅ¿ r≠¿ ræ¿ rÕ¿ rﬁ¿ rÓ¿ sO¿ sX¿ sl¿ sy¿ sÜ¿ só¿ s»¿ sÂ¿ s˝¿ t¿ t¿ t¿ t¿ tM¿ tS¿ t†¿ tÃ¿ t“¿ u"¿ uk¿ uª¿ u¡¿ v¿ vN¿ vT¿ võ¿ v°¿ vÓ¿ w@¿ wê¿ w÷¿ wÚ¿ x¿ x¿ x;¿ xW¿ x^¿ xô¿ x£¿ xπ¿ x“¿ x˛¿ y¿ y¿ y¿ y!¿ y8¿ y≥¿ yµ¿ y∂¿ y·¿ yÂ¿ z1¿ zr¿ zv¿ zú¿ z†¿ z¿ {<¿ {`¿ {d¿ {≥¿ |¿ |P¿ |T¿ |§¿ |Ú¿ }@¿ }ç¿ }ö¿ }û¿ }Ê¿ ~5¿ ~¿ ~¿¿ ¿ `¿ Æ¿ Ù¿ Ä¿ Ä¿ Äc¿ ÄÆ¿ Ä˝¿ ÅG¿ Å}¿ ÅÕ¿ ÅÂ¿ ÅÈ¿ Ç7¿ ÇÖ¿ Ç‘¿ ÇÓ¿ ÇÚ¿ ÉB¿ Éì¿ Éû¿ Éª¿ Ñ¿ ÑT¿ Ñk¿ Ñl¿ Ñ∂¿ Ñ ¿ ÑÀ¿ Ö¿ Ö&¿ Ö'¿ ÖU¿ Ö[¿ Öû¿ Ö§¿ ÖÛ¿ Ü¿ Ü¿ Üc¿ Ü≥¿ á¿ áK¿ áÑ¿ á’¿ à&¿ à7¿ à=¿ àã¿ àÿ¿ â¿ â¿ âY¿ âu¿ âõ¿ âÀ¿ â“¿ âÏ¿ ä¿ ä	¿ ä¿ ä¿ äQ¿ äU¿ ä¨¿ äÌ¿ äÓ¿ ã)¿ ã-¿ ã^¿ ã¨¿ ã≠¿ ãÊ¿ å7¿ åä¿ å¶¿ å€¿ å·¿ åÂ¿ åÊ¿ ç¿ ç¿ çO¿ ço¿ çp¿ ç|¿ çè¿ çΩ¿ çŸ¿ é¿ é¿ é@¿ éD¿ éF¿ éG¿ é~¿ éÇ¿ é“¿ è#¿ èp¿ èà¿ èå¿ è◊¿ ê¿ êh¿ êî¿ ê›¿ ë+¿ ë{¿ ëÃ¿ í¿ íb¿ í®¿ íˆ¿ ìA¿ ìÅ¿ ìÕ¿ î¿ îh¿ îl¿ îª¿ ï¿ ïR¿ ïp¿ ït¿ ï≈¿ ñ¿ ñb¿ ñØ¿ ñ˚¿ óI¿ óä¿ óé¿ ó⁄¿ ò(¿ òx¿ ò¬¿ òÒ¿ ô)¿ ôI¿ ôO¿ ôú¿ ôÈ¿ ö¿ ö!¿ ö>¿ ö`¿ ö|¿ öü¿ ö¶¿ öÒ¿ öı¿ öˆ¿ õF¿ õj¿ õp¿ õ¡¿ ú¿ ú[¿ úz¿ úÄ¿ ú«¿ ù¿ ù]¿ ùá¿ ùà¿ ùŒ¿ ù‘¿ û¿ û2¿ ûa¿ ûb¿ ûπ¿ ûø¿ ü¿ üA¿ üu¿ üv¿ üæ¿ üƒ¿ †¿ †5¿ †6¿ †|¿ †Ç¿ †“¿ †˘¿ °¿ °>¿ °[¿ °h¿ °ê¿ °ñ¿ °ö¿ °õ¿ °‡¿ ¢¿ ¢&¿ ¢L¿ ¢j¿ ¢x¿ ¢~¿ ¢ó¿ ¢Æ¿ ¢À¿ ¢œ¿ ¢–¿ £¿ £g¿ £§¿ £©¿ £Ú¿ §>¿ §á¿ §ø¿ §ƒ¿ • ¿ •P¿ •û¿ •Í¿ •ˇ¿ ¶&¿ ¶c¿ ¶d¿ ¶π¿ ¶ﬂ¿ ¶Â¿ ß*¿ ßs¿ ß¡¿ ®¿ ®¿ ®^¿ ®d¿ ®≤¿ ®ø¿ ®Õ¿ ©¿ ©¿ ©T¿ ©Z¿ ©ö¿ ©†¿ ©„¿ ©ˇ¿ ™1¿ ™S¿ ™z¿ ™{¿ ™Ω¿ ™√¿ ´¿ ´^¿ ´î¿ ´ö¿ ´„¿ ´˙¿ ¨¿ ¨F¿ ¨X¿ ¨ã¿ ¨¿¿ ¨¸¿ ≠.¿ ≠;¿ ≠E¿ ≠Z¿ ≠f¿ ≠á¿ ≠ø¿ ≠Í¿ ≠Û¿ ≠˘¿ Æ	¿ Æ)¿ Æ<¿ ÆF¿ ÆP¿ Æ¿ Æ®¿ ÆÎ¿ Ø¿ Øk¿ Ø°¿ Ø…¿ Øı¿ ∞'¿ ∞|¿ ∞ë¿ ∞ü¿ ∞´¿ ∞ﬁ¿ ±¿ ±@¿ ±L¿ ±V¿ ±°¿ ±ƒ¿ ±Ï¿ ±Ù¿ ±ı¿ ≤¿ ≤.¿ ≤C¿ ≤O¿ ≤Ñ¿ ≤°¿ ≤©¿ ≤∑¿ ≤‹¿ ≥"¿ ≥+¿ ≥;¿ ≥a¿ ≥s¿ ≥ñ¿ ≥æ¿ ≥”¿ ≥ﬂ¿ ≥˙¿ ¥ ¿ ¥(¿ ¥.¿ ¥2¿ ¥3¿ ¥Å¿ ¥“¿ µ¿ µn¿ µõ¿ µœ¿ µ–¿ µ˛¿ ∂>¿ ∂]¿ ∂q¿ ∂Å¿ ∂∑¿ ∂È¿ ∂¸¿ ∑¿ ∑¿ ∑"¿ ∑2¿ ∑W¿ ∑i¿ ∑¢¿ ∑∑¿ ∑√¿ ∑…¿ ∑Õ¿ ∑Œ¿ ∏ ¿ ∏!¿ ∏Y¿ ∏_¿ ∏≠¿ ∏¡¿ ∏·¿ ∏˙¿ π^¿ πd¿ π»¿ ∫¿ ∫V¿ ∫}¿ ∫Ö¿ ∫ã¿ ∫ª¿ ∫Ó¿ ª¿ ª¿ ª$¿ ªV¿ ªö¿ ª°¿ ª∫¿ ªﬁ¿ ª‰¿ ªË¿ ªÈ¿ º%¿ º&¿ ºx¿ º~¿ ºÀ¿ Ω ¿ Ωh¿ ΩΩ¿ Ω—¿ Ω◊¿ æ¿ æ+¿ æ9¿ æ¿ æÄ¿ æΩ¿ æ√¿ ø¿ ø¿ øF¿ øg¿ øó¿ ø∏¿ øπ¿ ø¿ øˆ¿ ¿?¿ ¿è¿ ¿‡¿ ¿Ê¿ ¡/¿ ¡E¿ ¡^¿ ¡ë¿ ¡£¿ ¡’¿ ¬
¿ ¬E¿ ¬v¿ ¬É¿ ¬ç¿ ¬¢¿ ¬Æ¿ ¬œ¿ √¿ √1¿ √:¿ √@¿ √J¿ √\¿ √}¿ √í¿ √û¿ √ﬁ¿ ƒ¿ ƒ¿ ƒL¿ ƒo¿ ƒ«¿ ƒ¯¿ ≈T¿ ≈á¿ ≈≥¿ ≈◊¿ ∆¿ ∆(¿ ∆c¿ ∆q¿ ∆Ñ¿ ∆∞¿ ∆º¿ ∆∆¿ ∆Œ¿ «¿ «¿ «'¿ «5¿ «Y¿ «ü¿ «®¿ «∏¿ « ¿ «Ï¿ »¿ »¿ »(¿ »N¿ »V¿ »\¿ »`¿ »a¿ »Æ¿ »¥¿ …¿ …U¿ …Ü¿ …–¿  ¿  g¿  y¿  ¿  »¿  Â¿ À¿ ÀA¿ ÀB¿ ÀT¿ ÀZ¿ À¶¿ Àˆ¿ Ã5¿ ÃD¿ Ãä¿ Ãª¿ Ãˆ¿ Ã˙¿ ÕF¿ Õn¿ Õo¿ ÕÅ¿ Õá¿ Õ“¿ Œ"¿ Œ[¿ Œj¿ Œﬁ¿ œ5¿ œp¿ œt¿ œ≤¿ œŸ¿ œˆ¿ –*¿ –.¿ –/¿ –P¿ –¶¿ –À¿ –€¿ — ¿ —^¿ —i¿ —∫¿ —„¿ —Î¿ “¿ “7¿ “U¿ “}¿ “É¿ “á¿ “à¿ “Æ¿ “”¿ “˙¿ ”¿ ”¿ ”¿ ”A¿ ”Ü¿ ”á¿ ””¿ ”·¿ ”Á¿ ‘¿ ‘e¿ ‘k¿ ‘∏¿ ‘Û¿ ’2¿ ’8¿ ’Å¿ ’–¿ ’Î¿ ÷¿ ÷(¿ ÷6¿ ÷<¿ ÷U¿ ÷©¿ ÷Ø¿ ÷‘¿ ÷‰¿ ◊¿ ◊¿ ◊$¿ ◊.¿ ◊Ä¿ ◊—¿ ÿ¿ ÿK¿ ÿ{¿ ÿú¿ ÿ¯¿ Ÿ¿ Ÿ[¿ ŸÅ¿ Ÿú¿ Ÿ€¿ Ÿ„¿ ⁄¿ ⁄J¿ ⁄Ä¿ ⁄÷¿ €(¿ €w¿ €ñ¿ €£¿ €Ù¿ ‹E¿ ‹Y¿ ‹c¿ ‹ç¿ ‹ï¿ ‹∞¿ ‹÷¿ ‹ﬁ¿ ‹ﬂ¿ ‹Ò¿ ›-¿ ›M¿ ›í¿ ›ú¿ ›±¿ ›Ω¿ ›æ¿ ›Ÿ¿ ﬁ¿ ﬁ ¿ ﬁX¿ ﬁá¿ ﬁ£¿ ﬁ∑¿ ﬁ¡¿ ﬁÎ¿ ﬁÛ¿ ﬂ¿ ﬂ4¿ ﬂ<¿ ﬂ=¿ ﬂX¿ ﬂú¿ ﬂ§¿ ﬂÂ¿ ‡¿ ‡0¿ ‡D¿ ‡N¿ ‡}¿ ‡Ö¿ ‡†¿ ‡∆¿ ‡Œ¿ ‡œ¿ ‡˝¿ ·2¿ ·R¿ ·Z¿ ·h¿ ·ê¿ ·÷¿ ·ﬂ¿ ·Ô¿ ‚¿ ‚'¿ ‚<¿ ‚H¿ ‚c¿ ‚â¿ ‚ë¿ ‚ó¿ ‚õ¿ ‚ú¿ ‚®¿ ‚⁄¿ ‚¯¿ „F¿ „M¿ „Q¿ „R¿ „^¿ „£¿ „Œ¿ ‰/¿ ‰3¿ ‰4¿ ‰I¿ ‰J¿ ‰Ñ¿ ‰£¿ ‰§¿ ‰√¿ Â¿ Â)¿ Â:¿ Â>¿ Â?¿ Âú¿ Âù¿ ÂÍ¿ Â¿ Ê;¿ Êä¿ Ê≠¿ Êÿ¿ Ê˜¿ Á¿ ÁD¿ Áa¿ Áb¿ Áï¿ Á≥¿ Áπ¿ ÁΩ¿ Áæ¿ ÁÎ¿ ÁÒ¿ Ë<¿ Ëç¿ ËØ¿ Ë¡¿ Ë‡¿ È¿ È,¿ È{¿ ÈÃ¿ Í¿ Í¿ ÍA¿ ÍW¿ Í]¿ Ía¿ Íb¿ Íß¿ ÍÓ¿ Î<¿ Îã¿ Îª¿ Ï¿ Ï	¿ Ï5¿ Ï;¿ Ïä¿ Ï◊¿ Ì$¿ Ìo¿ Ìº¿ Ó¿ Ó\¿ Ó|¿ ÓÇ¿ Ó√¿ ÓÁ¿ ÓÌ¿ Ô>¿ Ôç¿ Ôì¿ Ôæ¿ ÔÁ¿ ¿ 7¿ ê¿ ™¿ √¿ Á¿ Ì¿ Ò
¿ Ò*¿ Ò0¿ Ò4¿ Ò5¿ Ò~¿ ÒÑ¿ Ò’¿ ÒÁ¿ ÒÌ¿ Ú<¿ Úã¿ Ú≥¿ Ú€¿ Û¿ Û[¿ Ûx¿ Ûë¿ Ûµ¿ Ûª¿ Ûÿ¿ ÛÓ¿ ÛÙ¿ Û¯¿ Û˘¿ ÙA¿ ÙG¿ ÙW¿ Ù]¿ ÙÉ¿ Ù´¿ Ù‡¿ ı ¿ ı¿ ı¿ ı>¿ ıD¿ ıì¿ ı‚¿ ˆ3¿ ˆ9¿ ˆu¿ ˆà¿ ˆß¿ ˆ≈¿ ˆ‰¿ ˜¿ ˜4¿ ˜T¿ ˜p¿ ˜ë¿ ˜¡¿ ˜·¿ ¯¿ ¯	¿ ¯¿ ¯¿ ¯M¿ ¯Q¿ ¯~¿ ¯¡¿ ¯¬¿ ¯Í¿ ¯Ó¿ ˘.¿ ˘{¿ ˘ ¿ ˙¿ ˙e¿ ˙å¿ ˙ê¿ ˙‡¿ ˚1¿ ˚w¿ ˚ó¿ ˚õ¿ ˚È¿ ¸5¿ ¸m¿ ¸∏¿ ¸˙¿ ˝ ¿ ˝P¿ ˝í¿ ˝ò¿ ˝®¿ ˝Æ¿ ˝ı¿ ˛3¿ ˛P¿ ˛Q¿ ˛ü¿ ˛Ì¿ ˇ¿ ˇ¿ ˇ]¿ ˇ™¿ ˇ˜¿ ¿ ¿ c¿ ≤¿ ¿¿¿¿e¿ß¿≈¿«¿»¿Í¿Ó¿2¿R¿V¿ô¿ù¿È¿9¿Ñ¿§¿®¿Û¿A¿ä¿⁄¿'¿v¿∆¿Ì¿Ò¿5¿\¿`¿q¿u¿¬¿¿c¿}¿Å¿Õ¿¿k¿º¿˙¿˛¿	%¿	)¿	o¿	Ω¿

¿
U¿
§¿
Ú¿B¿ê¿ÿ¿'¿t¿ø¿ ¿¿S¿£¿Ù¿0¿4¿C¿G¿é¿’¿Ò¿ı¿C¿î¿‡¿-¿r¿≥¿∑¿¿:¿>¿R¿V¿°¿–¿‘¿!¿o¿¿¿¿R¿†¿Ì¿¿¿D¿H¿ô¿Í¿5¿Ö¿÷¿Ì¿Ò¿A¿Q¿U¿ï¿„¿Ù¿¯¿E¿î¿ò¿À¿œ¿!¿q¿¿¿¿V¿Z¿®¿ı¿D¿ê¿ﬂ¿.¿c¿¥¿¿¿e¿ó¿™¿Ù¿9¿f¿j¿k¿∫¿	¿T¿É¿â¿ ¿¿g¿Ü¿å¿ÿ¿ﬁ¿Ó¿Ù¿ !¿ 7¿ N¿ t¿ ä¿ ™¿ ”¿ Ì¿ ı¿ ˘¿ ˙¿! ¿!&¿!c¿!¿!ì¿!£¿!ƒ¿!◊¿!·¿!ˆ¿!˙¿!˚¿"¿"¿"S¿"Y¿"§¿"Û¿#>¿#}¿#∆¿$¿$.¿$4¿$¿$¶¿$¨¿$Ë¿$˘¿%¿%)¿%W¿%v¿%Ü¿%”¿%Â¿&¿&&¿&I¿&∑¿&≈¿&“¿&Ô¿'¿'¿'¿'¿'¿'¿'N¿'T¿'°¿'¿(@¿(~¿(Ñ¿(œ¿(˛¿)N¿)å¿)›¿*)¿*u¿*∞¿* ¿*À¿+¿+¿+b¿+ì¿+ ¿+Ò¿,¿,C¿,I¿,M¿,N¿,à¿,é¿,ﬁ¿-&¿-c¿-i¿-∑¿.¿.R¿.°¿.Á¿/7¿/=¿/Ö¿/’¿/Ù¿0¿0!¿0"¿0s¿0Ç¿0à¿0…¿0÷¿1 ¿1"¿1D¿1e¿1Ñ¿1ä¿1é¿1è¿1…¿1œ¿2 ¿2X¿2e¿2Å¿2Ç¿2Ω¿2√¿3¿3*¿3C¿3D¿3å¿3í¿3¿¿3∆¿4¿4&¿4>¿4n¿4o¿4∑¿4Ω¿5¿5_¿5p¿5}¿5•¿5»¿5ÿ¿5¯¿6¿69¿6A¿6ä¿6ù¿6ß¿6®¿6ƒ¿6€¿7¿7!¿7;¿7O¿7l¿7r¿7ã¿7è¿7ê¿7‚¿7Ë¿87¿8ä¿8õ¿8®¿8œ¿8Ú¿9¿9@¿9j¿9í¿9ò¿9∏¿9’¿9Ô¿:¿:¿:¿:6¿:\¿:|¿:Ä¿:Å¿:≈¿:À¿;¿;P¿;Q¿;è¿;ï¿;≥¿;π¿;…¿;œ¿<#¿<;¿<<¿<â¿<ß¿<¬¿<‡¿<ˆ¿=¿=S¿=q¿=ñ¿=Ï¿>¿>{¿>õ¿>˙¿?¿?`¿?µ¿@¿@E¿@£¿@≤¿@ª¿@¬¿@∆¿@«¿A¿A¿Ae¿Ar¿A¨¿A“¿A”¿B¿B$¿Bq¿B~¿B∏¿Bﬁ¿Bﬂ¿C¿C ¿Cm¿Cy¿CΩ¿CË¿CÈ¿D0¿Dy¿D«¿D‰¿E¿E!¿EA¿EÉ¿E∞¿E¿¿Eˆ¿F¿F*¿F4¿FR¿Fb¿Fò¿F´¿Fµ¿F»¿FÃ¿FÕ¿G¿G)¿G/¿Go¿Gu¿Gª¿G¯¿H¿H¿H?¿H@¿Hv¿H|¿HÃ¿I¿I^¿Id¿I≤¿IŸ¿IÔ¿Iˇ¿J¿JS¿Jì¿J¿¿JÌ¿Jˇ¿K6¿KC¿KO¿KW¿KX¿Ká¿K’¿L&¿L>¿Lt¿Lã¿L†¿L®¿L©¿L÷¿Lˇ¿M4¿MÜ¿M‚¿N¿Nk¿N∏¿O¿O/¿OV¿O¶¿Oø¿O÷¿O‡¿O·¿P¿PY¿Pj¿Pè¿P†¿P™¿P≤¿P≥¿Q¿Q(¿Q~¿Q‡¿Qˆ¿Q˜¿R¿RU¿R¶¿R¬¿S(¿S5¿Sb¿Sî¿S¶¿S›¿SÍ¿T¿Tc¿TÇ¿Tπ¿T∆¿T“¿T⁄¿T€¿U¿U9¿Uù¿V ¿V-¿V_¿Vq¿V®¿Vµ¿V ¿W0¿W=¿WI¿WQ¿WR¿WÉ¿Wƒ¿WÕ¿X¿X<¿XZ¿XΩ¿Y$¿Y[¿Y\¿Yí¿Y£¿Y ¿Yı¿Z%¿Z5¿Zj¿Zu¿Z†¿[¿[0¿[e¿[p¿[í¿[ø¿[Ë¿\¿\=¿\J¿\]¿\·¿]E¿]P¿]Z¿]d¿]w¿]{¿]|¿]Õ¿]˙¿^ ¿^Q¿^û¿^Á¿^Ì¿_8¿_q¿_¡¿`¿`'¿`4¿`\¿`|¿`å¿`©¿`º¿`∆¿`ﬂ¿`„¿`‰¿a!¿a'¿ag¿aá¿a≠¿a∆¿a«¿b%¿b+¿b`¿bf¿bú¿b√¿bƒ¿c¿c¿cT¿cä¿cê¿cŒ¿d¿dK¿d\¿dÅ¿dû¿d∫¿dŒ¿e¿ec¿eö¿e⁄¿f
¿f&¿f?¿fE¿fl¿fó¿fø¿f≈¿f˙¿g9¿gh¿gÉ¿gõ¿g°¿g„¿h ¿hB¿hH¿hL¿hM¿hë¿hó¿hÁ¿i¿i¿iV¿iú¿i∫¿iÀ¿i›¿i˘¿j¿jH¿jL¿jM¿jç¿jì¿j‰¿k0¿k}¿k¥¿k∫¿k¿l¿l$¿l4¿lQ¿ld¿ln¿lÅ¿lÖ¿lÜ¿l¢¿l£¿l„¿lÈ¿m9¿mà¿m⁄¿n¿n!¿nj¿n¥¿o¿oW¿oß¿o˘¿pG¿pV¿p\¿pÆ¿p¸¿qI¿qô¿q…¿qœ¿r¿ri¿rÑ¿rä¿r€¿s#¿s@¿sA¿sì¿s‡¿t¿t¿tQ¿tW¿tò¿tæ¿tÀ¿tÎ¿u¿up¿uv¿uê¿uî¿uï¿u≤¿u≥¿v¿vR¿v£¿v¿w¿w(¿wQ¿wR¿w£¿wÒ¿x¿x¿xj¿xº¿y¿y5¿yd¿ye¿yü¿y©¿y ¿z¿z¿z#¿zÄ¿zß¿zΩ¿z≈¿zÏ¿{¿{	¿{¿{ ¿{$¿{%¿{v¿{«¿|¿|¿|'¿|-¿|~¿|Ã¿}¿}X¿}^¿}Æ¿}„¿}È¿~9¿~Ç¿~“¿¿l¿π¿Û¿˘¿Ä:¿Äà¿ÄÀ¿Ä—¿ÄË¿ÄÓ¿Å7¿ÅÅ¿Å–¿Ç¿ÇL¿Çù¿Çπ¿Çø¿ÇÎ¿É7¿ÉR¿Éy¿Éë¿É—¿Éﬂ¿ÉÂ¿É˛¿ÑS¿Ñe¿Ñî¿Ñ‹¿ÑÊ¿Ñ˚¿Ö¿Ö2¿ÖU¿Öv¿Öï¿Öõ¿Öü¿Ö†¿ÖÔ¿Ü¿Ü¿ÜK¿Üú¿ÜÎ¿á¿á"¿áP¿á]¿á~¿á•¿áæ¿áﬂ¿à¿à6¿àV¿àc¿àè¿àï¿à∏¿àº¿àΩ¿àˇ¿âL¿âã¿âë¿â⁄¿â‡¿ä¿ä?¿äV¿äs¿äw¿äx¿äƒ¿ä ¿ã¿ã=¿ãC¿ãá¿ã®¿ã≈¿ã€¿ã˜¿å¿åG¿åg¿åw¿åù¿å∞¿å∫¿å‰¿åË¿åÈ¿ç¿ç6¿çP¿ç´¿çÿ¿ç¸¿é'¿éS¿éc¿éá¿é´¿é·¿è¿è!¿èZ¿èb¿èu¿è¿èâ¿è†¿è¬¿è€¿ê¿ê¿ê$¿êZ¿ê¿ê§¿ê∑¿ê¡¿ê€¿êÒ¿êı¿êˆ¿ë'¿ë-¿ë|¿ëÀ¿í¿íI¿íO¿íù¿íÌ¿ì>¿ìä¿ìŒ¿î¿îY¿î_¿î¨¿î˜¿ï?¿ïE¿ïì¿ï‚¿ñ/¿ñ\¿ñâ¿ñ—¿ñÓ¿ó%¿óX¿ój¿óù¿óÎ¿óı¿ò
¿ò¿òj¿òp¿ò|¿ò¢¿ò≈¿òË¿ô8¿ôT¿ô∂¿ôÏ¿ö2¿öU¿öÉ¿öò¿ö¶¿ö≤¿öı¿õ@¿õ¢¿õŒ¿ú¿úL¿ú}¿ú£¿ú√¿ù¿ùl¿ù°¿ù«¿ùÿ¿ùÁ¿ùÛ¿û¿û$¿û-¿û4¿ûX¿û|¿ûå¿ûª¿ûŒ¿ûÿ¿ûŸ¿ü>¿üv¿üà¿ü÷¿†¿†F¿†v¿†¬¿†Â¿†ˇ¿°7¿°^¿°Ö¿°ö¿°¶¿°ﬂ¿¢¿¢¿¢¿¢!¿¢A¿¢B¿¢f¿¢ë¿¢°¿¢≈¿¢‰¿¢¯¿£Z¿£e¿£m¿£Ä¿£ä¿££¿£µ¿£€¿£¿£¸¿§¿§!¿§5¿§a¿§x¿§Ü¿§°¿§÷¿§ﬁ¿§¿•¿•,¿•8¿•>¿•k¿•{¿•ü¿•’¿•ˆ¿¶	¿¶¿¶¿¶4¿¶V¿¶h¿¶í¿¶ß¿¶≥¿¶Ã¿¶ˇ¿ß¿ß¿ßK¿ßp¿ßï¿ß®¿ß≤¿ßÃ¿ß‚¿ß„¿®¿®>¿®D¿®H¿®I¿®ï¿®ﬁ¿©+¿©w¿©»¿©ı¿™¿™¿™¿™k¿™ö¿™†¿™Ë¿´7¿´y¿´¿´œ¿¨¿¨M¿¨S¿¨£¿¨È¿≠'¿≠K¿≠X¿≠{¿≠|¿≠ª¿≠˝¿Æ¿ÆR¿Æù¿ÆË¿Ø!¿Ø'¿Øf¿Ø{¿ØÅ¿Ø“¿∞!¿∞M¿∞Z¿∞r¿∞s¿∞µ¿∞ª¿±
¿±U¿±†¿±Ÿ¿±ﬂ¿≤/¿≤Ä¿≤Œ¿≥¿≥0¿≥6¿≥Ç¿≥–¿¥¿¥e¿¥Æ¿¥Ê¿¥Ï¿µ2¿µÅ¿µ–¿∂!¿∂q¿∂í¿∂ü¿∂∑¿∂∏¿∂ˇ¿∑O¿∑ú¿∑Ë¿∏¿∏
¿∏[¿∏©¿∏˙¿πC¿πI¿πö¿πÍ¿π¿∫&¿∫3¿∫Ñ¿∫ß¿∫ ¿∫ı¿ª¿ª(¿ªZ¿ª~¿ªà¿ªò¿ªƒ¿ª ¿ªŒ¿ªœ¿ª›¿ªﬁ¿º!¿º'¿ºt¿ºÅ¿ºπ¿ºﬁ¿ºﬂ¿Ω¿Ω¿Ωe¿Ωq¿Ω≥¿Ω›¿Ωﬁ¿æ$¿æ*¿æ{¿æƒ¿ø¿ø'¿ø-¿ø}¿ø”¿¿¿¿m¿¿ó¿¿ù¿¿Ó¿¿ˇ¿¡¿¡]¿¡Ñ¿¡Ö¿¡“¿¬¿¬¿¬a¿¬~¿¬©¿¬…¿¬È¿¬Ò¿¬Ú¿√-¿√3¿√Å¿√–¿√˙¿ƒ ¿ƒQ¿ƒü¿ƒ¨¿ƒÿ¿ƒŸ¿ƒ˙¿ƒ˚¿≈:¿≈@¿≈è¿≈ï¿≈‡¿∆/¿∆Ä¿∆œ¿«¿«*¿«0¿«}¿«ß¿«≠¿» ¿»Q¿»û¿»¿…¿…Z¿…®¿…˙¿ ¿ ?¿ C¿ D¿ â¿ è¿ ﬂ¿À,¿Ày¿À»¿Ã¿Ãi¿ÃØ¿Ã˚¿ÕI¿Õ~¿ÕÑ¿Õ—¿Œ¿Œi¿Œµ¿œ¿œS¿œr¿œx¿œ«¿–¿–`¿–m¿–z¿–ò¿–˚¿—¿—¿—¿—,¿—T¿—`¿—z¿—¬¿“	¿“*¿“1¿“T¿“X¿“Y¿“´¿“¨¿” ¿”¿”W¿”™¿”∫¿”¿¿”Ì¿‘¿‘,¿‘<¿‘_¿‘r¿‘|¿‘è¿‘ì¿‘î¿‘Â¿’'¿’-¿’}¿’Õ¿’⁄¿’‡¿÷¿÷c¿÷™¿÷Ò¿◊6¿◊k¿◊q¿◊∂¿◊¸¿ÿ5¿ÿ_¿ÿ|¿ÿ£¿ÿ±¿ÿ∑¿ÿﬂ¿Ÿ¿Ÿ'¿ŸW¿Ÿg¿Ÿo¿Ÿp¿Ÿ«¿Ÿ¯¿⁄¿⁄¿⁄¿⁄S¿⁄å¿⁄ê¿⁄ë¿⁄“¿€¿€¿€m¿€ï¿€õ¿€⁄¿‹¿‹5¿‹ì¿‹±¿‹µ¿‹∂¿‹ÿ¿› ¿›¿›¿›L¿›k¿›î¿›∫¿›ﬁ¿ﬁ ¿ﬁ¿ﬁ¿ﬁG¿ﬁg¿ﬁm¿ﬁº¿ﬂ¿ﬂS¿ﬂ™¿ﬂı¿‡*¿‡E¿‡p¿‡≈¿‡¿·¿·C¿·n¿·Ü¿·ì¿·æ¿·ƒ¿·»¿·…¿‚¿‚¿‚_¿‚´¿‚¯¿„1¿„7¿„m¿„s¿„ø¿‰¿‰S¿‰ü¿‰⁄¿‰˜¿Â¿Â¿Â9¿ÂL¿ÂV¿Âi¿Âm¿Ân¿Ââ¿Âä¿Â…¿Âœ¿Ê ¿Êl¿Êπ¿ÊÚ¿Ê¯¿Á.¿Á[¿Áq¿ÁÅ¿Á≠¿Á¿¿Á ¿Á›¿Á·¿Á‚¿Ë¿Ë¿ËV¿Ë\¿Ë°¿ËÓ¿È>¿Èç¿È•¿È´¿Èˆ¿Í2¿Í8¿Íx¿Í≈¿Î¿Î¿Î¿Î#¿Îq¿Î√¿Î”¿ÎÌ¿Ï
¿Ï@¿ÏW¿Ïe¿Ïk¿ÏÉ¿Ï…¿ÏÎ¿Ì¿Ì1¿Ì_¿Ì¶¿Ì∞¿Ì≈¿Ì—¿Ó¿ÓJ¿Ó{¿Óñ¿Ó√¿ÓÈ¿ÓÒ¿Ô¿Ô2¿Ô?¿ÔQ¿Ô¿Ô‹¿ÔÊ¿Ô˚¿¿Q¿õ¿ﬂ¿Ò¿Ò&¿Òc¿Ò¢¿Ò∆¿ÒÃ¿Ò–¿Ò—¿Ú¿Ú+¿Ú1¿ÚÇ¿Ú÷¿Û!¿Ûp¿Ûπ¿Ûø¿Ù¿Ù`¿ÙÉ¿Ùâ¿Ùô¿Ùü¿ÙÔ¿ı.¿ıX¿ıu¿ı´¿ı·¿ıÔ¿ıı¿ˆ¿ˆc¿ˆÖ¿ˆπ¿ˆ¸¿˜2¿˜\¿˜w¿˜§¿˜ ¿˜“¿˜ﬂ¿˜˜¿˜˝¿¯¿¯¿¯R¿¯†¿¯Ò¿˘:¿˘s¿˘ñ¿˘¨¿˘À¿˙¿˙+¿˙V¿˙w¿˙í¿˙∂¿˙Â¿˚<¿˚M¿˚W¿˚à¿˚‰¿˚ı¿˚ˇ¿¸ ¿¸(¿¸B¿¸H¿¸L¿¸M¿¸ò¿¸û¿¸Ï¿˝¿˝¿˝^¿˝ñ¿˝∂¿˝Ã¿˝Ë¿˛¿˛-¿˛U¿˛y¿˛í¿˛ª¿˛ø¿˛¿¿ˇ¿ˇF¿ˇX¿ˇ^¿ˇ£¿ˇ‘¿ˇÒ¿ ¿ '¿ C¿ i¿ à¿ €¿ ˝¿!¿7¿;¿<¿¿ú¿¨¿Œ¿¿L¿h¿∏¿’¿‚¿˛¿I¿d¿q¿}¿Ö¿ò¿¢¿Ó¿<¿ä¿Ÿ¿%¿r¿ª¿”¿·¿Á¿¿P¿b¿î¿‚¿Ï¿¿¿a¿g¿w¿†¿“¿¿¿N¿o¿ï¿£¿±¿”¿	¿	+¿	{¿	ú¿	≠¿	Ê¿
,¿
L¿
ù¿
Ò¿5¿F¿£¿≥¿ø¿…¿¿¿g¿¿å¿®¿˘¿-¿:¿V¿§¿Ò¿1¿>¿ó¿£¿´¿æ¿»¿¿ ¿#¿S¿s¿≥¿∆¿–¿È¿¿?¿I¿g¿¿¿¿1¿\¿b¿r¿ï¿≈¿È¿¸¿¿<¿`¿f¿j¿k¿∑¿¿¿W¿p¿à¿â¿ƒ¿¿¿M¿S¿ü¿‰¿2¿¿•¿´¿˘¿I¿ó¿Æ¿¥¿ ¿J¿ô¿À¿¿¿T¿o¿u¿∆¿¿4¿:¿Ñ¿–¿¿e¿±¿Í¿8¿Z¿^¿_¿¶¿¨¿¸¿H¿ô¿≤¿∏¿ˇ¿L¿ò¿Ë¿8¿U¿à¿™¿ª¿ø¿¿¿ ¿K¿a¿g¿±¿ ¿ ¿ "¿ t¿ µ¿ ª¿!
¿!R¿!{¿!Å¿!Ã¿"¿"0¿"E¿"K¿"ó¿"Ê¿#4¿#É¿#ï¿#∆¿#‹¿$,¿$e¿$l¿$Ω¿$Œ¿$¿%>¿%V¿%v¿%w¿%ï¿%«¿%»¿%Î¿&¿&7¿&8¿&Z¿&Ç¿&ù¿&ı¿'2¿'M¿'U¿'w¿'ù¿(¿(¿(,¿(|¿(á¿(√¿(⁄¿(‚¿(Ë¿(È¿)¿)!¿)D¿)n¿)∆¿*¿*R¿*Z¿*`¿*z¿*¨¿*≤¿*≥¿*“¿+¿+G¿+ê¿+ñ¿+ª¿,¿, ¿,&¿,i¿,m¿,n¿,µ¿,˜¿-8¿->¿-t¿-z¿-¿¿-Á¿-Ì¿.=¿.ä¿.⁄¿/¿/`¿/a¿/®¿/˜¿0C¿0è¿0‡¿1,¿1w¿1Ñ¿1ä¿1’¿2"¿2n¿2â¿2è¿2‡¿3.¿3|¿3Ã¿4¿4`¿4f¿4v¿4|¿4»¿5¿5J¿5K¿5Z¿5[¿5¢¿5«¿5Õ¿6¿6+¿61¿6z¿6û¿6ª¿6—¿6Ì¿7¿7T¿7Ä¿7≠¿7œ¿7”¿7‘¿8%¿8+¿8v¿8í¿8ò¿8·¿9,¿9{¿9√¿:¿:Z¿:`¿:v¿:|¿:Ã¿:ﬂ¿:Â¿:Û¿;:¿;L¿;ô¿;—¿;‚¿<¿<)¿<H¿<R¿<X¿<t¿<è¿<ô¿<°¿<´¿<Ω¿< ¿=¿=2¿=6¿=7¿=å¿=í¿=›¿>¿>¿>Y¿>_¿>´¿>Ê¿?¿?¿?#¿?c¿?ó¿?Ω¿?ﬁ¿@¿@¿@¿@¿@[¿@Ö¿@†¿@°¿@Ú¿@¯¿A$¿AK¿Ac¿Aw¿A}¿A§¿A®¿A©¿A‘¿A⁄¿B(¿Bl¿Bì¿Bô¿BÁ¿BÛ¿C¿Ch¿Cç¿C∫¿CÁ¿CÌ¿C˛¿D¿D¿DL¿DR¿D°¿Dß¿D¿E<¿EM¿Eg¿E¿E®¿E∆¿EŒ¿E“¿E”¿F¿F!¿Fh¿Fπ¿FÂ¿G	¿G&¿G]¿Gî¿G¢¿G®¿G ¿GŒ¿Gœ¿H¿H¿HX¿H^¿HÆ¿H˜¿I	¿I¿IH¿Iå¿IÃ¿IË¿IÏ¿IÌ¿J)¿J/¿J^¿JØ¿J˘¿KI¿Kt¿Kz¿K∆¿Kﬁ¿K‰¿L1¿L|¿L≠¿LÀ¿L„¿M¿M,¿M2¿Mf¿Mﬂ¿NB¿NF¿NG¿NS¿NT¿N•¿N±¿N˘¿N˙¿O¿O¿OZ¿O¢¿O∫¿Oø¿P¿PS¿Ph¿P∏¿Q¿QU¿QÇ¿QΩ¿Qƒ¿Q…¿R¿RN¿RO¿Rz¿RÜ¿R°¿RÕ¿RÊ¿S¿S!¿S8¿S@¿SA¿SV¿Sb¿SÖ¿S√¿Sﬁ¿SË¿T¿T.¿T?¿TI¿T]¿Te¿T|¿T¨¿T¥¿TŒ¿TÒ¿T˘¿U¿U4¿U<¿Ue¿Uô¿U°¿U∏¿U◊¿Uﬂ¿UÂ¿U¯¿U¸¿U˝¿V	¿Vb¿Vc¿V†¿VË¿W¿W¿W3¿WR¿Wu¿W´¿W√¿W ¿WÙ¿X¿X:¿Xf¿XÇ¿X†¿X©¿X∞¿X¥¿Xµ¿X˘¿Y(¿Y.¿Yy¿Yµ¿Y¡¿Z&¿ZP¿Zó¿Zû¿Z¢¿Z£¿Z∞¿Zº¿[¿[,¿[@¿[ü¿[¶¿[∫¿[ﬁ¿[Ò¿\¿\#¿\I¿\R¿\Y¿\m¿\î¿\™¿\æ¿]
¿]'¿]0¿]7¿]K¿]•¿]¨¿^¿^¿^{¿^Ç¿^ñ¿^ˆ¿^˝¿_¿_%¿_\¿_º¿`¿`¿`$¿`8¿`L¿`j¿`±¿`÷¿`ﬂ¿`Ê¿`Í¿`Î¿`˜¿a?¿a@¿aë¿a¢¿a®¿aÛ¿b7¿b=¿bç¿bÃ¿c¿cd¿c©¿c…¿cœ¿d¿d\¿db¿dr¿dx¿dƒ¿d˝¿e¿e1¿eA¿eh¿eá¿eé¿e®¿eŒ¿e‡¿e˙¿f¿f¿f¿f¿fk¿fÅ¿fá¿f◊¿g&¿gT¿gZ¿g™¿g˜¿h¿h.¿hm¿ht¿h¨¿h∞¿h≤¿h≥¿hË¿hÏ¿i-¿im¿iq¿i∂¿i‡¿j3¿jÑ¿j©¿jØ¿jﬁ¿j‰¿jˇ¿k/¿k?¿k`¿kò¿k∞¿l¿l4¿lA¿l]¿l©¿lÙ¿mF¿mó¿m§¿mΩ¿mÂ¿n5¿nO¿nÜ¿nì¿n¨¿n‘¿o'¿oE¿oe¿oú¿o©¿oµ¿oΩ¿o–¿o⁄¿oÎ¿oÔ¿o¿p¿p¿p.¿pP¿pp¿pä¿p§¿p™¿pæ¿pÿ¿pÛ¿p˘¿p˝¿p˛¿q
¿q/¿qH¿qc¿qg¿qh¿qt¿qÜ¿qö¿q∞¿q¥¿qµ¿q¡¿q‹¿qˆ¿r¿r¿r¿r¿r*¿r^¿rx¿rê¿rñ¿rö¿rõ¿rß¿rŸ¿rÚ¿s7¿sV¿sZ¿s\¿s]¿s¨¿s˜¿t¿t¿ti¿tπ¿u¿uO¿u†¿uÌ¿v6¿vÄ¿v—¿w¿wq¿w¡¿w‘¿wÿ¿x#¿xb¿xf¿xt¿xx¿xø¿x˚¿yI¿yô¿yË¿z¿z¿zF¿zL¿zå¿z€¿{¿{'¿{@¿{A¿{}¿{É¿{Œ¿|¿|3¿|D¿|a¿|É¿|∂¿|—¿|’¿|÷¿}(¿}w¿}≈¿}÷¿}¯¿~¿~1¿~?¿~E¿~_¿~¨¿~ˇ¿O¿â¿≥¿Ä¿Ä,¿ÄI¿ÄM¿ÄO¿ÄP¿Äç¿Äë¿Ä›¿Å¿ÅZ¿ÅÜ¿Å’¿Ç¿Ç*¿Ç+¿Ç^¿Çx¿Çy¿Çõ¿Çß¿Çπ¿Ç≈¿Ç‰¿É.¿É5¿Éö¿ÉÆ¿É≤¿É¥¿Éµ¿ÉÛ¿É˜¿ÑH¿Ñ^¿Ñb¿Ñµ¿ÑÀ¿Ñœ¿Ö¿Öj¿Öü¿ÖÌ¿ÖÒ¿ÜD¿Üñ¿Üß¿Ü´¿á¿á¿á#¿á'¿áp¿áë¿á≥¿á’¿à¿à¿à*¿ày¿à√¿à˘¿â1¿âa¿âû¿â§¿â¿¿âƒ¿â≈¿ä¿äZ¿äå¿ä¿¿äÏ¿ã)¿ã/¿ãK¿ãO¿ãP¿ãg¿ãh¿ãÜ¿ã´¿ã¨¿ã˝¿å"¿å(¿åW¿å]¿åx¿å®¿å∏¿åŸ¿ç¿ç)¿çz¿ç≠¿ç∫¿ç÷¿é"¿ém¿éø¿è¿è¿è6¿è^¿èÆ¿è»¿èˇ¿ê¿ê%¿êM¿ê†¿êæ¿êﬁ¿ë¿ë"¿ë.¿ë6¿ëI¿ëS¿ëd¿ëh¿ëi¿ëÉ¿ëú¿ëﬂ¿í/¿í`¿íï¿í´¿í»¿í·¿ì¿ì=¿ì^¿ìæ¿ìÙ¿ì¸¿î¿î3¿î@¿îc¿îÖ¿î–¿ï¿ïh¿ïô¿ïÎ¿ñ¿ñA¿ñn¿ñä¿ñô¿ñ„¿ó¿óU¿óÜ¿óµ¿óÛ¿ò?¿òy¿ò¡¿ò˝¿ô9¿ôo¿ôw¿ô}¿ôÅ¿ôÇ¿ô—¿ô◊¿ö'¿öY¿öé¿ö€¿öÁ¿ö¸¿õf¿õm¿õº¿õﬁ¿õˇ¿ú¿ú"¿úL¿ú•¿ù ¿ùV¿ù]¿ùå¿ùê¿ùë¿ù”¿ùÒ¿û¿û¿û¿ûf¿ûë¿û≠¿û±¿û≤¿û·¿ü1¿üz¿üæ¿ü‹¿†¿†3¿†d¿†q¿†≠¿†˜¿°G¿°M¿°|¿°ü¿°”¿°‡¿¢¿¢^¿¢≤¿¢∏¿¢‰¿£¿£"¿£&¿£'¿£T¿£Z¿£î¿£µ¿£÷¿£Ï¿£¿£Ò¿§7¿§=¿§s¿§à¿§¨¿§»¿•¿•U¿•É¿•≠¿•≈¿•Ÿ¿•ﬂ¿•˜¿¶¿¶#¿¶'¿¶(¿¶r¿¶x¿¶«¿ß¿ßM¿ßÄ¿ßõ¿ß∂¿ß“¿ßÙ¿®D¿®x¿®Ü¿®å¿®≠¿®‹¿®Û¿®˜¿®¯¿©¿©)¿©B¿©f¿©Ç¿©ù¿©Ô¿™¿™ ¿™$¿™%¿™1¿™C¿™W¿™{¿™ó¿™≠¿™ˇ¿´*¿´0¿´4¿´5¿´A¿´\¿´Ä¿´ú¿´∑¿¨	¿¨4¿¨:¿¨>¿¨?¿¨K¿¨¿¨£¿¨ø¿¨’¿≠'¿≠R¿≠X¿≠\¿≠]¿≠Ü¿≠≤¿≠≥¿≠€¿Æ¿Æ¿ÆI¿Æu¿Æó¿ÆÁ¿Ø¿Ø¿Ø¿ØV¿ØÅ¿Ø£¿ØÛ¿∞¿∞¿∞ ¿∞,¿∞^¿∞û¿∞º¿∞·¿∞ˆ¿±¿±P¿±r¿±É¿±ç¿±°¿±ı¿≤#¿≤+¿≤1¿≤F¿≤J¿≤L¿≤M¿≤ù¿≤∂¿≤∫¿≥¿≥V¿≥{¿≥∂¿≥ˆ¿≥¸¿¥=¿¥Ä¿¥–¿µ"¿µ(¿µl¿µã¿µë¿µ·¿∂ ¿∂¿∂¿∂>¿∂U¿∂Y¿∂Z¿∂í¿∂∏¿∂ƒ¿∑¿∑r¿∑∂¿∑Ω¿∑¿∑˛¿∏¿∏8¿∏É¿∏∫¿∏Ò¿∏ˇ¿π,¿πë¿πö¿π∞¿π–¿πÿ¿π‡¿π‰¿πÂ¿πÒ¿∫¿∫/¿∫|¿∫ ¿ª¿ªP¿ª¢¿ª¶¿ªß¿ª≥¿ª≈¿ª˚¿ºP¿ºd¿ºh¿ºj¿ºk¿º≤¿ºΩ¿º‡¿ºˇ¿Ω"¿ΩG¿Ωm¿Ωê¿Ωñ¿Ωó¿ΩË¿æ
¿æ¿æU¿æs¿æt¿æ≈¿ø¿ø¿øZ¿ør¿øí¿øì¿øƒ¿¿¿¿¿¿P¿¿ã¿¿¨¿¿≠¿¿„¿¡#¿¡O¿¡P¿¡\¿¡¿¡´¿¡ﬂ¿¬¿¬Q¿¬ö¿¬û¿¬ü¿¬´¿¬¿¿¬ÿ¿¬Ô¿√¿√"¿√l¿√s¿√w¿√y¿√z¿√ ¿√„¿√Á¿ƒ8¿ƒÑ¿ƒî¿ƒò¿ƒÊ¿≈5¿≈á¿≈ë¿≈ï¿≈À¿∆¿∆g¿∆é¿∆∂¿∆Ì¿∆Ó¿«!¿«E¿«F¿«q¿«£¿«÷¿«◊¿»/¿»0¿»}¿»¶¿»÷¿»⁄¿»€¿… ¿…&¿…r¿…√¿ ¿ V¿ ~¿ ®¿ ˚¿ÀH¿ÀV¿Àç¿À÷¿ÃJ¿ÃS¿ÃY¿Ã}¿ÃÅ¿ÃÇ¿Ãõ¿Ã°¿ÃÁ¿Ã˙¿Õ>¿Õe¿Õñ¿Õø¿Õ≈¿ÕÌ¿ÕÒ¿ÕÚ¿Œ"¿Œ_¿Œí¿Œ∏¿Œ¿¿Œƒ¿Œ≈¿ŒÛ¿œ¿œ,¿œT¿œX¿œY¿œÉ¿œâ¿œ“¿–¿–%¿–M¿–q¿–î¿–ò¿–ö¿–õ¿–Ÿ¿–¸¿— ¿—I¿—Ü¿—÷¿“ ¿“C¿“g¿“ñ¿“ó¿“ª¿“º¿“‹¿“›¿”¿”¿”¿”>¿”w¿”{¿” ¿‘¿‘O¿‘s¿‘w¿‘ß¿‘Á¿’)¿’*¿’6¿’f¿’g¿’s¿’ô¿’ö¿’¶¿’ﬂ¿’ˆ¿’˙¿’¸¿’˝¿÷%¿÷Ä¿÷Å¿÷ ¿÷Î¿÷Ô¿◊¿◊¿◊T¿◊ö¿◊‚¿ÿ3¿ÿk¿ÿ≤¿ÿ˚¿ŸC¿Ÿì¿Ÿƒ¿Ÿ»¿Ÿﬂ¿Ÿ„¿⁄1¿⁄Ç¿⁄™¿⁄Æ¿⁄æ¿⁄¬¿€¿€"¿€&¿€q¿€¬¿‹¿‹¿‹¿‹.¿‹2¿‹É¿‹Œ¿›¿›K¿›O¿›û¿›€¿›ﬂ¿›Ô¿›Û¿ﬁ8¿ﬁu¿ﬁy¿ﬁâ¿ﬁç¿ﬁ›¿ﬂ¿ﬂ¿ﬂh¿ﬂ∏¿ﬂ¬¿‡¿‡E¿‡ã¿‡å¿‡¿¿‡„¿‡‰¿·¿·(¿·L¿·õ¿·∫¿·ø¿‚¿‚^¿‚ö¿‚∆¿‚«¿‚›¿‚ﬁ¿„¿„¿„d¿„±¿„«¿„Õ¿‰¿‰2¿‰8¿‰t¿‰ù¿‰√¿‰ƒ¿‰˛¿Â¿ÂQ¿Â¢¿ÂÂ¿ÂÎ¿Ê8¿Êi¿Ê©¿Ê™¿ÊÛ¿Á6¿Á7¿Áà¿Á¿¿Ë¿Ë9¿Ë:¿Ëv¿Ë–¿È&¿ÈY¿ÈZ¿È~¿Èû¿Èü¿È◊¿Èÿ¿È‰¿Í¿Í¿Í.¿Í@¿ÍT¿ÍZ¿Íy¿Í}¿Í~¿Í»¿Î¿Î¿ÎH¿Îâ¿Îä¿Î≤¿ÎÍ¿Ï¿ÏH¿ÏX¿Ï\¿Ï]¿Ïò¿Ïô¿Ïæ¿Ïı¿Ì¿Ì¿Ì ¿Ì3¿Ì9¿Ì`¿Ìt¿Ìz¿Ì{¿Ìá¿Ì°¿Ì¿ÓA¿ÓH¿Óä¿Óé¿Óè¿Ó ¿Ô¿Ô>¿Ôé¿Ôî¿Ôï¿Ô»¿ÔÃ¿ÔÕ¿¿U¿[¿™¿›¿Ò¿Ò.¿ÒT¿ÒZ¿Ò[¿Òæ¿Òø¿Ò‚¿Òı¿Ò˚¿Ò¸¿Ú3¿ÚG¿ÚM¿ÚN¿Úê¿Ú÷¿Û¿Û3¿Û;¿ÛC¿Ûg¿Ûk¿Ûl¿Ûß¿Û®¿Û¬¿Û’¿Ù¿Ù¿Ù!¿Ùh¿Ù ¿ÙÛ¿ı¿ı¿ıC¿ıì¿ı¶¿ıÃ¿ı÷¿ıﬁ¿ı‰¿ıË¿ıÈ¿ˆ1¿ˆÇ¿ˆ∫¿ˆ¿¿˜¿˜.¿˜4¿˜Ö¿˜ò¿˜û¿˜Î¿¯>¿¯h¿¯î¿¯ö¿¯Ì¿˘:¿˘å¿˘ª¿˘’¿˙9¿˙U¿˙õ¿˙ ¿˙‹¿˚¿˚B¿˚x¿˚†¿˚Û¿˚Ù¿¸¿¸z¿¸{¿¸õ¿¸∞¿¸˜¿˝¿˝B¿˝Ü¿˝±¿˝Í¿˛¿˛¿˛¿˛p¿˛á¿˛é¿˛≠¿˛◊¿˛ÿ¿ˇ¿ˇF¿ˇl¿ˇ©¿ˇË¿ˇÈ¿ '¿ 9¿ f¿ ±¿ ¡¿ ı¿%¿q¿∫¿—¿Í¿!¿_¿ö¿–¿¿#¿h¿ß¿˘¿.¿è¿Ê¿/¿;¿É¿ç¿ï¿ñ¿Ÿ¿Û¿¿Z¿å¿ò¿†¿°¿Ò¿7¿r¿~¿Ü¿å¿ê¿ë¿À¿¿_¿ù¿µ¿Ω¿Á¿Ô¿	¿	¿	¿	4¿	Z¿	ô¿	ü¿	æ¿	˘¿
:¿
@¿
o¿
ã¿
π¿
»¿
˝¿¿¿¿"¿#¿h¿í¿ò¿›¿9¿:¿ì¿·¿¿t¿¡¿˘¿˙¿G¿ó¿Â¿4¿p¿ì¿ö¿‚¿1¿w¿~¿Õ¿¿G¿ï¿ñ¿œ¿¿9¿s¿±¿‘¿¿¿$¿V¿\¿∞¿È¿.¿x¿ ¿¿7¿u¿∑¿»¿È¿Û¿˚¿¸¿4¿Å¿√¿	¿¿¿@¿ç¿∑¿¿)¿2¿H¿ô¿‚¿¿!¿-¿[¿ò¿§¿≠¿¿%¿o¿∫¿ﬁ¿˝¿¿;¿z¿ë¿ú¿§¿™¿´¿˛¿=¿T¿v¿w¿Õ¿¿?¿o¿p¿™¿˘¿=¿Ö¿è¿ó¿ù¿û¿»¿Ã¿Õ¿¿6¿D¿J¿ã¿†¿∂¿÷¿Ï¿¿Ò¿ ;¿ [¿ g¿ †¿ ƒ¿ »¿ …¿!¿!F¿!L¿!î¿!¥¿!∫¿!˝¿"J¿"p¿"ä¿"ú¿"◊¿"Ò¿"˘¿#@¿#F¿#d¿#Ä¿#Ñ¿#Ö¿#•¿#√¿$¿$s¿$©¿$Á¿%¿%¿%2¿%;¿%t¿%z¿%~¿%¿%√¿%˝¿&¿&/¿&R¿&w¿&•¿&¿'C¿'†¿'–¿'‡¿'Ë¿'Ó¿(
¿(¿(¿(_¿(¿(Ö¿(Õ¿(Ì¿(Û¿)?¿)ä¿)Ÿ¿*¿*+¿*n¿*Ä¿*≤¿*ø¿*‘¿+$¿+s¿+|¿+¥¿,¿,¿,¿,¿,R¿,X¿,ñ¿,ú¿,‰¿,˛¿-=¿-b¿-â¿-ÿ¿.$¿.J¿.S¿.°¿.À¿/¿//¿/K¿/U¿/]¿/c¿/u¿/ì¿/¡¿0¿0¿0¿0¿0i¿0∑¿0Ù¿1+¿1M¿1Ä¿1™¿1Â¿2¿23¿2=¿2E¿2K¿2O¿2P¿2î¿2¥¿2‹¿3¿3.¿35¿3q¿3…¿3ˆ¿4@¿4ä¿4º¿4Î¿51¿5Q¿5{¿5É¿5Ñ¿5≈¿5Ú¿5¯¿5˘¿6.¿6T¿6ã¿6ﬂ¿6Ï¿7L¿7R¿7V¿7W¿7ú¿7∞¿7¬¿8¿8/¿88¿8|¿8®¿8Ã¿8Õ¿8˜¿9¿99¿9c¿9ì¿9ö¿9û¿9ü¿9»¿9⁄¿9˚¿:2¿:l¿:u¿:{¿:ƒ¿:»¿:…¿; ¿;G¿;t¿;è¿;»¿;¯¿<#¿<Z¿<ê¿<À¿<’¿<›¿=2¿=U¿=ó¿=‡¿=Í¿>¿>L¿>~¿>ß¿>ﬁ¿>Í¿>Ù¿?$¿?Z¿?|¿?}¿?§¿?∂¿?‡¿@?¿@Q¿@Å¿@…¿@„¿A1¿AÉ¿Aæ¿A…¿B¿B¿BV¿Ba¿Bö¿Bπ¿B‹¿B˙¿C¿C2¿C>¿CH¿Cê¿Cò¿Cû¿C√¿C«¿C»¿D¿D¿Da¿Dw¿Dü¿D‘¿E¿E?¿Ee¿E©¿E˝¿F¿F¿F0¿F\¿F¶¿FØ¿F–¿F˚¿G<¿Gv¿G∏¿G¸¿H)¿H3¿H9¿H=¿H>¿Hg¿Hû¿HÂ¿I¿I,¿IK¿If¿I•¿I€¿IÔ¿I˘¿JT¿Já¿J ¿K¿K¿K>¿KI¿K}¿K∂¿K¿L¿L9¿LÅ¿L•¿Lœ¿L⁄¿M4¿Ml¿M£¿M…¿M¯¿N¿NO¿NY¿Nç¿Nƒ¿NÍ¿O¿O"¿Od¿On¿Ov¿O¢¿O≠¿Oƒ¿O⁄¿P¿P9¿Po¿Pû¿P§¿P®¿P©¿PÁ¿Q¿QH¿Qì¿Q›¿R-¿Ry¿Rü¿RÌ¿RÓ¿S
¿S3¿S4¿Sî¿Sº¿T	¿T/¿T0¿T¿Tœ¿U¿U7¿Ub¿Uß¿V¿V¿V¿VE¿Vn¿V£¿V‘¿W&¿Ww¿W¶¿W–¿W¯¿X ¿X ¿Xx¿Xy¿Xù¿XÎ¿Y3¿YÅ¿Yπ¿Y¬¿Z¿Zc¿Z≠¿Z˛¿["¿[G¿[ß¿[≠¿\¿\b¿\¶¿\ı¿]D¿]î¿]¶¿]Ò¿^8¿^>¿^j¿^í¿^¢¿^Î¿_¿_"¿_f¿_õ¿_•¿_≠¿_≥¿_∑¿_∏¿`¿`k¿`†¿`Ÿ¿`Û¿a+¿aY¿ak¿as¿a—¿a˚¿b¿b&¿bY¿bõ¿b˜¿c#¿cV¿c`¿ch¿cn¿c≤¿cÈ¿cÔ¿cÛ¿cÙ¿d=¿dN¿da¿dÄ¿d†¿d∑¿dÃ¿dÔ¿e¿e-¿eM¿e{¿eó¿e≥¿e∑¿e∏¿eƒ¿eˆ¿f¿fu¿fà¿få¿fç¿fö¿f¶¿fÎ¿g¿gc¿gw¿g–¿g◊¿gÎ¿gˇ¿h¿hn¿hê¿hô¿h†¿h∆¿hÓ¿i¿iD¿iz¿iß¿i∂¿iÈ¿iÒ¿jR¿jX¿jl¿jÄ¿jû¿j⁄¿jˇ¿k¿k¿k#¿kà¿kè¿k÷¿l;¿lA¿lE¿lG¿lH¿lt¿l†¿lŸ¿l€¿l‹¿m¿mE¿mÅ¿mÖ¿mò¿mË¿n¿n&¿n(¿n)¿n{¿n|¿nƒ¿n»¿o¿oN¿oY¿oz¿oΩ¿o⁄¿o˚¿p ¿p=¿pU¿po¿pu¿pv¿p•¿pƒ¿pﬂ¿p˛¿q#¿q8¿qJ¿qQ¿qU¿qV¿qÅ¿qú¿qù¿q÷¿q˜¿q¯¿r-¿rJ¿rK¿rq¿rÑ¿rÖ¿rÕ¿s
¿s¿s ¿sS¿sz¿s¢¿sŒ¿s˙¿t%¿t,¿tz¿t®¿t·¿u¿u¿uu¿uv¿uó¿u◊¿v¿v@¿vA¿vc¿vs¿vü¿v‡¿vÎ¿w"¿wX¿w`¿wÇ¿wí¿wø¿x ¿x¿xM¿xs¿xë¿x”¿xﬁ¿y¿y¿y¿y¿y0¿y_¿y£¿z ¿z¿z¿z:¿zu¿z≤¿z¡¿zﬁ¿zÊ¿zÏ¿zÌ¿{¿{¿{;¿{x¿{ø¿{Í¿|¿|T¿|ö¿|Ÿ¿|˝¿}%¿}B¿}[¿}f¿}n¿}{¿}≈¿~¿~ ¿~r¿~¿¿~¡¿~˚¿O¿o¿ì¿õ¿Ô¿Ä(¿Äi¿Äá¿ÄØ¿ÄÎ¿Å,¿Å@¿ÅY¿Åx¿Åì¿Å†¿Å¿¿Å ¿Å“¿Åÿ¿ÅŸ¿ÅÈ¿Ç4¿Ç_¿Ç~¿Çü¿Ç€¿É¿É/¿ÉI¿ÉQ¿ÉW¿ÉX¿Éw¿Éì¿É∑¿É„¿Éı¿Ñ¿Ñ¿Ñ¿Ñ¿ÑK¿Ñä¿Ñ¢¿Ñµ¿Ñª¿ÑÈ¿Ö¿Ö¿ÖE¿ÖI¿ÖJ¿ÖÄ¿ÖÖ¿Ö‘¿ÖÎ¿Ö¿Ü?¿Üâ¿ÜÃ¿ÜÕ¿á¿ág¿ál¿áº¿áÂ¿à¿à1¿àI¿àl¿àã¿àë¿àæ¿â¿âV¿âq¿âw¿âƒ¿âÏ¿ä>¿äÄ¿äÅ¿ä†¿ä∏¿ä˝¿ã"¿ã.¿ãN¿ã}¿ãƒ¿å¿å¿å¿åR¿åg¿åw¿å}¿åû¿å¢¿å§¿å•¿å˘¿å˝¿çT¿ç§¿ç∑¿ç˚¿éF¿éi¿éë¿é‘¿é÷   ÄÈ/// @docImport 'dart:ui';
///
/// @docImport 'package:flutter/widgets.dart';
///
/// @docImport 'box.dart';
/// @docImport 'paragraph.dart';
/// @docImport 'proxy_box.dart';
/// @docImport 'view.dart';
/// @docImport 'viewport.dart';
ÅôÅÆÅ≠Å∞ÅƒÅ«   Å   Ç   ÇB   Çj   Çì   ÇΩ   Ç‘   ÇÈ   ÇˇÉ,ÑrÑtÑõÑªÑΩ  ÑÊÇhÜ§Ü§Å∑/// Base class for data associated with a [RenderObject] by its parent.
///
/// Some render objects wish to store data on their children, such as the
/// children's input parameters to the parent's layout algorithm or the
/// children's position relative to other children.
///
/// See also:
///
///  * [RenderObject.setupParentData], which [RenderObject] subclasses may
///    override to attach specific types of parent data to children.    Ü≥káá:/// Called when the RenderObject is removed from the tree.  ÜÜÒÜ˝Ü˛á"*á5á5   á"á# à∫¿ p˙ã±ã±Ç/// A place to paint.
///
/// Rather than holding a canvas directly, [RenderObject]s paint using a painting
/// context. The painting context has a [Canvas], which receives the
/// individual draw operations, and also has functions for painting child
/// render objects.
///
/// When painting a child render object, the canvas held by the painting context
/// can change because the draw operations issued before and after painting the
/// child might be recorded in separate compositing layers. For this reason, do
/// not hold a reference to the canvas across operations that might paint
/// child render objects.
///
/// New [PaintingContext] objects are created automatically when using
/// [PaintingContext.repaintCompositedChild] and [pushLayer]. ãŸÄ–åm åmå| ~/// Creates a painting context.
///
/// Typically only called by [PaintingContext.repaintCompositedChild]
/// and [pushLayer].å}åÉåÇ  åìåôåò  å`åaå≠$å¬å¬  å÷ÅAééÅ/// An estimate of the bounds within which the painting context's [canvas]
/// will record painting commands. This can be useful for debugging.
///
/// The canvas will allow painting outside these bounds.
///
/// The [estimatedBounds] rectangle is in the [canvas] coordinate system. ≠7≠E≠E  ≠V≠j≠j  ≠w≠≠  ´êÅé´ô´ô    ≠ãÅrÆÆÄ“/// The canvas on which to paint.
///
/// The current canvas can change whenever you paint a child using this
/// context, which means it's fragile to hold a reference to the canvas
/// returned by this getter.  ÆhÆiéÇïèÁèÁÅ®/// Repaint the given render object.
///
/// The render object must be attached to a [PipelineOwner], must have a
/// composited layer, and must be in need of painting. The render object's
/// layer, if any, is re-used, along with any layers in the subtree that don't
/// need to be repainted.
///
/// See also:
///
///  * [RenderObject.isRepaintBoundary], which determines if a [RenderObject]
///    has a composited layer. è˛êê  ê#êê  ê1êµâ7ê¡ê¡  êﬁêÏêÎ  ê¯#ê˛ê˝  ë!ë3ë2  ëôÖÇõ˛õ˛ÅÎ/// Update the composited layer of [child] without repainting its children.
///
/// The render object must be attached to a [PipelineOwner], must have a
/// composited layer, and must be in need of a composited layer update but
/// not in need of painting. The render object's layer is re-used, and none
/// of its children are repaint or their layers updated.
///
/// See also:
///
///  * [RenderObject.isRepaintBoundary], which determines if a [RenderObject]
///    has a composited layer. úú"ú!   üvÇ¡†÷†÷ÅC/// In debug mode, repaint the given render object using a custom painting
/// context that can record the results of the painting operation in addition
/// to performing the regular paint of the child.
///
/// See also:
///
///  * [repaintCompositedChild], for repainting a composited child without
///    instrumentation. °°°  °#°!°   °D&°^°]  °9¢;Éõ£W£WÅ/// Paint a child [RenderObject].
///
/// If the child has its own composited layer, the child will be composited
/// into the layer subtree associated with this painting context. Otherwise,
/// the child will be painted into the current PictureLayer for this context. £b£p£o  £v£~£}   •⁄É©•ﬂ•ﬂ  •Ô•˝•¸  ¶¶¶
   ©áÇ´´Åp/// Adds a layer to the recording requiring that the recording is already
/// stopped.
///
/// Do not call this function directly: call [addLayer] or [pushLayer]
/// instead. This function is called internally when all layers not
/// generated from the [canvas] are added.
///
/// Subclasses that need to customize how layers are added should override
/// this method. ´(´/´.  ´
´ØÅØØ    ∞Çì≤:≤:Åˆ/// Adds a [CompositionCallback] for the current [ContainerLayer] used by this
/// context.
///
/// Composition callbacks are called whenever the layer tree containing the
/// current layer of this painting context gets composited, or when it gets
/// detached and will not be rendered again. This happens regardless of
/// whether the layer is added via retained rendering or not.
///
/// {@macro flutter.rendering.Layer.compositionCallbacks}
///
/// See also:
///   *  [Layer.addCompositionCallback]. ≤Q≤f≤e   ≤µÖ=¥¬¥¬Å’/// Stop recording to a canvas if recording has started.
///
/// Do not call this function directly: functions in this class will call
/// this method as needed. This function is called internally to ensure that
/// recording is stopped before adding layers or finalizing the results of a
/// paint.
///
/// Subclasses that need to customize how recording to a canvas is performed
/// should override this method to save the results of the custom canvas
/// recordings.  ¥ü¥†¥¨¥≠∑ˆÇ¶∫∫Ç	/// Hints that the painting in the current layer is complex and would benefit
/// from caching.
///
/// If this hint is not set, the compositor will apply its own heuristics to
/// decide whether the current layer is complex enough to benefit from
/// caching.
///
/// Calling this ensures a [Canvas] is available. Only draw calls on the
/// current canvas will be hinted; the hint is not propagated to new canvases
/// created after a new layer is added to the painting context (e.g. with
/// [addLayer] or [pushLayer]).   ∫†ÉΩ%Ω%Çi/// Hints that the painting in the current layer is likely to change next frame.
///
/// This hint tells the compositor not to cache the current layer because the
/// cache will not be used in the future. If this hint is not set, the
/// compositor will apply its own heuristics to decide whether the current
/// layer is likely to be reused in the future.
///
/// Calling this ensures a [Canvas] is available. Only draw calls on the
/// current canvas will be hinted; the hint is not propagated to new canvases
/// created after a new layer is added to the painting context (e.g. with
/// [addLayer] or [pushLayer]).   Ω¨ÇŒ¿ @*¿ @*Ç\/// Adds a composited leaf layer to the recording.
///
/// After calling this function, the [canvas] property will change to refer to
/// a new [Canvas] that draws on top of the given layer.
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips.
///
/// See also:
///
///  * [pushLayer], for adding a layer and painting further contents within
///    it. ¿ @3¿ @:¿ @9   ¿ @~à$¿ F"¿ F"Öh/// Appends the given layer to the recording, and calls the `painter` callback
/// with that layer, providing the `childPaintBounds` as the estimated paint
/// bounds of the child. The `childPaintBounds` can be used for debugging but
/// have no effect on painting.
///
/// The given layer must be an unattached orphan. (Providing a newly created
/// object, rather than reusing an existing layer, satisfies that
/// requirement.)
///
/// {@template flutter.rendering.PaintingContext.pushLayer.offset}
/// The `offset` is the offset to pass to the `painter`. In particular, it is
/// not an offset applied to the layer itself. Layers conceptually by default
/// have no position or size, though they can transform their contents. For
/// example, an [OffsetLayer] applies an offset to its children.
/// {@endtemplate}
///
/// If the `childPaintBounds` are not specified then the current layer's paint
/// bounds are used. This is appropriate if the child layer does not apply any
/// transformation or clipping to its contents. The `childPaintBounds`, if
/// specified, must be in the coordinate system of the new layer (i.e. as seen
/// by its children after it applies whatever transform to its contents), and
/// should not go outside the current layer's paint bounds.
///
/// See also:
///
///  * [addLayer], for pushing a layer without painting further contents
///    within it. ¿ F1¿ FA¿ F@  ¿ FP¿ Fi¿ Fh  ¿ Fu¿ F}¿ F|  ¿ Fä¿ Fë¿ Fê   ¿ H¶Å!¿ IW¿ IWÄç/// Creates a painting context configured to paint into [childLayer].
///
/// The `bounds` are estimated paint bounds for debugging purposes. ¿ Ij¿ Iz¿ Iy  ¿ IÖ¿ Iã¿ Iä  ¿ I:¿ I;¿ IÀäª¿ Qï¿ Qïáp/// Clip further painting using a rectangle.
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
/// The `needsCompositing` argument specifies whether the child needs
/// compositing. Typically this matches the value of
/// [RenderObject.needsCompositing] for the caller. If false, this method
/// returns null, indicating that a layer is no longer necessary. If a render
/// object calling this method stores the `oldLayer` in its
/// [RenderObject.layer] field, it should set that field to null.
///
/// When `needsCompositing` is false, this method will use a more efficient
/// way to apply the layer effect than actually creating a layer.
/// {@endtemplate}
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.offset}
/// The `offset` argument is the offset from the origin of the canvas'
/// coordinate system to the origin of the caller's coordinate system.
/// {@endtemplate}
///
/// The `clipRect` is the rectangle (in the caller's coordinate system) to use
/// to clip the painting done by [painter]. It should not include the
/// `offset`.
///
/// The `painter` callback will be called while the `clipRect` is applied. It
/// is called synchronously during the call to [pushClipRect].
///
/// The `clipBehavior` argument controls how the rectangle is clipped.
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.oldLayer}
/// For the `oldLayer` argument, specify the layer created in the previous
/// frame. This gives the engine more information for performance
/// optimizations. Typically this is the value of [RenderObject.layer] that a
/// render object creates once, then reuses for all subsequent frames until a
/// layer is no longer needed (e.g. the render object no longer needs
/// compositing) or until the render object changes the type of the layer
/// (e.g. from opacity layer to a clip rect layer).
/// {@endtemplate} ¿ Qß¿ Q≠¿ Q¨  ¿ Q¬¿ Q ¿ Q…  ¿ Q’¿ Q€¿ Q⁄  ¿ QË¿ R¿ R   ¿ R!¿ R¿ R  ¿ R6¿ RF¿ RE  ¿ R#¿ R'¿ R(¿ TäÜ≈¿ X¿ XÉN/// Clip further painting using a rounded rectangle.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipRRect` argument specifies the rounded-rectangle (in the caller's
/// coordinate system) to use to clip the painting done by `painter`. It
/// should not include the `offset`.
///
/// The `painter` callback will be called while the `clipRRect` is applied. It
/// is called synchronously during the call to [pushClipRRect].
///
/// The `clipBehavior` argument controls how the rounded rectangle is clipped.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ X"¿ X(¿ X'  ¿ X=¿ XE¿ XD  ¿ XP¿ XV¿ XU  ¿ Xa¿ Xh¿ Xg  ¿ Xv¿ Xè¿ Xé  ¿ Xù"¿ X£¿ X¢  ¿ X≈¿ X÷¿ X’  ¿ X±¿ Xµ¿ X∂¿ [SáÆ¿ _T¿ _TÉæ/// Clip further painting using a rounded superellipse.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipRSuperellipse` argument specifies the rounded-superellipse (in the caller's
/// coordinate system) to use to clip the painting done by `painter`. It
/// should not include the `offset`.
///
/// The `painter` callback will be called while the `clipRSuperellipse` is applied. It
/// is called synchronously during the call to [pushClipRSuperellipse].
///
/// The `clipBehavior` argument controls how the rounded rectangle is clipped.
///
/// Hit tests are performed based on the bounding box of the [RSuperellipse].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ _o¿ _u¿ _t  ¿ _ä¿ _í¿ _ë  ¿ _ù¿ _£¿ _¢  ¿ _Æ¿ _Ω¿ _º  ¿ _”¿ _Ï¿ _Î  ¿ _˙"¿ ` ¿ _ˇ  ¿ `" ¿ `;¿ `:  ¿ `¿ `¿ `¿ cÜè¿ fa¿ faÉ&/// Clip further painting using a path.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipPath` argument specifies the [Path] (in the caller's coordinate
/// system) to use to clip the painting done by `painter`. It should not
/// include the `offset`.
///
/// The `painter` callback will be called while the `clipPath` is applied. It
/// is called synchronously during the call to [pushClipPath].
///
/// The `clipBehavior` argument controls how the path is clipped.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ fs¿ fy¿ fx  ¿ fé¿ fñ¿ fï  ¿ f°¿ fß¿ f¶  ¿ f≤¿ f∏¿ f∑  ¿ f≈¿ fﬁ¿ f›  ¿ fÏ"¿ fÚ¿ fÒ  ¿ g¿ g$¿ g#  ¿ g ¿ g¿ g¿ iòÑ`¿ l≈¿ l≈Ç˚/// Blend further painting with a color filter.
///
/// {@macro flutter.rendering.PaintingContext.pushLayer.offset}
///
/// The `colorFilter` argument is the [ColorFilter] value to use when blending
/// the painting done by `painter`.
///
/// The `painter` callback will be called while the `colorFilter` is applied.
/// It is called synchronously during the call to [pushColorFilter].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer}
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips. ¿ l⁄¿ l‚¿ l·  ¿ lÌ¿ l˙¿ l˘  ¿ m
¿ m#¿ m"  ¿ m1¿ mD¿ mC   ¿ m¸Ü¿ p—¿ p—Ç¶/// Transform further painting using a matrix.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// The `offset` argument is the offset to pass to `painter` and the offset to
/// the origin used by `transform`.
///
/// The `transform` argument is the [Matrix4] with which to transform the
/// coordinate system while calling `painter`. It should not include `offset`.
/// It is applied effectively after applying `offset`.
///
/// The `painter` callback will be called while the `transform` is applied. It
/// is called synchronously during the call to [pushTransform].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ p‰¿ pÍ¿ pÈ  ¿ pˇ¿ q¿ q  ¿ q¿ q¿ q  ¿ q)¿ qB¿ qA  ¿ qP¿ qa¿ q`   ¿ tÑˆ¿ wÂ¿ wÂÉñ/// Blend further painting with an alpha value.
///
/// The `offset` argument indicates an offset to apply to all the children
/// (the rendering created by `painter`).
///
/// The `alpha` argument is the alpha value to use when blending the painting
/// done by `painter`. An alpha value of 0 means the painting is fully
/// transparent and an alpha value of 255 means the painting is fully opaque.
///
/// The `painter` callback will be called while the `alpha` is applied. It
/// is called synchronously during the call to [pushOpacity].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer}
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips. ¿ wˆ¿ w˛¿ w˝  ¿ x		¿ x¿ x  ¿ x¿ x1¿ x0  ¿ x?¿ xN¿ xM   ¿ yÄõ¿ y*¿ y*   ¿ y¿ y ¿ y∂êT¿ É≠¿ É≠â‹/// An abstract set of layout constraints.
///
/// Concrete layout models (such as box) will create concrete subclasses to
/// communicate layout constraints between parents and children.
///
/// ## Writing a Constraints subclass
///
/// When creating a new [RenderObject] subclass with a new layout protocol, one
/// will usually need to create a new [Constraints] subclass to express the
/// input to the layout algorithms.
///
/// A [Constraints] subclass should be immutable (all fields final). There are
/// several members to implement, in addition to whatever fields, constructors,
/// and helper methods one may find useful for a particular layout protocol:
///
/// * The [isTight] getter, which should return true if the object represents a
///   case where the [RenderObject] class has no choice for how to lay itself
///   out. For example, [BoxConstraints] returns true for [isTight] when both
///   the minimum and maximum widths and the minimum and maximum heights are
///   equal.
///
/// * The [isNormalized] getter, which should return true if the object
///   represents its data in its canonical form. Sometimes, it is possible for
///   fields to be redundant with each other, such that several different
///   representations have the same implications. For example, a
///   [BoxConstraints] instance with its minimum width greater than its maximum
///   width is equivalent to one where the maximum width is set to that minimum
///   width (`2<w<1` is equivalent to `2<w<2`, since minimum constraints have
///   priority). This getter is used by the default implementation of
///   [debugAssertIsValid].
///
/// * The [debugAssertIsValid] method, which should assert if there's anything
///   wrong with the constraints object. (We use this approach rather than
///   asserting in constructors so that our constructors can be `const` and so
///   that it is possible to create invalid constraints temporarily while
///   building valid ones.) See the implementation of
///   [BoxConstraints.debugAssertIsValid] for an example of the detailed checks
///   that can be made.
///
/// * The [==] operator and the [hashCode] getter, so that constraints can be
///   compared for equality. If a render object is given constraints that are
///   equal, then the rendering library will avoid laying the object out again
///   if it is not dirty.
///
/// * The [toString] method, which should describe the constraints so that they
///   appear in a usefully readable form in the output of [debugDumpRenderTree]. ¿ ÉΩÄ≠¿ Ñ\ ¿ Ñ\¿ Ñg Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.   ¿ Ñn[¿ Ñ¡¿ Ñ¡G/// Whether there is exactly one size possible given these constraints.   ¿ ÑÕX¿ Ö¿ Ö?/// Whether the constraint is expressed in a consistent manner.   ¿ Ö)Ñﬂ¿ â`¿ â`Ñ/// Asserts that the constraints are valid.
///
/// This might involve checks more detailed than [isNormalized].
///
/// For example, the [BoxConstraints] subclass verifies that the constraints
/// are not [double.nan].
///
/// If the `isAppliedConstraint` argument is true, then even stricter rules
/// are enforced. This argument is set to true when checking constraints that
/// are about to be applied to a [RenderObject] during layout, as opposed to
/// constraints that may be further affected by other constraints. For
/// example, the asserts for verifying the validity of
/// [RenderConstrainedBox.additionalConstraints] do not set this argument, but
/// the asserts for verifying the argument passed to the [RenderObject.layout]
/// method do.
///
/// The `informationCollector` argument takes an optional callback which is
/// called when an exception is to be thrown. The collected information is
/// then included in the message after the error line.
///
/// Returns the same as [isNormalized] if asserts are disabled. ¿ ây ¿ â¿ â~  ¿ âü*¿ â∂¿ âµ  ¿ âî¿ Éì¿ Éî¿ ã≠Çò¿ ã≥¿ ã≥  ¿ ãËÄ¸¿ ãË¿ ã˝¿ ã˛¿ ãˇ¿ ã˛ ¿ å ¿ å¿ å  ¿ å¿ å¿ å  ¿ å-¿ å&¿ å/¿ åË¿ å¸¿ å¸  ¿ çf¿ çe¿ çeG/// The callback that will be notified when the semantics tree updates.  ¿ çrÄ—¿ çÉ¿ çÉ   ¿ çr¿ çs ¿ éG¿ i√¿ ò¸¿ ò¸ä©/// The pipeline owner manages the rendering pipeline.
///
/// The pipeline owner provides an interface for driving the rendering pipeline
/// and stores the state about which render objects have requested to be visited
/// in each stage of the pipeline. To flush the pipeline, call the following
/// functions in order:
///
/// 1. [flushLayout] updates any render objects that need to compute their
///    layout. During this phase, the size and position of each render
///    object is calculated. Render objects might dirty their painting or
///    compositing state during this phase.
/// 2. [flushCompositingBits] updates any render objects that have dirty
///    compositing bits. During this phase, each render object learns whether
///    any of its children require compositing. This information is used during
///    the painting phase when selecting how to implement visual effects such as
///    clipping. If a render object has a composited child, it needs to use a
///    [Layer] to create the clip in order for the clip to apply to the
///    composited child (which will be painted into its own [Layer]).
/// 3. [flushPaint] visits any render objects that need to paint. During this
///    phase, render objects get a chance to record painting commands into
///    [PictureLayer]s and construct other composited [Layer]s.
/// 4. Finally, if semantics are enabled, [flushSemantics] will compile the
///    semantics for the render objects. This semantic information is used by
///    assistive technology to improve the accessibility of the render tree.
///
/// The [RendererBinding] holds the pipeline owner for the render objects that
/// are visible on screen. You can create other pipeline owners to manage
/// off-screen objects, which can flush their pipelines independently of the
/// on-screen render objects.
///
/// [PipelineOwner]s can be organized in a tree to manage multiple render trees,
/// where each [PipelineOwner] is responsible for one of the render trees. To
/// build or modify the tree, call [adoptChild] or [dropChild]. During each of
/// the different flush phases described above, a [PipelineOwner] will first
/// perform the phase on the nodes it manages in its own render tree before
/// calling the same flush method on its children. No assumption must be made
/// about the order in which child [PipelineOwner]s are flushed.
///
/// A [PipelineOwner] may also be [attach]ed to a [PipelineManifold], which
/// gives it access to platform functionality usually exposed by the bindings
/// without tying it to a specific binding implementation. All [PipelineOwner]s
/// in a given tree must be attached to the same [PipelineManifold]. This
/// happens automatically during [adoptChild]. ¿ ô+Å…¿ ö ¿ ö¿ ö Ä€/// Creates a pipeline owner.
///
/// Typically created by the binding (e.g., [RendererBinding]), but can be
/// created separately from the binding to drive off-screen render objects
/// through the rendering pipeline.¿ ö%¿ ö+¿ ö*  ¿ öB¿ öH¿ öG  ¿ öd¿ öj¿ öi  ¿ öÄ¿ öÜ¿ öÖ   ¿ ö¯Çç¿ ùs¿ ùsÇP/// Called when a render object associated with this pipeline owner wishes to
/// update its visual appearance.
///
/// Typical implementations of this function will schedule a task to flush the
/// various stages of the pipeline. This function might be called multiple
/// times in quick succession. Implementations should take care to discard
/// duplicate calls quickly.
///
/// When the [PipelineOwner] is attached to a [PipelineManifold] and
/// [onNeedVisualUpdate] is provided, the [onNeedVisualUpdate] callback is
/// invoked instead of calling [PipelineManifold.requestVisualUpdate]. ¿ ùäÄ’¿ ûH¿ ûHÄ°/// Called whenever this pipeline owner creates a semantics object.
///
/// Typical implementations will schedule the creation of the initial
/// semantics tree. ¿ ûdÅ¿ üb¿ übÄ÷/// Called whenever this pipeline owner's semantics owner emits a [SemanticsUpdate].
///
/// Typical implementations will delegate the [SemanticsUpdate] to a [FlutterView]
/// that can handle the [SemanticsUpdate]. ¿ üxÄª¿ †¿ †Äà/// Called whenever this pipeline owner disposes its semantics owner.
///
/// Typical implementations will tear down the semantics tree. ¿ ¢¿ ¢¿ ¢  ¿ ¶#¿ ¶¿ ¶ ¿ ¶¿ ¶(9¿ ¶;¿ ¶; ¿ ¶_¿ ¶`¿ ¶Q¿ ¶^¿ ¶R¿ ™3¿ ™8¿ ™8 ¿ ™L¿ ™U#¿ ™Z¿ ™Z ¿ ™s¿ µù0¿ µ¢¿ µ¢ ¿ µ»¿ ∑–N¿ ∑È¿ ∑È ¿ ∏¿ ∏¿ ∏¿ ∏¿ ∏¿ ªÎ8¿ ª˛¿ ª˛ ¿ º!¿ º"¿ º¿ º ¿ º¿ øô¿ øû¿ øû ¿ ø±¿ À ¿ À0¿ À0  ¿ ÕH$¿ ÕL¿ ÕL ¿ Õk¿ ”!¿ ”#¿ ”# ¿ ”:¿ ”CA¿ ”[¿ ”[ ¿ ”Ç¿ ”É¿ ”t¿ ”Å¿ ”u¿ ‰L6¿ ‰e¿ ‰e ¿ ‰Ä¿ ‰Å¿ ‰q¿ ‰¿ ‰r¿ ‰Ü¿ ‰ò¿ ‰ò  ¿ ‰¶¿ ‰µ¿ ‰µ  
¿ °ùm¿ °Ù¿ °ÙB/// The unique object managed by this pipeline that has no parent.   ¿ ¢(Ä¶¿ ¢,¿ ¢,  ¿ ¢5¿ ¢D¿ ¢C   ¿ ¶fÇÆ¿ ®Í¿ ®ÍÇ7/// The [RenderObject]s representing relayout boundaries which need to be laid out
/// in the next [flushLayout] pass.
///
/// Relayout boundaries are added when they are marked for layout.
/// Subclasses of [PipelineOwner] may use them to invalidate caches or
/// otherwise make performance optimizations. Since nodes may be marked for
/// layout at any time, they are best checked during [flushLayout].
///
/// Relayout boundaries owned by child [PipelineOwner]s are not included here.
///
/// Boundaries appear in an arbitrary order, and may appear multiple times.  ¿ ®¥¿ ®µ¿ ®¡¿ ®¬¿ ©Å¿ ™
¿ ™
Ä‹/// Whether this pipeline is currently in the layout phase.
///
/// Specifically, whether [flushLayout] is currently running.
///
/// Only valid when asserts are enabled; in release builds, this
/// always returns false.   ¿ º(ÇV¿ æV¿ æVÅÂ/// The [RenderObject]s which need to be painted in the next [flushPaint] pass.
///
/// [RenderObject]s marked with [RenderObject.isRepaintBoundary] are added
/// when they are marked needing paint. Subclasses of [PipelineOwner] may use them
/// to invalidate caches or otherwise make performance optimizations.
/// Since nodes may be marked for layout at any time, they are best checked during
/// [flushPaint].
///
/// Marked children of child [PipelineOwner]s are not included here.  ¿ æ ¿ æ!¿ æ-¿ æ.¿ æÇÅ¿ ør¿ ørÄ⁄/// Whether this pipeline is currently in the paint phase.
///
/// Specifically, whether [flushPaint] is currently running.
///
/// Only valid when asserts are enabled. In release builds,
/// this always returns false.   ¿ »cÇ∫¿  ˚¿  ˚Çk/// The object that is managing semantics for this pipeline owner, if any.
///
/// An owner is created by [ensureSemantics] or when the [PipelineManifold] to
/// which this owner is connected has [PipelineManifold.semanticsEnabled] set
/// to true. The owner is valid for as long as
/// [PipelineManifold.semanticsEnabled] remains true or while there are
/// outstanding [SemanticsHandle]s from calls to [ensureSemantics]. The
/// [semanticsOwner] field will revert to null once both conditions are no
/// longer met.
///
/// When [semanticsOwner] is null, the [PipelineOwner] skips all steps
/// relating to semantics.   ¿ ÀDÇ¿ Õ¿ ÕÄË/// Deprecated.
///
/// Use [SemanticsBinding.debugOutstandingSemanticsHandles] instead. This
/// API is broken because an outstanding semantics handle on a given pipeline
/// owner doesn't mean that semantics are actually produced.  ¿ Ã7¿ Ã8¿ ÃB¿ Ã¯¿ ÃH¿ Ãé¿ Ãø¿ ÂAZ¿ ÂL¿ ÂL    ¿ Îçz¿ Îñ¿ Îñ    ¿ †8Åa¿ ° ¿ ° Ä∫/// Calls [onNeedVisualUpdate] if [onNeedVisualUpdate] is not null.
///
/// Used to notify the pipeline owner that an associated render object wishes
/// to update its visual appearance.   ¿ ™}â¥¿ ´Í¿ ´ÍÅY/// Update the layout information for all dirty render objects.
///
/// This function is one of the core stages of the rendering pipeline. Layout
/// information is cleaned prior to painting so that render objects will
/// appear on screen in their up-to-date locations.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ ∂ ÅÃ¿ ∂¿ ∂  ¿ ∂%¿ ∂3¿ ∂2   ¿ ∏#Éƒ¿ ∏»¿ ∏»Äó/// Updates the [RenderObject.needsCompositing] bits.
///
/// Called as part of the rendering pipeline after [flushLayout] and before
/// [flushPaint].   ¿ øªà§¿ ¡6¿ ¡6Åg/// Update the display lists for all render objects.
///
/// This function is one of the core stages of the rendering pipeline.
/// Painting occurs after layout and before the scene is recomposited so that
/// scene is composited with up-to-date display lists for every render object.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ ÕqÇº¿ œÜ¿ œÜÄ·/// Deprecated.
///
/// Call [SemanticsBinding.ensureSemantics] instead and optionally add a
/// listener to [PipelineOwner.semanticsOwner]. This API is broken as calling
/// it does not guarantee that semantics are produced. ¿ œó¿ œ¶¿ œ•  ¿ Œ]¿ Œ^¿ Œh¿ œr¿ Œn¿ Œ‚¿ œ9¿ –1ÇU¿ –6¿ –6    ¿ “äÄê¿ “è¿ “è    ¿ ”âè¿ ’Ú¿ ’ÚÅ„/// Update the semantics for render objects marked as needing a semantics
/// update.
///
/// Initially, only the root node, as scheduled by
/// [RenderObject.scheduleInitialSemantics], needs a semantics update.
///
/// This function is one of the core stages of the rendering pipeline. The
/// semantics are compiled after painting and only after
/// [RenderObject.scheduleInitialSemantics] has been called.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ ‚ûÄ≤¿ ‚¿¿ ‚¿   ¿ ‚û¿ ‚ü¿ „TÄﬁ¿ „e¿ „e  ¿ „y&¿ „ñ¿ „ï  ¿ „T¿ „U¿ ‰≈x¿ ‰ ¿ ‰   ¿ ‰⁄¿ ‰È¿ ‰Ë  ¿ ‰Ô¿ ‰ˇ¿ ‰˛   ¿ ÂüÇ¿ Ê¥¿ Ê¥Å/// Mark this [PipelineOwner] as attached to the given [PipelineManifold].
///
/// Typically, this is only called directly on the root [PipelineOwner].
/// Children are automatically attached to their parent's [PipelineManifold]
/// when [adoptChild] is called. ¿ Êª¿ ÊÕ¿ ÊÃ   ¿ Á¿Ç†¿ Ë∂¿ Ë∂ÄÊ/// Mark this [PipelineOwner] as detached.
///
/// Typically, this is only called directly on the root [PipelineOwner].
/// Children are automatically detached from their parent's [PipelineManifold]
/// when [dropChild] is called.   ¿ ÏÖ(¿ Ô≈¿ Ô≈Éê/// Adds `child` to this [PipelineOwner].
///
/// During the phases of frame production (see [RendererBinding.drawFrame]),
/// the parent [PipelineOwner] will complete a phase for the nodes it owns
/// directly before invoking the flush method corresponding to the current
/// phase on its child [PipelineOwner]s. For example, during layout, the
/// parent [PipelineOwner] will first lay out its own nodes before calling
/// [flushLayout] on its children. During paint, it will first paint its own
/// nodes before calling [flushPaint] on its children. This order also applies
/// for all the other phases.
///
/// No assumptions must be made about the order in which child
/// [PipelineOwner]s are flushed.
///
/// No new children may be added after the [PipelineOwner] has started calling
/// [flushLayout] on any of its children until the end of the current frame.
///
/// To remove a child, call [dropChild]. ¿ Ô–¿ Ôﬂ¿ Ôﬁ   ¿ Ò7Ç¿¿ Úí¿ ÚíÅG/// Removes a child [PipelineOwner] previously added via [adoptChild].
///
/// This node will cease to call the flush methods on the `child` during frame
/// production.
///
/// No children may be removed after the [PipelineOwner] has started calling
/// [flushLayout] on any of its children until the end of the current frame. ¿ Úú¿ Ú´¿ Ú™   ¿ Û˚Å¿ Ù≤¿ Ù≤Ä•/// Calls `visitor` for each immediate child of this [PipelineOwner].
///
/// See also:
///
///  * [adoptChild] to add a child.
///  * [dropChild] to remove a child. ¿ Ù¿¿ Ù÷¿ Ù’   ¿ ıÉ¿ ˆ|¿ ˆ|Åa/// Release any resources held by this pipeline owner.
///
/// Prior to calling this method the pipeline owner must be removed from the
/// pipeline owner tree, i.e. it must have neither a parent nor any children
/// (see [dropChild]). It also must be [detach]ed from any [PipelineManifold].
///
/// The object is no longer usable after calling dispose.    ¿ ¯¬â¿ ¸D¿ ¸DÉr/// Manages a tree of [PipelineOwner]s.
///
/// All [PipelineOwner]s within a tree are attached to the same
/// [PipelineManifold], which gives them access to shared functionality such
/// as requesting a visual update (by calling [requestVisualUpdate]). As such,
/// the [PipelineManifold] gives the [PipelineOwner]s access to functionality
/// usually provided by the bindings without tying the [PipelineOwner]s to a
/// particular binding implementation.
///
/// The root of the [PipelineOwner] tree is attached to a [PipelineManifold] by
/// passing the manifold to [PipelineOwner.attach]. Children are attached to the
/// same [PipelineManifold] as their parent when they are adopted via
/// [PipelineOwner.adoptChild].
///
/// [PipelineOwner]s can register listeners with the [PipelineManifold] to be
/// informed when certain values provided by the [PipelineManifold] change.   ¿ ¸oÅ‡¿ ˛>¿ ˛>Å±/// Whether [PipelineOwner]s connected to this [PipelineManifold] should
/// collect semantics information and produce a semantics tree.
///
/// The [PipelineManifold] notifies its listeners (managed with [addListener]
/// and [removeListener]) when this property changes its value.
///
/// See also:
///
///  * [SemanticsBinding.semanticsEnabled], which [PipelineManifold]
///    implementations typically use to back this property.   ¿ ˛SÉq¿Æ¿ÆÉ3/// Called by a [PipelineOwner] connected to this [PipelineManifold] when a
/// [RenderObject] associated with that pipeline owner wishes to update its
/// visual appearance.
///
/// Typical implementations of this function will schedule a task to flush the
/// various stages of the pipeline. This function might be called multiple
/// times in quick succession. Implementations should take care to discard
/// duplicate calls quickly.
///
/// A [PipelineOwner] connected to this [PipelineManifold] will call
/// [PipelineOwner.onNeedVisualUpdate] instead of this method if it has been
/// configured with a non-null [PipelineOwner.onNeedVisualUpdate] callback.
///
/// See also:
///
///  * [SchedulerBinding.ensureVisualUpdate], which [PipelineManifold]
///    implementations typically call to implement this method.    ¿»¿fÈ¿ ¿ öH/// An object in the render tree.
///
/// The [RenderObject] class hierarchy is the core of the rendering
/// library's reason for being.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=zmbmrw07qBc}
///
/// [RenderObject]s have a [parent], and have a slot called [parentData] in
/// which the parent [RenderObject] can store child-specific data, for example,
/// the child position. The [RenderObject] class also implements the basic
/// layout and paint protocols.
///
/// The [RenderObject] class, however, does not define a child model (e.g.
/// whether a node has zero, one, or more children). It also doesn't define a
/// coordinate system (e.g. whether children are positioned in Cartesian
/// coordinates, in polar coordinates, etc) or a specific layout protocol (e.g.
/// whether the layout is width-in-height-out, or constraint-in-size-out, or
/// whether the parent sets the size and position of the child before or after
/// the child lays out, etc; or indeed whether the children are allowed to read
/// their parent's [parentData] slot).
///
/// The [RenderBox] subclass introduces the opinion that the layout
/// system uses Cartesian coordinates.
///
/// ## Lifecycle
///
/// A [RenderObject] must [dispose] when it is no longer needed. The creator
/// of the object is responsible for disposing of it. Typically, the creator is
/// a [RenderObjectElement], and that element will dispose the object it creates
/// when it is unmounted.
///
/// [RenderObject]s are responsible for cleaning up any expensive resources
/// they hold when [dispose] is called, such as [Picture] or [Image] objects.
/// This includes any [Layer]s that the render object has directly created. The
/// base implementation of dispose will nullify the [layer] property. Subclasses
/// must also nullify any other layer(s) it directly creates.
///
/// ## Writing a RenderObject subclass
///
/// In most cases, subclassing [RenderObject] itself is overkill, and
/// [RenderBox] would be a better starting point. However, if a render object
/// doesn't want to use a Cartesian coordinate system, then it should indeed
/// inherit from [RenderObject] directly. This allows it to define its own
/// layout protocol by using a new subclass of [Constraints] rather than using
/// [BoxConstraints], and by potentially using an entirely new set of objects
/// and values to represent the result of the output rather than just a [Size].
/// This increased flexibility comes at the cost of not being able to rely on
/// the features of [RenderBox]. For example, [RenderBox] implements an
/// intrinsic sizing protocol that allows you to measure a child without fully
/// laying it out, in such a way that if that child changes size, the parent
/// will be laid out again (to take into account the new dimensions of the
/// child). This is a subtle and bug-prone feature to get right.
///
/// Most aspects of writing a [RenderBox] apply to writing a [RenderObject] as
/// well, and therefore the discussion at [RenderBox] is recommended background
/// reading. The main differences are around layout and hit testing, since those
/// are the aspects that [RenderBox] primarily specializes.
///
/// ### Layout
///
/// A layout protocol begins with a subclass of [Constraints]. See the
/// discussion at [Constraints] for more information on how to write a
/// [Constraints] subclass.
///
/// The [performLayout] method should take the [constraints], and apply them.
/// The output of the layout algorithm is fields set on the object that describe
/// the geometry of the object for the purposes of the parent's layout. For
/// example, with [RenderBox] the output is the [RenderBox.size] field. This
/// output should only be read by the parent if the parent specified
/// `parentUsesSize` as true when calling [layout] on the child.
///
/// Anytime anything changes on a render object that would affect the layout of
/// that object, it should call [markNeedsLayout].
///
/// ### Hit Testing
///
/// Hit testing is even more open-ended than layout. There is no method to
/// override, you are expected to provide one.
///
/// The general behavior of your hit-testing method should be similar to the
/// behavior described for [RenderBox]. The main difference is that the input
/// need not be an [Offset]. You are also allowed to use a different subclass of
/// [HitTestEntry] when adding entries to the [HitTestResult]. When the
/// [handleEvent] method is called, the same object that was added to the
/// [HitTestResult] will be passed in, so it can be used to track information
/// like the precise coordinate of the hit, in whatever coordinate system is
/// used by the new layout protocol.
///
/// ### Adapting from one protocol to another
///
/// In general, the root of a Flutter render object tree is a [RenderView]. This
/// object has a single child, which must be a [RenderBox]. Thus, if you want to
/// have a custom [RenderObject] subclass in the render tree, you have two
/// choices: you either need to replace the [RenderView] itself, or you need to
/// have a [RenderBox] that has your class as its child. (The latter is the much
/// more common case.)
///
/// This [RenderBox] subclass converts from the box protocol to the protocol of
/// your class.
///
/// In particular, this means that for hit testing it overrides
/// [RenderBox.hitTest], and calls whatever method you have in your class for
/// hit testing.
///
/// Similarly, it overrides [performLayout] to create a [Constraints] object
/// appropriate for your class and passes that to the child's [layout] method.
///
/// ### Layout interactions between render objects
///
/// In general, the layout of a render object should only depend on the output of
/// its child's layout, and then only if `parentUsesSize` is set to true in the
/// [layout] call. Furthermore, if it is set to true, the parent must call the
/// child's [layout] if the child is to be rendered, because otherwise the
/// parent will not be notified when the child changes its layout outputs.
///
/// It is possible to set up render object protocols that transfer additional
/// information. For example, in the [RenderBox] protocol you can query your
/// children's intrinsic dimensions and baseline geometry. However, if this is
/// done then it is imperative that the child call [markNeedsLayout] on the
/// parent any time that additional information changes, if the parent used it
/// in the last layout phase. For an example of how to implement this, see the
/// [RenderBox.markNeedsLayout] method. It overrides
/// [RenderObject.markNeedsLayout] so that if a parent has queried the intrinsic
/// or baseline information, it gets marked dirty whenever the child's geometry
/// changes. ¿gÅ¿ô ¿ô¿• //// Initializes internal fields for subclasses.  ¿!˝¿"¿" ¿"¿' É®¿*æ¿*æÉs/// Data for use by the parent render object.
///
/// The parent data is used by the render object that lays out this object
/// (typically this object's parent in the render tree) to store information
/// relevant to itself and to any other nodes who happen to know exactly what
/// the data means. The parent data is opaque to the child.
///
///  * The parent data field must not be directly set, except by calling
///    [setupParentData] on the parent node.
///  * The parent data can be set before the child is added to the parent, by
///    calling [setupParentData] on the future parent node.
///  * The conventions for using the parent data depend on the layout protocol
///    used between the parent and child. For example, in box layout, the
///    parent data is completely opaque but in sector layout the child is
///    permitted to read some fields of the parent data. ¿0¿0¿0 ¿0¿3,¿3:¿3:  ¿;SÄÊ¿<-¿<-Ä√/// The object responsible for creating this render object.
///
/// Used in debug messages.
///
/// See also:
///
///  * [DebugCreator], which the [widgets] library uses as values for this field. ¿AÆ"¿A≥¿A≥ ¿AÀ¿B∫"¿Bø¿Bø ¿B◊¿Cø'¿C‘¿C‘  ¿G˙¿H ¿H   ¿H"¿H ¿H  ¿H8¿aØ¿aæ¿aæ  ¿là¿lç¿lç ¿lú¿l•Üô¿s+¿s+ÜG/// Whether this [RenderObject] is a known relayout boundary.
///
/// A relayout boundary is a [RenderObject] whose parent does not rely on the
/// child [RenderObject]'s size in its own layout algorithm. In other words,
/// if a [RenderObject]'s [performLayout] implementation does not ask the child
/// for its size at all, **the child** is a relayout boundary.
///
/// The type of "size" is typically defined by the coordinate system a
/// [RenderObject] subclass uses. For instance, [RenderSliver]s produce
/// [SliverGeometry] and [RenderBox]es produce [Size]. A parent [RenderObject]
/// may not read the child's size but still depend on the child's layout (using
/// a [RenderBox] child's baseline location, for example), this flag does not
/// reflect such dependencies and the [RenderObject] subclass must handle those
/// cases in its own implementation. See [RenderBox.markNeedsLayout] for an
/// example.
///
/// Relayout boundaries enable an important layout optimization: the parent not
/// depending on the size of a child means the child changing size does not
/// affect the layout of the parent. When a relayout boundary is marked as
/// needing layout, its parent does not have to be marked as dirty, hence the
/// name. For details, see [markNeedsLayout].
///
/// This flag is typically set in [RenderObject.layout], and consulted by
/// [markNeedsLayout] in deciding whether to recursively mark the parent as
/// also needing layout.
///
/// The flag is initially set to `null` when [layout] has yet been called, and
/// reset to `null` when the parent drops this child via [dropChild]. ¿s‚)¿sÁ¿sÁ ¿t¿uó¿u§¿u§  ¿wTÇ¿yC¿yCÅ“/// When true, a debug method ([debugAssertDoesMeetConstraints], for instance)
/// is currently executing asserts for verifying the consistent behavior of
/// intrinsic dimensions methods.
///
/// This is typically set by framework debug methods. It is read by tests to
/// selectively ignore custom layout callbacks. It should not be set outside of
/// intrinsic-checking debug methods, and should not be checked in release mode
/// (where it will always be false).¿y]¿ºª!¿º¿¿º¿ ¿º◊¿Ωµ&¿Ω ¿Ω   ¿ƒ€¿ƒÂ¿ƒÂ  ¿“[N¿“}¿“} ¿“å¿“ó¿“¶¿“ò¿“ß¿“®¿‘ñ(¿‘õ¿‘õ ¿‘π¿⁄ì¿⁄ù¿⁄ù  ¿Âp¿Âu¿Âu ¿ÂÉ¿Á‰(¿ÁÈ¿ÁÈ ¿Ë¿G—K¿GÛ¿GÛ ¿H ¿H¿H¿H¿ ¸Ä˝¿!o¿!ob/// Whether this has been disposed.
///
/// If asserts are disabled, this property is always null.   ¿,PÉæ¿/˛¿/˛ÉÖ/// The depth of this render object in the render tree.
///
/// The depth of nodes in a tree monotonically increases as you traverse down
/// the tree: a node always has a [depth] greater than its ancestors.
/// There's no guarantee regarding depth between siblings.
///
/// The [depth] of a child can be more than one greater than the [depth] of
/// the parent, because the [depth] values are never decreased: all that
/// matters is that it's greater than the parent. Consider a tree with a root
/// node A, a child B, and a grandchild C. Initially, A will have [depth] 0,
/// B [depth] 1, and C [depth] 2. If C is moved to be a child of A,
/// sibling of B, then the numbers won't change. C's [depth] will still be 2.
///
/// The depth of a node is used to ensure that nodes are processed in
/// depth order.  The [depth] is automatically maintained by the [adoptChild]
/// and [dropChild] methods.   ¿2ÑÄ•¿3¿3z/// The parent of this render object in the render tree.
///
/// The [parent] of the root node in the render tree is null.   ¿3FÅ'¿4R¿4RÄ’/// The semantics parent of this render object in the semantics tree.
///
/// This is typically the same as [parent].
///
/// [OverlayPortal] overrides this field to change how it forms its
/// semantics sub-tree.  ¿4(¿4)¿@…Ä‚¿A}¿A}Ä¢/// Whether [performResize] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿A’Ä‚¿Bâ¿BâÄ¢/// Whether [performLayout] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿B·Ä€¿Cî¿CîÄë/// The render object that is actively computing layout.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// null.   ¿FœÅ(¿G∆¿G∆Ä·/// Whether the parent render object is permitted to use this render object's
/// size.
///
/// Determined by the `parentUsesSize` parameter to [layout].
///
/// Only valid when asserts are enabled. In release builds, throws.   ¿HBï8¿IΩ¿IΩÅc/// Whether tree mutations are currently permitted.
///
/// This is only useful during layout. One should also not mutate the tree at
/// other times (e.g. during paint or while assembling the semantic tree) but
/// this function does not currently enforce those conventions.
///
/// Only valid when asserts are enabled. This will throw in release builds.   ¿]~Éd¿`H¿`HÇí/// The [RenderObject] that's expected to call [layout] on this [RenderObject]
/// in its [performLayout] implementation.
///
/// This method is used to implement an assert that ensures the render subtree
/// actively performing layout can not get accidentally mutated. It's only
/// implemented in debug mode and always returns null in release mode.
///
/// The default implementation returns [parent] and overriding is rarely
/// needed. A [RenderObject] subclass that expects its
/// [RenderObject.performLayout] to be called from a different [RenderObject]
/// that's not its [parent] should override this property to return the actual
/// layout parent.  ¿`)¿`*¿`ÊÄ∆¿aú¿aúÄö/// The owner for this render object (null if unattached).
///
/// The entire render tree that this render object belongs to
/// will have the same owner.   ¿a…Ä˘¿bß¿bßÄ /// Whether the render tree this render object belongs to is attached to a [PipelineOwner].
///
/// This becomes true during the call to [attach].
///
/// This becomes false during the call to [detach].   ¿jOÇ5¿k˚¿k˚Åí/// Whether this render object's layout information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. In release builds, this throws.
///
/// It is intended to be used by tests and asserts.   ¿sCÄú¿sû¿sûO/// Whether [invokeLayoutCallback] for this render object is currently running.   ¿tÅÉ¿t›¿t›Äß/// The layout constraints most recently supplied by the parent.
///
/// If layout has not yet happened, accessing this getter will
/// throw a [StateError] exception.  ¿t¿¿t¡¿™ ÉZ¿≠c¿≠cÉ/// Whether the constraints are the only input to the sizing algorithm (in
/// particular, child nodes have no impact).
///
/// Returning false is always correct, but returning true can be more
/// efficient when computing the size of this render object because we don't
/// need to recompute the size if the constraints don't change.
///
/// Typically, subclasses will always return the same value. If the value can
/// change, then, when it does change, the subclass should make sure to call
/// [markNeedsLayoutForSizedByParentChange].
///
/// Subclasses that return true must not change the dimensions of this render
/// object in [performLayout]. Instead, that work should be done by
/// [performResize] or - for subclasses of [RenderBox] - in
/// [RenderBox.computeDryLayout].  ¿≠M¿≠N¿ª‡Äÿ¿ºå¿ºåÄö/// Whether [paint] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿º·Ä—¿Ωå¿ΩåÄâ/// The render object that is actively painting.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// null.   ¿Ω‡É£¿¡h¿¡hÉ\/// Whether this render object repaints separately from its parent.
///
/// Override this in subclasses to indicate that instances of your class ought
/// to repaint independently. For example, render objects that repaint
/// frequently might want to repaint themselves without requiring their parent
/// to repaint.
///
/// If this getter returns true, the [paintBounds] are applied to this object
/// and all descendants. The framework invokes [RenderObject.updateCompositedLayer]
/// to create an [OffsetLayer] and assigns it to the [layer] field.
/// Render objects that declare themselves as repaint boundaries must not replace
/// the layer created by the framework.
///
/// If the value of this getter changes, [markNeedsCompositingBitsUpdate] must
/// be called.
///
/// See [RepaintBoundary] for more information about how repaint boundaries function.   ¿¬ÙÅ„¿ƒ∑¿ƒ∑Åú/// Whether this render object always needs compositing.
///
/// Override this in subclasses to indicate that your paint function always
/// creates at least one composited layer. For example, videos should return
/// true if they use hardware decoders.
///
/// You must call [markNeedsCompositingBitsUpdate] if the value of this getter
/// changes. (This is implied when [adoptChild] or [dropChild] are called.)  ¿ƒ°¿ƒ¢¿ FÜ◊¿–ê¿–êÖˆ/// The compositing layer that this render object uses to repaint.
///
/// If this render object is not a repaint boundary, it is the responsibility
/// of the [paint] method to populate this field. If [needsCompositing] is
/// true, this field may be populated with the root-most layer used by the
/// render object implementation. When repainting, instead of creating a new
/// layer the render object may update the layer stored in this field for better
/// performance. It is also OK to leave this field as null and create a new
/// layer on every repaint, but without the performance benefit. If
/// [needsCompositing] is false, this field must be set to null either by
/// never populating this field, or by setting it to null when the value of
/// [needsCompositing] changes from true to false.
///
/// If a new layer is created and stored in some other field on the render
/// object, the render object must use a [LayerHandle] to store it. A layer
/// handle will prevent the layer from being disposed before the render
/// object is finished with it, and it will also make sure that the layer
/// gets appropriately disposed when the render object creates a replacement
/// or nulls it out. The render object must null out the [LayerHandle.layer]
/// in its [dispose] method.
///
/// If this render object is a repaint boundary, the framework automatically
/// creates an [OffsetLayer] and populates this field prior to calling the
/// [paint] method. The [paint] method must not replace the value of this
/// field.  ¿–o¿–p¿—!Å6¿—2¿—2  ¿—8¿—I¿—H  ¿—!¿—"¿“ÆÅ‰¿‘¿‘Å2/// In debug mode, the compositing layer that this render object uses to repaint.
///
/// This getter is intended for debugging purposes only. In release builds, it
/// always returns null. In debug builds, it returns the layer even if the layer
/// is dirty.
///
/// For production code, consider [layer].   ¿⁄‘Å‡¿‹"¿‹"Å6/// Whether we or one of our descendants has a compositing layer.
///
/// If this node needs compositing as indicated by this bit, then all ancestor
/// nodes will also need compositing.
///
/// Only legal to call after [PipelineOwner.flushLayout] and
/// [PipelineOwner.flushCompositingBits] have been called.   ¿·ÀÉ°¿‰Â¿‰ÂÇÙ/// Whether this render object's paint information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. (In release builds, this throws.)
///
/// It is intended to be used by tests and asserts.
///
/// It is possible (and indeed, quite common) for [debugNeedsPaint] to be
/// false and [debugNeedsLayout] to be true. The render object will still be
/// repainted in the next frame when this is the case, because the
/// [markNeedsPaint] method is implicitly called by the framework after a
/// render object is laid out, prior to the paint phase.   ¿ÂåÇT¿Á9¿Á9Åì/// Whether this render object's layer information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. (In release builds, this throws.)
///
/// It is intended to be used by tests and asserts.   ¿mÅ¿{¿{Ä˙/// An estimate of the bounds within which this render object will paint.
/// Useful for debugging flags such as [debugPaintLayerBordersEnabled].
///
/// These are also the bounds used by [showOnScreen] to make a [RenderObject]
/// visible on screen.   ¿@ÄÇ¿@ê¿@êe/// The bounding box, in the local coordinate system, of this
/// object, for accessibility purposes.   ¿@£Å¿A/¿A/|/// Whether the semantics of this render object is dirty and await the update.
///
/// Always returns false in release mode.   ¿A´ÇV¿C¿CÅ9/// The semantics of this render object.
///
/// Exposed only for testing and debugging. To learn about the semantics of
/// render objects in production, obtain a [SemanticsHandle] from
/// [PipelineOwner.ensureSemantics].
///
/// Only valid in debug and profile mode. In release builds, always returns
/// null.   9¿mÉã¿ (¿ (Çó/// Cause the entire subtree rooted at the given [RenderObject] to be marked
/// dirty for layout, paint, etc, so that the effects of a hot reload can be
/// seen, or so that the effect of changing a global debug flag (such as
/// [debugPaintSizeEnabled]) can be applied.
///
/// This is called by the [RendererBinding] in response to the
/// `ext.flutter.reassemble` hook, which is used by development tools when the
/// application code has changed, to cause the widget tree to pick up any
/// changed implementations.
///
/// This is expensive and should not be called except during development.
///
/// See also:
///
///  * [BindingBase.reassembleApplication]   ¿"ÑÚ¿% ¿% Ç∞/// Release any resources held by this render object.
///
/// The object that creates a RenderObject is in charge of disposing it.
/// If this render object has created any children directly, it must dispose
/// of those children in this method as well. It must not dispose of any
/// children that were created by some other object, such as
/// a [RenderObjectElement]. Those children will be disposed when that
/// element unmounts, which may be delayed if the element is moved to another
/// part of the tree.
///
/// Implementations of this method must end with a call to the inherited
/// method, as in `super.dispose()`.
///
/// The object is no longer usable after calling dispose.  ¿$Í¿$Î¿*ÕÅ¿+ö¿+öÄø/// Override to setup parent data correctly for your children.
///
/// You can call this function to set up the parent data for child before the
/// child is added to the parent's child list. ¿+™¿+¬¿+¡   ¿0$Åi¿0›¿0›Äû/// Adjust the [depth] of the given [child] to be greater than this node's own
/// [depth].
///
/// Only call this method from overrides of [redepthChildren]. ¿0Í¿0¯¿0˜  ¿0À¿0Ã¿1ëÄÔ¿2l¿2lÄ¿/// Adjust the [depth] of this node's children, if any.
///
/// Override this method in subclasses with child nodes to call [redepthChild]
/// for each child. Do not call this method directly.  ¿2Z¿2[¿4qÉ¿5Ñ¿5ÑÄÁ/// Called by subclasses when they decide a render object is a child.
///
/// Only for use by subclasses when changing their child lists. Calling this
/// in other cases will lead to an inconsistent tree and probably cause crashes. ¿5è¿5ù¿5ú  ¿5a¿5b¿5r¿5s¿7íÇÌ¿8Ø¿8ØÄÒ/// Called by subclasses when they decide a render object is no longer a child.
///
/// Only for use by subclasses when changing their child lists. Calling this
/// in other cases will lead to an inconsistent tree and probably cause crashes. ¿8π¿8«¿8∆  ¿8å¿8ç¿8ù¿8û¿:ÉÄÃ¿;"¿;"Äì/// Calls visitor for each immediate child of this render object.
///
/// Override in subclasses with children and call the visitor for each child. ¿;0¿;E¿;D   ¿<>Ñá¿<C¿<C  ¿<T¿<\¿<[  ¿<c¿<k¿<j  ¿<u¿<Å¿<Ä   ¿CÎÇ‡¿EL¿ELÄÚ/// Set [debugActiveLayout] to null when [inner] callback is called.
/// This is useful when you have to temporarily clear that variable to
/// disable some false-positive checks, such as when computing toStringDeep
/// or using custom trees.¿Ej¿Ej¿Ej¿Em¿E{¿Ez  ¿DÊ¿DÁ¿DÌ¿E¿DÓ¿E¿E¿E¿E¿E¿E#¿E$¿E*¿E?¿E+¿b∆ÖÖ¿dc¿dcÅv/// Mark this render object as attached to the given owner.
///
/// Typically called only from the [parent]'s [attach] method, and by the
/// [owner] to mark the root of a tree as attached.
///
/// Subclasses with children should override this method to
/// [attach] all their children to the same [owner]
/// after calling the inherited method, as in `super.attach(owner)`. ¿dj¿dy¿dx  ¿dM¿dN¿hOÅ¸¿i“¿i“Å\/// Mark this render object as detached from its [PipelineOwner].
///
/// Typically called only from the [parent]'s [detach], and by the [owner] to
/// mark the root of a tree as detached.
///
/// Subclasses with children should override this method to
/// [detach] all their children after calling the inherited method,
/// as in `super.detach()`.  ¿iº¿iΩ¿uµÅõ¿w/¿w/Å]/// Verify that the object's constraints are being met. Override this function
/// in a subclass to verify that your state matches the constraints object.
/// This function is only called when asserts are enabled (i.e. in debug mode)
/// and only when needsLayout is false. If the constraints are not met, it
/// should assert or throw an exception.  ¿w¿w¿ygÅº¿yl¿yl    ¿{'äw¿É>¿É>á≈/// Mark this render object's layout information as dirty, and either register
/// this object with its [PipelineOwner], or defer to the parent, depending on
/// whether this object is a relayout boundary or not respectively.
///
/// ## Background
///
/// Rather than eagerly updating layout information in response to writes into
/// a render object, we instead mark the layout information as dirty, which
/// schedules a visual update. As part of the visual update, the rendering
/// pipeline updates the render object's layout information.
///
/// This mechanism batches the layout work so that multiple sequential writes
/// are coalesced, removing redundant computation.
///
/// If a render object's parent indicates that it uses the size of one of its
/// render object children when computing its layout information, this
/// function, when called for the child, will also mark the parent as needing
/// layout. In that case, since both the parent and the child need to have
/// their layout recomputed, the pipeline owner is only notified about the
/// parent; when the parent is laid out, it will call the child's [layout]
/// method and thus the child will be laid out as well.
///
/// Once [markNeedsLayout] has been called on a render object,
/// [debugNeedsLayout] returns true for that render object until just after
/// the pipeline owner has called [layout] on the render object.
///
/// ## Special cases
///
/// Some subclasses of [RenderObject], notably [RenderBox], have other
/// situations in which the parent needs to be notified if the child is
/// dirtied (e.g., if the child's intrinsic dimensions or baseline changes).
/// Such subclasses override markNeedsLayout and either call
/// `super.markNeedsLayout()`, in the normal case, or call
/// [markParentNeedsLayout], in the case where the parent needs to be laid out
/// as well as the child.
///
/// If [sizedByParent] has changed, calls
/// [markNeedsLayoutForSizedByParentChange] instead of [markNeedsLayout].   ¿Ö¢É¿ád¿ádÅù/// Mark this render object's layout information as dirty, and then defer to
/// the parent.
///
/// This function should only be called from [markNeedsLayout] or
/// [markNeedsLayoutForSizedByParentChange] implementations of subclasses that
/// introduce more reasons for deferring the handling of dirty layout to the
/// parent. See [markNeedsLayout] for details.
///
/// Only call this if [parent] is not null.  ¿áR¿áS¿àøÅ∑¿ä¿äÅB/// Mark this render object's layout information as dirty (like
/// [markNeedsLayout]), and additionally also handle any necessary work to
/// handle the case where [sizedByParent] has changed value.
///
/// This should be called whenever [sizedByParent] might have changed.
///
/// Only call this if [parent] is not null.   ¿äzÇm¿ãé¿ãéÅ/// Bootstrap the rendering pipeline by scheduling the very first layout.
///
/// Requires this render object to be attached and that this render object
/// is the root of the render tree.
///
/// See [RenderView] for an example of how this function is used.   ¿åÎÑ	¿ç¿ç   ¿åÎ¿åÏ¿åÚ¿ç¿åÛ¿ê¯óO¿ñê¿ñêÖ7/// Compute the layout for this render object.
///
/// This method is the main entry point for parents to ask their children to
/// update their layout information. The parent passes a constraints object,
/// which informs the child as to which layouts are permissible. The child is
/// required to obey the given constraints.
///
/// If the parent reads information computed during the child's layout, the
/// parent must pass true for `parentUsesSize`. In that case, the parent will
/// be marked as needing layout whenever the child is marked as needing layout
/// because the parent's layout information depends on the child's layout
/// information. If the parent uses the default value (false) for
/// `parentUsesSize`, the child can change its layout information (subject to
/// the given constraints) without informing the parent.
///
/// Subclasses should not override [layout] directly. Instead, they should
/// override [performResize] and/or [performLayout]. The [layout] method
/// delegates the actual work to [performResize] and [performLayout].
///
/// The parent's [performLayout] method should call the [layout] of all its
/// children unconditionally. It is the [layout] method's responsibility (as
/// implemented here) to return early if the child does not need to do any
/// work to update its layout information. ¿ñó¿ñ§¿ñ£  ¿ñ±¿ñ∑¿ñ∂  ¿ñ^¿ñ_¿ñe¿ñá¿ñf¿ñ«¿®KÅ—¿™	¿™	Åü/// If a subclass has a "size" (the state controlled by `parentUsesSize`,
/// whatever it is in the subclass, e.g. the actual `size` property of
/// [RenderBox]), and the subclass verifies that in debug mode this "size"
/// property isn't used when [debugCanParentUseSize] isn't set, then that
/// subclass should override [debugResetSize] to reapply the current values of
/// [debugCanParentUseSize] to that state.  ¿©˜¿©¯¿≠~ÇÛ¿∞a¿∞aÇ¥/// {@template flutter.rendering.RenderObject.performResize}
/// Updates the render objects size using only the constraints.
///
/// Do not call this function directly: call [layout] instead. This function
/// is called by [layout] when there is actually work to be done by this
/// render object during layout. The layout constraints provided by your
/// parent are available via the [constraints] getter.
///
/// This function is called only if [sizedByParent] is true.
/// {@endtemplate}
///
/// Subclasses that set [sizedByParent] to true should override this method to
/// compute their size. Subclasses of [RenderBox] should consider overriding
/// [RenderBox.computeDryLayout] instead.  ¿∞O¿∞P¿∞uÜA¿∂¶¿∂¶ÖÍ/// Do the work of computing the layout for this render object.
///
/// Do not call this function directly: call [layout] instead. This function
/// is called by [layout] when there is actually work to be done by this
/// render object during layout. The layout constraints provided by your
/// parent are available via the [constraints] getter.
///
/// If [sizedByParent] is true, then this function should not actually change
/// the dimensions of this render object. Instead, that work should be done by
/// [performResize]. If [sizedByParent] is false, then this function should
/// both change the dimensions of this render object and instruct its children
/// to layout.
///
/// In implementing this function, you must call [layout] on each of your
/// children, passing true for parentUsesSize if your layout information is
/// dependent on your child's layout information. Passing true for
/// parentUsesSize ensures that this render object will undergo layout if the
/// child undergoes layout. Otherwise, the child can change its layout
/// information without informing this render object.
///
/// Some special [RenderObject] subclasses (such as the one used by
/// [OverlayPortal.overlayChildLayoutBuilder]) call [applyPaintTransform] in
/// their [performLayout] implementation. To ensure such [RenderObject]s get
/// the up-to-date paint transform, [RenderObject] subclasses should typically
/// update the paint transform (as reported by [applyPaintTransform]) in this
/// method instead of [paint].  ¿∂î¿∂ï¿∂∫Ö¿∫:¿∫:ÉO/// Allows mutations to be made to this object's child list (and any
/// descendants) as well as to any other dirty nodes in the render tree owned
/// by the same [PipelineOwner] as this object. The `callback` argument is
/// invoked synchronously, and the mutations are allowed only during that
/// callback's execution.
///
/// This exists to allow child lists to be built on-demand during layout (e.g.
/// based on the object's size), and to enable nodes to be moved around the
/// tree as this happens (e.g. to handle [GlobalKey] reparenting), while still
/// ensuring that any particular node is only laid out once per frame.
///
/// Calling this function disables a number of assertions that are intended to
/// catch likely bugs. As such, using this function is generally discouraged.
///
/// This function can only be called during layout.¿∫O¿∫O¿∫O¿∫f¿∫y¿∫x  ¿∫(¿∫)¿¡áÅi¿¬Ö¿¬ÖÄÓ/// Called, in debug mode, if [isRepaintBoundary] is true, when either the
/// this render object or its parent attempt to paint.
///
/// This can be used to record metrics about whether the node should actually
/// be a repaint boundary. ¿¬≠¿¬≥¿¬≤  ¿¬Õ¿¬”¿¬“  ¿¬√¿¬‚¿ƒ˝ÖE¿…∂¿…∂É·/// Update the composited layer owned by this render object.
///
/// This method is called by the framework when [isRepaintBoundary] is true.
///
/// If [oldLayer] is `null`, this method must return a new [OffsetLayer]
/// (or subtype thereof). If [oldLayer] is not `null`, then this method must
/// reuse the layer instance that is provided - it is an error to create a new
/// layer in this instance. The layer will be disposed by the framework when
/// either the render object is disposed or if it is no longer a repaint
/// boundary.
///
/// The [OffsetLayer.offset] property will be managed by the framework and
/// must not be updated by this method.
///
/// If a property of the composited layer needs to be updated, the render object
/// must call [markNeedsCompositedLayerUpdate] which will schedule this method
/// to be called without repainting children. If this widget was marked as
/// needing to paint and needing a composited layer update, this method is only
/// called once. ¿…Õ(¿…Ó¿…Ì   ¿‘ÁÖ®¿ÿ<¿ÿ<É//// Mark the compositing state for this render object as dirty.
///
/// This is called to indicate that the value for [needsCompositing] needs to
/// be recomputed during the next [PipelineOwner.flushCompositingBits] engine
/// phase.
///
/// When the subtree is mutated, we need to recompute our
/// [needsCompositing] bit, and some of our ancestors need to do the
/// same (in case ours changed in a way that will change theirs). To
/// this end, [adoptChild] and [dropChild] call this method, and, as
/// necessary, this method calls the parent's, etc, walking up the
/// tree to mark all the nodes that need updating.
///
/// This method does not schedule a rendering frame, because since
/// it cannot be the case that _only_ the compositing bits changed,
/// something else will have scheduled a frame for us.   ¿‹∏Ö¿‹Ω¿‹Ω    ¿Ëâæ¿Î⁄¿Î⁄Éõ/// Mark this render object as having changed its visual appearance.
///
/// Rather than eagerly updating this render object's display list
/// in response to writes, we instead mark the render object as needing to
/// paint, which schedules a visual update. As part of the visual update, the
/// rendering pipeline will give this render object an opportunity to update
/// its display list.
///
/// This mechanism batches the painting work so that multiple sequential
/// writes are coalesced, removing redundant computation.
///
/// Once [markNeedsPaint] has been called on a render object,
/// [debugNeedsPaint] returns true for that render object until just after
/// the pipeline owner has called [paint] on the render object.
///
/// See also:
///
///  * [RepaintBoundary], to scope a subtree of render objects to their own
///    layer, thus limiting the number of nodes that [markNeedsPaint] must mark
///    dirty.   ¿Ò”Ü-¿ı5¿ı5É:/// Mark this render object as having changed a property on its composited
/// layer.
///
/// Render objects that have a composited layer have [isRepaintBoundary] equal
/// to true may update the properties of that composited layer without repainting
/// their children. If this render object is a repaint boundary but does
/// not yet have a composited layer created for it, this method will instead
/// mark the nearest repaint boundary parent as needing to be painted.
///
/// If this method is called on a render object that is not a repaint boundary
/// or is a repaint boundary but hasn't been composited yet, it is equivalent
/// to calling [markNeedsPaint].
///
/// See also:
///
///  * [RenderOpacity], which uses this method when its opacity is updated to
///    update the layer opacity without repainting children.   ¿˘uÇ÷¿˘z¿˘z    ¿¸OÇo¿˝e¿˝eÅ/// Bootstrap the rendering pipeline by scheduling the very first paint.
///
/// Requires that this render object is attached, is the root of the render
/// tree, and has a composited layer.
///
/// See [RenderView] for an example of how this function is used. ¿˝z¿˝ä¿˝â   ¿˛¬Çx¿ˇ™¿ˇ™Äÿ/// Replace the layer. This is only valid for the root of a render
/// object subtree (whatever object [scheduleInitialPaint] was
/// called on).
///
/// This might be called if, e.g., the device pixel ratio changed. ¿ˇª¿ˇ»¿ˇ«   ¿>ë+¿C¿C  ¿U¿f¿e  ¿n¿v¿u   ¿ãu¿À¿À8/// Override this method to paint debugging information. ¿÷¿Á¿Ê  ¿Ô¿˜¿ˆ   ¿É˛¿“¿“É¶/// Paint this render object into the given context at the given offset.
///
/// Subclasses should override this method to provide a visual appearance
/// for themselves. The render object's local coordinate system is
/// axis-aligned with the coordinate system of the context's canvas and the
/// render object's local origin (i.e, x=0 and y=0) is placed at the given
/// offset in the context's canvas.
///
/// Do not call this function directly. If you wish to paint yourself, call
/// [markNeedsPaint] instead to schedule a call to this function. If you wish
/// to paint one of your children, call [PaintingContext.paintChild] on the
/// given `context`.
///
/// When painting one of your children (via a paint child function on the
/// given context), the current canvas held by the context might change
/// because draw operations before and after painting children might need to
/// be recorded on separate compositing layers. ¿ÿ¿È¿Ë  ¿Ò¿˘¿¯   ¿ÉW¿Ò¿ÒÇÀ/// Applies the transform that would be applied when painting the given child
/// to the given matrix.
///
/// Used by coordinate conversion functions ([getTransformTo], for example) to
/// translate coordinates local to one render object into coordinates local to
/// another render object.
///
/// Some RenderObjects will provide a zeroed out matrix in this method,
/// indicating that the child should not paint anything or respond to hit
/// tests currently. A parent may supply a non-zero matrix even though it
/// does not paint its child currently, for example if the parent is a
/// [RenderOffstage] with `offstage` set to true. In both of these cases,
/// the parent must return `false` from [paintsChild]. ¿¿¿  ¿#¿,¿+   ¿aÉ]¿\¿\Ç€/// Whether the given child would be painted if [paint] were called.
///
/// Some RenderObjects skip painting their children if they are configured to
/// not produce any visible effects. For example, a [RenderOffstage] with
/// its `offstage` property set to true, or a [RenderOpacity] with its opacity
/// value set to zero.
///
/// In these cases, the parent may still supply a non-zero matrix in
/// [applyPaintTransform] to inform callers about where it would paint the
/// child if the child were painted at all. Alternatively, the parent may
/// supply a zeroed out matrix if it would not otherwise be able to determine
/// a valid matrix for the child and thus cannot meaningfully determine where
/// the child would paint. ¿h¿Ä¿   ¿¬ç™¿#ü¿#üÑ¢/// {@template flutter.rendering.RenderObject.getTransformTo}
/// Applies the paint transform from this [RenderObject] to the `target`
/// [RenderObject].
///
/// Returns a matrix that maps the local paint coordinate system to the
/// coordinate system of `target`, or a [Matrix4.zero] if the paint transform
/// can not be computed.
///
/// This method throws an exception when the `target` is not in the same render
/// tree as this [RenderObject], as the behavior is undefined.
///
/// This method ignores [RenderObject.paintsChild]. This means it will still
/// try to compute the paint transform even if this [RenderObject] or
/// `target` is currently not visible.
///
/// If `target` is null, this method returns a matrix that maps from the
/// local paint coordinate system to the coordinate system of the
/// [PipelineOwner.rootNode].
/// {@endtemplate}
///
/// For the render tree owned by the [RendererBinding] (i.e. for the main
/// render tree displayed on the device) this means that this method maps to
/// the global coordinate system in logical pixels. To get physical pixels,
/// use [applyPaintTransform] from the [RenderView] to further transform the
/// coordinate. ¿#Æ¿#Ω¿#º   ¿,pÇÔ¿/¿/Çã/// Returns a rect in this object's coordinate system that describes
/// the approximate bounding box of the clip rect that would be
/// applied to the given child during the paint phase, if any.
///
/// Returns null if the child would not be clipped.
///
/// This is used in the semantics phase to avoid including children
/// that are not physically visible.
///
/// RenderObjects that respect a [Clip] behavior when painting _must_ respect
/// that same behavior when describing this value. For example, if passing
/// [Clip.none] to [PaintingContext.pushClipRect] as the `clipBehavior`, then
/// the implementation of this method must return null. ¿/9¿/Q¿/P   ¿/cÖÊ¿5¿5Öp/// Returns a rect in this object's coordinate system that describes
/// which [SemanticsNode]s produced by the `child` should be included in the
/// semantics tree. [SemanticsNode]s from the `child` that are positioned
/// outside of this rect will be dropped. Child [SemanticsNode]s that are
/// positioned inside this rect, but outside of [describeApproximatePaintClip]
/// will be included in the tree marked as hidden. Child [SemanticsNode]s
/// that are inside of both rect will be included in the tree as regular
/// nodes.
///
/// This method only returns a non-null value if the semantics clip rect
/// is different from the rect returned by [describeApproximatePaintClip].
/// If the semantics clip rect and the paint clip rect are the same, this
/// method returns null.
///
/// A viewport would typically implement this method to include semantic nodes
/// in the semantics tree that are currently hidden just before the leading
/// or just after the trailing edge. These nodes have to be included in the
/// semantics tree to implement implicit accessibility scrolling on iOS where
/// the viewport scrolls implicitly when moving the accessibility focus from
/// the last visible node in the viewport to the first hidden one.
///
/// See also:
///
/// * [RenderViewportBase.cacheExtent], used by viewports to extend their
///   semantics clip beyond their approximate paint clip. ¿5"¿5;¿5:   ¿5]Çu¿6Å¿6ÅÅ/// Bootstrap the semantics reporting mechanism by marking this node
/// as needing a semantics update.
///
/// Requires that this render object is attached, and is the root of
/// the render tree.
///
/// See [RendererBinding] for an example of how this function is used.   ¿7÷Ö_¿<—¿<—Ñ§/// Report the semantics of this node, for example for accessibility purposes.
///
/// This method should be overridden by subclasses that have interesting
/// semantic information.
///
/// The given [SemanticsConfiguration] object is mutable and should be
/// annotated in a manner that describes the current state. No reference
/// should be kept to that object; mutating it outside of the context of the
/// [describeSemanticsConfiguration] call (for example as a result of
/// asynchronous computation) will at best have no useful effect and at worse
/// will cause crashes as the data will be in an inconsistent state.
///
/// {@tool snippet}
///
/// The following snippet will describe the node as a button that responds to
/// tap actions.
///
/// ```dart
/// abstract class SemanticButtonRenderObject extends RenderObject {
///   @override
///   void describeSemanticsConfiguration(SemanticsConfiguration config) {
///     super.describeSemanticsConfiguration(config);
///     config
///       ..onTap = _handleTap
///       ..label = 'I am a button'
///       ..isButton = true;
///   }
///
///   void _handleTap() {
///     // Do something.
///   }
/// }
/// ```
/// {@end-tool} ¿<¿=¿=  ¿<ø¿<¿¿=9Ç‡¿>≤¿>≤Åc/// Sends a [SemanticsEvent] associated with this render object's [SemanticsNode].
///
/// If this render object has no semantics information, the first parent
/// render object with a non-null semantic node is used.
///
/// If semantics are disabled, no events are dispatched.
///
/// See [SemanticsNode.sendEvent] for a full description of the behavior. ¿>≈¿>’¿>‘   ¿DÅÃ¿ET¿ETÅ,/// Removes all semantics from this render object and its descendants.
///
/// Should only be called on objects whose [parent] is not a [RenderObject].
///
/// Override this method if you instantiate new [SemanticsNode]s in an
/// overridden [assembleSemanticsNode] method, to dispose of those nodes.  ¿E>¿E?¿E’Å¯¿FÏ¿FÏÅ/// Mark this node as needing an update to its semantics description.
///
/// This must be called whenever the semantics configuration of this
/// [RenderObject] as annotated by [describeSemanticsConfiguration] changes in
/// any way to update the semantics tree.   ¿H!Å ¿Iì¿IìÅ\/// Called when collecting the semantics of this node.
///
/// The implementation has to return the children in paint order skipping all
/// children that are not semantically relevant (e.g. because they are
/// invisible).
///
/// The default implementation mirrors the behavior of
/// [visitChildren] (which is supposed to walk all the children). ¿I≠¿I¬¿I¡   ¿IÔÑV¿L¥¿L¥Ç£/// Assemble the [SemanticsNode] for this [RenderObject].
///
/// If [describeSemanticsConfiguration] sets
/// [SemanticsConfiguration.isSemanticBoundary] to true, this method is called
/// with the `node` created for this [RenderObject], the `config` to be
/// applied to that node and the `children` [SemanticsNode]s that descendants
/// of this RenderObject have generated.
///
/// By default, the method will annotate `node` with `config` and add the
/// `children` to it.
///
/// Subclasses can override this method to add additional [SemanticsNode]s
/// to the tree. If new [SemanticsNode]s are instantiated in this method
/// they must be disposed in [clearSemantics]. ¿Lœ¿Lﬁ¿L›  ¿LÁ¿Lˇ¿L˛  ¿M
 ¿M#¿M"   ¿NVÄ¢¿N∏¿N∏N/// Override this method to handle pointer events that hit this render object. ¿Nƒ¿N“¿N—  ¿Nÿ¿N¿NÔ  ¿Nß¿N®¿RQÉ™¿Rè¿Rè(/// Returns a human understandable name.  ¿R|¿R}¿Uˇb¿V¿V  ¿V/¿V-¿V,  ¿Uˇ¿V ¿V7¿VF¿VG¿VeÇN¿W$¿W$Ä•/// Returns a description of the tree rooted at this node.
/// If the prefix argument is provided, then every line in the output
/// will be prefixed by that string. ¿W7¿W?¿W>  ¿WV¿W_¿W^  ¿Wy0¿Wä¿Wâ  ¿WØ¿W¥¿W≥  ¿W¿W¿WN¿Wq¿Wî¿W£¿W§¿Wø¿X∑ÅÍ¿Y ¿Y Äı/// Returns a one-line detailed description of the render object.
/// This description is often somewhat long.
///
/// This includes the same information for this RenderObject as given by
/// [toStringDeep], but does not recurse to any children. ¿Y€¿Y„¿Y‚  ¿YÒ0¿Z¿Z  ¿Y∑¿Y∏¿YÎ¿Z¿Z¿Z¿Z•ÜD¿Z√¿Z√  ¿Z◊&¿ZÙ¿ZÛ  ¿Z•¿Z¶¿Z≤¿Z≥¿`ÌQ¿a¿a   ¿`Ì¿`Ó¿aBÑ÷¿e¿eÉî/// Attempt to make (a portion of) this or a descendant [RenderObject] visible
/// on screen.
///
/// If `descendant` is provided, that [RenderObject] is made visible. If
/// `descendant` is omitted, this [RenderObject] is made visible.
///
/// The optional `rect` parameter describes which area of that [RenderObject]
/// should be shown on screen. If `rect` is null, the entire
/// [RenderObject] (as defined by its [paintBounds]) will be revealed. The
/// `rect` parameter is interpreted relative to the coordinate system of
/// `descendant` if that argument is provided and relative to this
/// [RenderObject] otherwise.
///
/// The `duration` parameter can be set to a non-zero value to bring the
/// target object on screen in an animation defined by `curve`.
///
/// See also:
///
/// * [RenderViewportBase.showInViewport], which [RenderViewportBase] and
///   [SingleChildScrollView] delegate this method to. ¿e¿e&¿e%  ¿e5
¿e<¿e;  ¿eE!¿eO¿eN  ¿el¿es¿er  ¿eY¿ea¿eb¿ez¿eÄ¿eÅ¿fÇì¿h	¿h	Å /// Adds a debug representation of a [RenderObject] optimized for including in
/// error messages.
///
/// The default [style] of [DiagnosticsTreeStyle.shallow] ensures that all of
/// the properties of the render object are included in the error output but
/// none of the children of the object are.
///
/// You should always include a RenderObject in an error message if it is the
/// [RenderObject] causing the failure or contract violation of the error. ¿h¿h'¿h&  ¿h29¿hH¿hG  ¿hO¿hc¿hd ¿ºká¿º…¿º…F/// Properties of _RenderObjectSemantics that are imposed from parent. ¿º‚Ä≥¿ºË ¿ºË¿º¸  ¿Ω¿Ω¿Ω  ¿Ω&¿Ω5¿Ω4  ¿ΩK ¿ΩZ¿ΩY  ¿Ωq¿ΩÄ¿Ω   ¿ΩôÄÿ¿æb¿æbÄµ/// Whether [SemanticsNode]s created from this render object semantics subtree
/// will be merged into parent.
///
/// This is imposed by render objects of parent [MergeSemantics]s. ¿ævÅ¿ø¿øÄÛ/// Whether [SemanticsNode]s created from this render object semantics subtree
/// ignores user action such as [SemanticsAction.tap] and its friends.
///
/// This is imposed by render objects of parent [IgnorePointer]s or
/// [AbsorbPointer]s. ¿øïÅ¿¿ò¿¿òÄÌ/// Any immediate render object semantics that
/// [_RenderObjectSemantics.contributesToSemanticsTree] should forms a node
///
/// This is imposed by parent render objects that set
/// [SemanticsConfiguration.explicitChildNodes] to true. ¿¿ØÄû¿¡>¿¡>q/// Tags for immediate render object semantics that
/// [_RenderObjectSemantics.shouldFormSemanticsNode] is true. ¿¬°Ä’¿¬µ¿¬µ   ¿¬°¿¬¢¿¡RÅK¿¡l¿¡l  ¿¡o¿¡w¿¡v  ¿¡R¿¡S¿º≤¿º≥¿√zç¿∆î¿∆îÉ/// A wrapper class that handles the life cycle of the [SemanticsConfiguration]
/// of a [RenderObject].
///
/// Typically, this class calls [RenderObject.describeSemanticsConfiguration] to
/// update the config and owner of this object does not directly mutate the
/// the config.
///
/// In some cases during [PipelineOwner.flushSemantics], the config has to be
/// mutated due to [_SemanticsParentData] update to propagate updated property
/// to semantics node. One should use [updateConfig] to update the config in this
/// case.
///
/// To access the config stored in this wrapper, uses
/// [_SemanticsConfigurationProvider.effective] to access the latest config.
/// Uses [_SemanticsConfigurationProvider.original] if one wants to access the
/// raw config without post mutations. ¿∆∏4¿∆∏ ¿∆∏¿∆◊  ¿∆ÿ¿∆ﬁ¿∆›   ¿∆S¿«6¿«60/// The owning rendering object for this object. ¿«H'¿«M¿«M ¿«j¿«s.¿«ã¿«ã  ¿«•/¿«Ω¿«Ω  ¿«ŸU¿«‚¿«‚    ¿»2Äß¿»ö¿»öJ/// The latest config that reflect any change done through [updateConfig].   ¿»›É£¿ s¿ sÅn/// The original config without any change through [updateConfig].
///
/// This is typically use to recalculate certain properties when mutating
/// [effective] since [effective] may contain stale data from previous update.
/// Examples are [SemanticsConfiguration.isBlockingUserActions] or
/// [SemanticsConfiguration.elevation]. Otherwise, use [effective] instead.   ¿ÃÑÅl¿Õ¿Õo/// Mutates the config
///
/// This does not change the [original], and the change reflects in
/// [effective]. ¿Õ,¿Õ3¿Õ2   ¿ÕÙÄœ¿Œ)¿Œ)-/// Absorb a list of config into [effective]. ¿Œ3(¿ŒU¿ŒT   ¿Œ«Äê¿Œ˙¿Œ˙+/// Reset any post mutation to [effective].   ¿œ[Å<¿–¿–Ä≤/// Remove every cache in this wrapper.
///
/// This cause the [RenderObject.describeSemanticsConfiguration] to be
/// re-evaluated next time [effective] or [original] is called.    ¿–õÇ{¿“R¿“RÅß/// A convenient abstract interface used for constructing the
/// [_RenderObjectSemantics] tree.
///
/// The _SemanticsFragment can be an [_IncompleteSemanticsFragment] or a
/// [_RenderObjectSemantics]. This interface is used so that
/// [_RenderObjectSemantics] can handle semantics configuration merging without
/// knowing whether the child fragment is backed by a render object or an
/// incomplete semantics fragment.  ¿“æ¿“√¿“√ ¿“’¿“i,¿“Ö¿“Ö    ¿“ô!¿“¥¿“¥    ¿“ﬂ5¿“‰¿“‰  ¿”¿”¿”
    ¿”Ç„¿‘≠¿‘≠Åé/// A fragment that is generated from
/// [SemanticsConfiguration.childConfigurationsDelegate]
///
/// A render object can choose to add additional semantics config to be merged
/// upward besides itself. These configs can be added through
/// [SemanticsConfiguration.childConfigurationsDelegate] and will form
/// `_IncompleteSemanticsFragment`s
///
/// See [RenderParagraph] for an example usage. ¿‘È?¿‘È ¿‘È¿’  ¿’¿’¿’  ¿’
¿’"¿’!   ¿’,8¿’U¿’U ¿’,¿’-¿’i.¿’í¿’í ¿’i¿’j ¿’ú]¿’≠¿’≠  ¿’Œ¿’‘¿’”  ¿’ú¿’ù ¿÷Å¿ ï≈¿ﬂ»¿ﬂ»â@/// A wrapper class for a [RenderObject] that provides semantics related
/// properties and compilations.
///
/// ## A high level summary
///
/// The [PipelineOwner.flushSemantics] calls the [updateChildren] to
/// build/update a tree of [_RenderObjectSemantics] by querying dirty
/// RenderObjects about their [SemanticsConfiguration] and updating the
/// _RenderObjectSemantics of the render objects according to these information.
/// While doing that, [updateChildren] also decide what
/// _RenderObjectSemantics will have their own SemanticsNode later on.
/// After that, [PipelineOwner.flushSemantics] calls [ensureGeometry] to
/// calculate the geometries for these _RenderObjectSemantics. Finally,
/// [ensureSemanticsNode] compiles these _RenderObjectSemantics into the actual
/// SemanticsNodes that form the semantics tree.
///
/// ## Steps Breakdown
///
/// The _RenderObjectSemantics tree is compiled in four phases. Phase 1 and 2
/// are done in [updateChildren], Phase 3 is done in [ensureGeometry], and phase
/// 4 is done in [ensureSemanticsNode].
///
/// ### Phase 1
///
/// Gather all the merge up _RenderObjectSemantics(s) by walking the rendering
/// object tree.
///
/// They are stored in [mergeUp] and [siblingMergeGroups] and should mimic
/// rendering object tree closely but only contain [_RenderObjectSemantics] that
/// contributes to semantics tree. i.e. where [contributesToSemanticsTree] is
/// true.
///
/// ### Phase 2
///
/// Merge all fragments from [mergeUp] and decide which [_RenderObjectSemantics]
/// should form a node, i.e. [shouldFormSemanticsNode] is true. Stores the
/// [_RenderObjectSemantics] that should form a node with elevation adjustments
/// into [_childrenAndElevationAdjustments].
///
/// At this point, walking the [_childrenAndElevationAdjustments] forms a tree
/// that exactly resemble the resulting semantics node tree.
///
/// ### Phase 3
///
/// Walks the [_childrenAndElevationAdjustments] and calculate their
/// [_SemanticsGeometry] based on renderObject relationship.
///
/// ### Phase 4
///
/// Walks the [_childrenAndElevationAdjustments] and produce semantics node for
/// each [_RenderObjectSemantics] plus the sibling nodes.
///
/// Phase 2, 3, 4 each depends on previous step to finished updating the the
/// entire _RenderObjectSemantics tree. All three of them require separate tree
/// walk. ¿‡o¿‡ ¿‡¿‡1  ¿‡2¿‡8¿‡7  ¿‡Z¿‡K¿‡\¿‡{¿‡à¿‡|¿‡éS¿‡’¿‡’1/// The owning rendering object for this wrapper. ¿‡Ê ¿‡Î¿‡Î ¿·¿·
¿·¿·  ¿·* ¿·1¿·1 ¿·G¿‚ú(¿‚°¿‚° ¿‚ø¿‚…¿‚Œ¿‚Œ ¿‚÷¿‚‡Å·¿‰Æ¿‰ÆÅ®/// The cached node created directly by this Object.
///
/// This cache is filled after the this object is compiled (usually by
/// calling [ensureSemanticsNode] on this object or ancestors) and forms a
/// semantics node.
///
/// Caching the semantics node ensures the id is consistent in the life time
/// of this object.
///
/// `_RenderSemanticsObject` only forms semantics node if
/// `shouldFormSemanticsNode` is true. ¿‰∆Å·¿ÊÖ¿ÊÖÅî/// The semantics nodes produced by this render object.
///
/// This is filled after [ensureSemanticsNode] is called on this object or
/// ancestors when [shouldFormSemanticsNode] is true. In most cases, this only
/// contains one semantics node equals to [cachedSemanticsNode].
///
/// If there are [siblingMergeGroups], the nodes produced from the sibling
/// merge groups are also stored in this list.¿Ê•¿Ê¶¿Êñ¿Ê§¿Êó¿Ê¨Äà¿Á¿ÁF/// Fragments that will merge up to parent rendering object semantics.¿Á2¿Á3¿Á¿Á1¿Á¿Á9Ä˛¿ÁÏ¿ÁÏÄÑ/// A map that record immediate child [_RenderObjectSemantics]s that will form
/// semantics nodes with their elevation adjustments.¿Ë5¿Ë6¿Ë¿Ë4¿Ë¿Ë.¿Ë<Äí¿Ëù¿Ëù9/// Merge groups that will form additional sibling nodes.¿ËÃ¿ËÕ¿Ë≤¿ËÀ¿Ë≥¿Ë∑¿Ë ¿Ë∏¿Ë“ÄÖ¿È¿È 	¿ÈU¿ÈV¿È,¿ÈT¿È-¿È<¿È@¿ÈS¿ÈA¿È\ ¿Èr¿Èr  ¿ÈÄ¿Èî¿Èî  ¿È°4¿È«¿È«  ¿È⁄5¿Í¿Í   ¿È⁄¿È€¿Íi¿Í¿Í    ¿ÍÄÅ¿Î5¿Î5Äà/// If this forms a semantics node, all of the properties in config are
/// used in creating the node. There is nothing to be merged up.  ¿Î¿Î¿ÎåÄœ¿Îï¿Îï    ¿Ï_8¿Ïh¿Ïh    ¿ÏõÅÚ¿Ï§¿Ï§    ¿ÔœÉõ¿Ë¿ËÅ/// Whether this render object semantics will block other render object
/// semantics behind it in render object order from parent.
///
/// The [BlockSemantics] widget will cause this property to be true and hide
/// any sibling widget behind it from semantics.   ¿ÓëÅ:¿Óù¿Óù  ¿Óµ¿Ó√¿Ó¬   ¿Ûn8¿Ûs¿Ûs  ¿Û~¿Ûç¿Ûå   ¿Û™Ç=¿ÛØ¿ÛØ    ¿ıÎë§¿˘¬¿˘¬É´/// Updates the [parentData] for the [_RenderObjectSemantics]s in the
/// rendering subtree and forms a [_RenderObjectSemantics] tree where children
/// are stored in [_childrenAndElevationAdjustments].
///
/// This method does the the phase 1 and 2 of the four phases documented on
/// [_RenderObjectSemantics].
///
/// Gather all the merge up _RenderObjectSemantics(s) by walking the rendering
/// object tree.
///
/// They are stored in [mergeUp] and [siblingMergeGroups] and should mimic
/// rendering object tree closely but only contain [_RenderObjectSemantics] that
/// contributes to semantics tree. i.e.
/// [contributesToSemanticsTree] is true.
///
/// Merge all fragments from [mergeUp] and decide which [_RenderObjectSemantics]
/// should form a node. i.e. [shouldFormSemanticsNode] is true. Stores the
/// [_RenderObjectSemantics] that should form a node with elevation adjustments
/// into [_childrenAndElevationAdjustments].   ¿ìÅr¿∞¿∞    ¿		Ç¿	¿	    ¿%ì¶¿C¿C  ¿l$¿Ç¿Å   ¿œÅ ¿‘¿‘  ¿È"¿ˇ¿˛   ¿ÛÄ‘¿ n¿ ne/// Makes whether this fragment has a sibling fragment with conflicting
/// [SemanticsConfiguration]. ¿ è¿ ï¿ î  ¿ ]¿ ^¿ ÀÇ∏¿"w¿"wÅî/// Updates the [geometry] for this [_RenderObjectSemantics]s and its subtree
/// in [_childrenAndElevationAdjustments].
///
/// This method does the the phase 3 of the four phases documented on
/// [_RenderObjectSemantics].
///
/// This method is short-circuited if the subtree geometry won't
/// be affect after the update. (e.g. the size doesn't change, or new clip
/// rect doesn't clip the content).   ¿#áÅˆ¿#å¿#å    ¿%ÅÇå¿%Ü¿%Ü  ¿%ó'¿%¥¿%≥   ¿(Éˇ¿*¿*ÅË/// Ensures the semantics nodes from this render object semantics subtree are
/// generated and up to date.
///
/// This method does the the phase 4 of the four phases documented on
/// [_RenderObjectSemantics].
///
/// This can only be called if the owning rendering object is a semantics
/// boundary. For non boundary rendering objects, they require semantics
/// information from both their parent and child rendering objects to update
/// its cache, so it can't update by themselves.   ¿,Ü:¿-¿-Äﬂ/// Builds the semantics node and its semantics node subtree.
///
/// This method will in turn call [_buildSemanticsSubtree].
///
/// This method will short-circuit itself if [cachedSemanticsNode] is
/// already up-to-date. ¿-"¿-)¿-(   ¿2RÖ¿2õ¿2õA/// Builds the semantics subtree under the [cachedSemanticsNode]. ¿2∏"¿2À¿2   ¿2‡#¿2Ò¿2  ¿3	#¿3¿3   ¿7YÇD¿7^¿7^  ¿7u"¿7à¿7á   ¿9°Å&¿9Ø¿9Ø    ¿:Àà˚¿:–¿:–  ¿:„¿:Ì¿:Ï   ¿C Ñr¿D~¿D~Ä¶/// Updates the semantics geometry of the cached semantics node.
///
/// Returns true if geometry changes that may result in children's geometries
/// change as well.   ¿H@àg¿HE¿HE    ¿P´è¿PÓ¿PÓ;/// The [renderObject]'s semantics information has changed.   ¿_∫Ñ8¿_ø¿_ø  ¿_€#¿_ı¿_Ù  ¿`¿`¿`  ¿`¿cˆÅ¿¿dD¿dDF/// Removes any cache stored in this object as if it is newly created.   ¿e∫Ä—¿e‹¿e‹   ¿e∫¿eª¿fèÖµ¿f≠¿f≠  ¿f¡&¿fﬁ¿f›  ¿fè¿fê¿fú¿fù ¿n|û'¿oe¿oeÄ—/// Helper class that keeps track of the geometry of a [SemanticsNode].
///
/// It is used to annotate a [SemanticsNode] with the current information for
/// [SemanticsNode.rect] and [SemanticsNode.transform]. ¿o|Ä¯¿o≈ ¿o≈¿o◊ @/// The `paintClipRect` may be null if no clip is to be applied.¿oﬁ¿oÌ¿oÏ  ¿oˇ¿p¿p  ¿p$¿p3¿p2  ¿pA¿pP¿pO  ¿pY¿ph¿pg   ¿pxÄ‹¿pÄ¿pí¿pì¿pó¿pì ¿pò	¿pû¿pù   ¿qXB¿që¿që(/// Value for [SemanticsNode.transform]. ¿qüV¿q‰¿q‰6/// Value for [SemanticsNode.parentSemanticsClipRect]. ¿q˙N¿r;¿r;2/// Value for [SemanticsNode.parentPaintClipRect]. ¿rM5¿r~¿r~#/// Value for [SemanticsNode.rect]. ¿ráÄñ¿s¿sÄÄ/// Whether the semantics node is completely clipped from ui, i.e. by
/// paintClipRect, but is still present in semantics tree. ¿Üã?¿Ü†¿Ü† ¿Üº¿Ü√¿Üƒ¿Ü»¿Ü… ¿s"ê˘¿s<¿s<  ¿sW!¿sj¿si  ¿s~"¿sé¿sç  ¿s¶&¿s∂¿sµ  ¿s“&¿sÛ¿sÚ  ¿s˛%¿t¿t   ¿ÑÅ)¿ÑZ¿ÑZ+/// From parent to child coordinate system. ¿Ñi
¿Ñp¿Ño  ¿Ñu¿Ñ~¿Ñ}   ¿áÁÑ6¿à¿à  ¿à¿à*¿à)  ¿à5¿àC¿àB  ¿àM¿àT¿àS  ¿àp¿àw¿àv   ¿å!ÄÄ¿å.¿å.  ¿å>¿åE¿åD  ¿åG¿åN¿åM   ¿oN¿oO¿å•Ç0¿çΩ¿çΩÅ/// A class that creates [DiagnosticsNode] by wrapping [RenderObject.debugCreator].
///
/// Attach a [DiagnosticsDebugCreator] into [FlutterErrorDetails.informationCollector]
/// when a [RenderObject.debugCreator] is available. This will lead to improved
/// error message. ¿ç˝Ä÷¿ék ¿ék¿éÇ i/// Create a [DiagnosticsProperty] with its [value] initialized to input
/// [RenderObject.debugCreator].¿éÉ¿éã¿éä  
¿éó¿éú¿é—¿éù¿é≠¿éπ¿é¥¿éª¿é ¿éÀ         ¿lHÄí¿ly¿ly+/// Dumps the render object semantics tree.   ¿l‹ÅK¿l„¿l„     áPÅhàhàhÅ/// Signature for painting into a [PaintingContext].
///
/// The `offset` argument is the offset from the origin of the coordinate system
/// of the [PaintingContext.canvas] to the coordinate system of the callee.
///
/// Used by many of the methods of [PaintingContext].  àêà°à†  à©à±à∞   ¿ äÄ‡¿ ä¥¿ ä¥Äü/// Signature for a function that is called for each [RenderObject].
///
/// Used by [RenderObject.visitChildren] and [RenderObject.visitChildrenForSemantics].  ¿ äÿ¿ äÊ¿ äÂ   ¿ äÓÄΩ¿ ãf¿ ãfo/// Signature for a function that is called during layout.
///
/// Used by [RenderObject.invokeLayoutCallback].¿ ãu¿ ãu¿ ãu ¿ ãú¿ ãü¿ ãû   ¿ ¯Ä¥¿ ¯Ü¿ ¯Üq/// Signature for the callback to [PipelineOwner.visitChildren].
///
/// The argument is the child being visited.  ¿ ¯´¿ ¯∫¿ ¯π   ¿’˝ÄÇ¿÷¿÷     ¿n)Q¿n1¿n1     ¿h≥ä®¿iÊ¿iÊÅ,/// Generic mixin for render objects with one child.
///
/// Provides a child model for a render object subclass that has
/// a unique child, which is accessible via the [child] getter.
///
/// This mixin is typically used to implement render objects created
/// in a [SingleChildRenderObjectWidget].¿j¿j¿j ¿oÚ¿o˝¿o˝  ¿pG¿p?¿p?%/// The render object's unique child.   ¿pRÄ™¿pV¿pV  ¿p\¿ph¿pg   ¿j5Öπ¿k¿kÄø/// Checks whether the given render object has the correct [runtimeType] to be
/// a child of this render object.
///
/// Does nothing if assertions are disabled.
///
/// Always returns true. ¿k¿k'¿k&   ¿q f¿q¿q  ¿q¿q'¿q&  ¿q ¿q¿qjI¿q{¿q{   ¿qj¿qk¿q∑e¿q»¿q»   ¿q∑¿q∏¿r y¿r1¿r1  ¿r?¿rT¿rS  ¿r ¿r!¿rùÄº¿rø¿rø   ¿rù¿rû ¿s]åÒ¿x≈¿x≈Öa/// A mixin for managing [RenderObject] with a [layoutCallback], which will be
/// invoked during this [RenderObject]'s layout process if scheduled using
/// [scheduleLayoutCallback].
///
/// A layout callback is typically a callback that mutates the [RenderObject]'s
/// render subtree during the [RenderObject]'s layout process. When an ancestor
/// [RenderObject] chooses to skip laying out this [RenderObject] in its
/// [performLayout] implementation (for example, for performance reasons, an
/// [Overlay] may skip laying out an offstage [OverlayEntry] while keeping it in
/// the tree), normally the [layoutCallback] will not be invoked because the
/// [layout] method will not be called. This can be undesirable when the
/// [layoutCallback] involves rebuilding dirty widgets (most notably, the
/// [LayoutBuilder] widget). Unlike render subtrees, typically all dirty widgets
/// (even off-screen ones) in a widget tree must be rebuilt. This mixin makes
/// sure once scheduled, the [layoutCallback] method will be invoked even if it's
/// skipped by an ancestor [RenderObject], unless this [RenderObject] has never
/// been laid out.
///
/// Subclasses must not invoke the layout callback directly. Instead, call
/// [runLayoutCallback] in the [performLayout] implementation.
///
/// See also:
///
///  * [LayoutBuilder] and [SliverLayoutBuilder], which use the mixin.  ¿yÍ¿yÔ¿yÔ ¿yˇ ¿zÅ7¿{.¿{.Ä˛/// The layout callback to be invoked during [performLayout].
///
/// This method should not be invoked directly. Instead, call
/// [runLayoutCallback] in the [performLayout] implementation. This callback
/// will be invoked using [invokeLayoutCallback].  ¿{¿{¿{CÅë¿|K¿|KÄÁ/// Invokes [layoutCallback] with [invokeLayoutCallback].
///
/// This method must be called in [performLayout], typically as early as
/// possible before any layout work is done, to avoid re-dirtying any child
/// [RenderObject]s.  ¿|5¿|6¿|ÿÉt¿}›¿}›ÄË/// Informs the framework that the layout callback has been updated and must be
/// invoked again when this [RenderObject] is ready for layout, even when an
/// ancestor [RenderObject] chooses to skip laying out this render subtree.  ¿}«¿}» ¿ÄPÉc¿Åå¿ÅåÅ5/// Parent data to support a doubly-linked list of children.
///
/// The children can be traversed using [nextSibling] or [previousSibling],
/// which can be called on the parent data of the render objects
/// obtained via [ContainerRenderObjectMixin.firstChild] or
/// [ContainerRenderObjectMixin.lastChild].¿Å•¿Å•¿Å• ¿Å◊Q¿Ç¿Ç4/// The previous sibling in the parent's child list. ¿Ç-I¿Çk¿Çk0/// The next sibling in the parent's child list.  ¿Ç{Å6¿ÇÆ¿ÇÆ/// Clear the sibling pointers.  ¿Çù¿Çû ¿ÉµÆñ¿áó¿áóÉ€/// Generic mixin for render objects with a list of children.
///
/// Provides a child model for a render object subclass that has a doubly-linked
/// list of children.
///
/// The [ChildType] specifies the type of the children (extending [RenderObject]),
/// e.g. [RenderBox].
///
/// [ParentDataType] stores parent container data on its child render objects.
/// It must extend [ContainerParentDataMixin], which provides the interface
/// for visiting children. This data is populated by
/// [RenderObject.setupParentData] implemented by the class using this mixin.
///
/// When using [RenderBox] as the child type, you will usually want to make use of
/// [RenderBoxContainerDefaultsMixin] and extend [ContainerBoxParentData] for the
/// parent data.
///
/// Moreover, this is a required mixin for render objects returned to [MultiChildRenderObjectWidget].
///
/// See also:
///
///  * [SlottedContainerRenderObjectMixin], which organizes its children
///    in different named slots.¿áµ¿áµ¿áµ¿á◊:¿á◊¿á◊ ¿ãR¿ãV¿ãV ¿ãd¿ëk¿ëv¿ëv  ¿ëÖ¿ëê¿ëê  ¿ãj@¿ãê¿ãê/// The number of children.   ¿≠_R¿≠ó¿≠ó&/// The first child in the child list.   ¿≠µO¿≠Ï¿≠Ï%/// The last child in the child list.   ¿à,Åó¿à1¿à1  ¿àQ¿à\¿à[  ¿àc¿ào¿àn   ¿â«Åá¿âÃ¿âÃ  ¿âË¿âÛ¿âÚ  ¿â˙¿ä¿ä   ¿ãÆÖπ¿å¿åÄø/// Checks whether the given render object has the correct [runtimeType] to be
/// a child of this render object.
///
/// Does nothing if assertions are disabled.
///
/// Always returns true. ¿åí¿å†¿åü   ¿ëûá‚¿ë£¿ë£  ¿ë∏¿ë√¿ë¬  ¿ë ¿ë÷¿ë’   ¿ôÑÑ¿ö`¿ö`ÄŒ/// Insert child into this render object's child list after the given child.
///
/// If `after` is null, then this inserts the child at the start of the list,
/// and the child becomes the new [firstChild]. ¿ög¿ör¿öq  ¿öy¿öÖ¿öÑ   ¿ùìÄá¿ù⁄¿ù⁄?/// Append child to the end of this render object's child list. ¿ùﬁ¿ùÈ¿ùË   ¿ûÄí¿ûm¿ûmG/// Add all the children to the end of this render object's child list. ¿ût¿ûÜ¿ûÖ   ¿û¥Ñq¿ûπ¿ûπ  ¿ûŒ¿ûŸ¿ûÿ   ¿£)Ä∆¿£õ¿£õf/// Remove this child from the child list.
///
/// Requires the child to be present in the child list. ¿£¢¿£≠¿£¨   ¿£ÛÇ3¿§z¿§z{/// Remove all their children from this render object's child list.
///
/// More efficient than removing them individually.   ¿¶*ÇÃ¿ßT¿ßTÅ/// Move the given `child` in the child list to be after another child.
///
/// More efficient than removing and re-adding the child. Requires the child
/// to already be in the child list at some position. Pass null for `after` to
/// move the child to the start of the child list. ¿ßY¿ßd¿ßc  ¿ßk¿ßw¿ßv   ¿®˙Å)¿©¿©  ¿©¿©!¿©   ¿®˙¿®˚¿™'Å¿™8¿™8   ¿™'¿™(¿´7Å¿´H¿´H   ¿´7¿´8¿¨AÅ¿¨R¿¨R  ¿¨`¿¨u¿¨t  ¿¨A¿¨B¿ÆÅ¿ÆV¿ÆV@/// The previous child before the given child in the child list. ¿Æb¿Æm¿Æl   ¿ØÅ¿Øc¿Øc;/// The next child after the given child in the child list. ¿Øn¿Øy¿Øx   ¿∞"Ç'¿∞D¿∞D   ¿∞"¿∞# ¿≤Mä¿≥Å¿≥ÅÅ-/// Mixin for [RenderObject] that will call [systemFontsDidChange] whenever the
/// system fonts change.
///
/// System fonts can change when the OS installs or removes a font. Use this
/// mixin if the [RenderObject] uses [TextPainter] or [Paragraph] to correctly
/// update the text when it happens.  ¿∂\4¿∂a¿∂a ¿∂ã ¿≥∏Ç†¿∂%¿∂%Ç1/// A callback that is called when system fonts have changed.
///
/// The framework defers the invocation of the callback to the
/// [SchedulerPhase.transientCallbacks] phase to ensure that the
/// [RenderObject]'s text layout is still valid when user interactions are in
/// progress (which usually take place during the [SchedulerPhase.idle] phase).
///
/// By default, [markNeedsLayout] is called on the [RenderObject]
/// implementing this mixin.
///
/// Subclass should override this method to clear any extra cache that depend
/// on font-related metrics.  ¿∂¿∂¿∂¿∂¿∂îÉO¿∂ô¿∂ô    ¿πÁÅæ¿π¯¿π¯  ¿πˇ¿∫¿∫  ¿πÁ¿πË¿ª©Äæ¿ª∫¿ª∫   ¿ª©¿ª™     ÄÆ  dart:ui  ÄÃ  package:flutter/widgets.dart  Äˇ  box.dart  Å  paragraph.dart  Å;  proxy_box.dart  Å\  	view.dart  Åx  viewport.dart ós <ÄÜÄ§Ä•ÄøÄ√ÄÚÄˆÅÅ2ÅSÅoÅèÅòÅôÅ∆Å«ÅÇÇBÇjÇìÇºÇΩÇ‘ÇÈÇ˛ÇˇÉ(É1ÉVÉoÉåÉ§É∫É‘ÉÁÉ˝ÑÑ)ÑGÑ\ÑtÑΩÑÂÑÊÖ.Ö2Ö|ÖƒÖ¯Ö¸Ü
ÜÜYÜûÜ±ÜÓÜ˚ááá á,áMáOáPáÖáâá⁄à&à*à`àπà∫à–à‘â&âkâµâ…âÕäänäæãã"ã&ãmã´ã◊ã˘ãˇåGå^åkå™å´å”å‘ç!çhçnç©çØç˚éééAéGéíéﬂè0èLèRèbèhè∏èŸê;êZêÆê≤ê≥ê⁄êÙëë@ëGëlë|ë≥ë‚íí/í8íKíUíùíªí·ììì_ì™ìıîîiîûî´îËïïïEïZïfïåïÊïÙñ!ñuñÿó#ó,óaógóñóóó‘ò	òòcòvòÄòÅò∆ò˛òˇôNôÇôøôÈôÌôÓö<öBöçö⁄õ(õcõiõyõõœõú*úlúåú∫úªùù$ù4ù^ùqù{ù”ùﬂû
û\ûΩüüü@üoüsütü¡††E†K†[†a†Æ†»†˝°°@°l°s°É°¢°±°È¢¢¢*¢4¢8¢9¢]¢c¢±£ £P£á£ó£ø£“£‹£›§ §§E§ì§‹••?•f•ì•†•Õ•”•◊•ÿ¶¶/¶T¶ë¶í¶‘ßßRß_ßéß¥ßºßŒ®®:®à®ù®©®Ø®‰©7©]©Ä©Ñ©Ö©—©‡©Ê™/™u™¢™®™ı´´´7´R´f´â´ç´é´®´‘´‰´˚¨"¨E¨f¨u¨ú¨ø¨‡¨Ë¨˚≠≠≠≠ ≠5≠T≠u≠à≠â≠≠≠≥≠˝ÆGÆfÆrÆàÆ£ÆºÆ¬ÆÂÆ˙Æ˛ÆˇØØ5ØhØ™ØÎ∞∞∞∞m∞|∞Ç∞–±±h±®±Æ±Í±≤ ≤+≤q≤Æ≤≤≤≥≤Ó≤Ù≥@≥è≥ﬁ≥Î≥Ò¥@¥ã¥ù¥™¥ª¥‹¥ıµµ	µµAµ]µqµûµ¿µ¸∂:∂B∂m∂â∂ù∂ ∂Ï∑∑N∑V∑i∑s∑´∑≈∑€∑Ô∑Û∑Ù∏D∏X∏^∏≠∏ˆπππVπ¶πÚ∫∫0∫Q∫j∫p∫ô∫ù∫û∫Ò∫˜ªGªêª›ººº`º∞º¸ΩΩ;Ω\ΩuΩ{Ω•Ω©Ω™ΩﬂΩÂæ6æqæwæƒøøfø¨ø≤ø¬ø»¿ @¿ @#¿ @B¿ @_¿ @w¿ @{¿ @|¿ @Õ¿ A¿ Al¿ Aé¿ Aî¿ A„¿ B'¿ B;¿ BA¿ BÜ¿ B÷¿ C&¿ Ct¿ C∑¿ CÃ¿ C“¿ D#¿ Dt¿ D¡¿ E¿ Eb¿ E†¿ E¶¿ E∂¿ Eº¿ F¿ F¿ F-¿ FL¿ Fq¿ FÜ¿ F¢¿ F©¿ F˜¿ GH¿ Gj¿ Gê¿ Gñ¿ G≥¿ G–¿ H¿ H¿ HJ¿ HQ¿ HR¿ Hu¿ Hü¿ H£¿ H§¿ HÏ¿ HÚ¿ I8¿ IE¿ Iî¿ Iƒ¿ I»¿ I…¿ I¯¿ I˛¿ JP¿ Jò¿ Jœ¿ K¿ Kk¿ K©¿ KÌ¿ KÛ¿ LA¿ LÖ¿ Lö¿ L†¿ LË¿ M1¿ Mz¿ Mè¿ Mï¿ MÊ¿ N.¿ N>¿ ND¿ Nî¿ N’¿ N€¿ O$¿ O*¿ Ot¿ O¡¿ P¿ PU¿ P•¿ PÌ¿ Q9¿ Qo¿ QÑ¿ Q£¿ Qæ¿ Q—¿ Q‰¿ R¿ R2¿ RO¿ RV¿ R{¿ Rò¿ R´¿ R±¿ RÈ¿ S¿ SD¿ SP¿ St¿ Sõ¿ SÊ¿ S˙¿ T¿ Tj¿ T}¿ TÉ¿ Tá¿ Tà¿ Tø¿ T≈¿ U¿ U¿ U_¿ Ue¿ Uµ¿ U¯¿ U˛¿ VN¿ Vô¿ V¿¿ V∆¿ W¿ WY¿ W_¿ W∞¿ W∂¿ W˝¿ X¿ X9¿ XL¿ X]¿ Xr¿ Xô¿ X¡¿ Xﬂ¿ XÊ¿ Y¿ Y(¿ Y;¿ YA¿ Yu¿ Y∞¿ YÃ¿ Z¿ Z¿ Z?¿ Zf¿ ZØ¿ Z√¿ Z–¿ [3¿ [F¿ [L¿ [P¿ [Q¿ [ã¿ [ë¿ [‡¿ [Ê¿ \+¿ \1¿ \Å¿ \ƒ¿ \ ¿ ]%¿ ]p¿ ]ó¿ ]ù¿ ]ˆ¿ ^@¿ ^F¿ ^ó¿ ^ù¿ ^Ì¿ ^Û¿ _:¿ _k¿ _Ü¿ _ô¿ _™¿ _œ¿ _ˆ¿ `¿ `D¿ `K¿ `p¿ `ç¿ `†¿ `¶¿ `⁄¿ a!¿ a=¿ aé¿ aö¿ aƒ¿ aÎ¿ b4¿ bH¿ bU¿ bv¿ bã¿ b°¿ b∑¿ b‹¿ bÂ¿ b¯¿ b˛¿ c¿ c¿ c-¿ c3¿ cÇ¿ cà¿ cÕ¿ c”¿ d#¿ df¿ dl¿ dª¿ e¿ e"¿ e(¿ ex¿ eπ¿ eø¿ f¿ f	¿ fP¿ fo¿ fä¿ fù¿ fÆ¿ f¡¿ fË¿ g¿ g-¿ g4¿ gY¿ gv¿ gâ¿ gè¿ g√¿ g˚¿ h¿ hV¿ hb¿ hÜ¿ h≠¿ hˆ¿ i
¿ i¿ ix¿ iã¿ ië¿ iï¿ iñ¿ i»¿ iŒ¿ j¿ j¿ jg¿ jç¿ jì¿ j„¿ k*¿ k0¿ kw¿ k}¿ k ¿ l¿ ll¿ l≤¿ l÷¿ lÈ¿ m¿ m-¿ mM¿ mT¿ mó¿ mº¿ m„¿ mı¿ m˘¿ m˙¿ n+¿ n1¿ nÄ¿ nÜ¿ n◊¿ n˝¿ o¿ oO¿ o†¿ oŸ¿ oﬂ¿ p0¿ pr¿ px¿ pø¿ p‡¿ p˚¿ q¿ q%¿ qL¿ qj¿ qq¿ qò¿ q’¿ qı¿ r$¿ r@¿ rÅ¿ r≠¿ ræ¿ rÕ¿ rﬁ¿ rÓ¿ sO¿ sX¿ sl¿ sy¿ sÜ¿ só¿ s»¿ sÂ¿ s˝¿ t¿ t¿ t¿ t¿ tM¿ tS¿ t†¿ tÃ¿ t“¿ u"¿ uk¿ uª¿ u¡¿ v¿ vN¿ vT¿ võ¿ v°¿ vÓ¿ w@¿ wê¿ w÷¿ wÚ¿ x¿ x¿ x;¿ xW¿ x^¿ xô¿ x£¿ xπ¿ x“¿ x˛¿ y¿ y¿ y¿ y!¿ y8¿ y≥¿ yµ¿ y∂¿ y·¿ yÂ¿ z1¿ zr¿ zv¿ zú¿ z†¿ z¿ {<¿ {`¿ {d¿ {≥¿ |¿ |P¿ |T¿ |§¿ |Ú¿ }@¿ }ç¿ }ö¿ }û¿ }Ê¿ ~5¿ ~¿ ~¿¿ ¿ `¿ Æ¿ Ù¿ Ä¿ Ä¿ Äc¿ ÄÆ¿ Ä˝¿ ÅG¿ Å}¿ ÅÕ¿ ÅÂ¿ ÅÈ¿ Ç7¿ ÇÖ¿ Ç‘¿ ÇÓ¿ ÇÚ¿ ÉB¿ Éì¿ Éû¿ Éª¿ Ñ¿ ÑT¿ Ñk¿ Ñl¿ Ñ∂¿ Ñ ¿ ÑÀ¿ Ö¿ Ö&¿ Ö'¿ ÖU¿ Ö[¿ Öû¿ Ö§¿ ÖÛ¿ Ü¿ Ü¿ Üc¿ Ü≥¿ á¿ áK¿ áÑ¿ á’¿ à&¿ à7¿ à=¿ àã¿ àÿ¿ â¿ â¿ âY¿ âu¿ âõ¿ âÀ¿ â“¿ âÏ¿ ä¿ ä	¿ ä¿ ä¿ äQ¿ äU¿ ä¨¿ äÌ¿ äÓ¿ ã)¿ ã-¿ ã^¿ ã¨¿ ã≠¿ ãÊ¿ å7¿ åä¿ å¶¿ å€¿ å·¿ åÂ¿ åÊ¿ ç¿ ç¿ çO¿ ço¿ çp¿ ç|¿ çè¿ çΩ¿ çŸ¿ é¿ é¿ é@¿ éD¿ éF¿ éG¿ é~¿ éÇ¿ é“¿ è#¿ èp¿ èà¿ èå¿ è◊¿ ê¿ êh¿ êî¿ ê›¿ ë+¿ ë{¿ ëÃ¿ í¿ íb¿ í®¿ íˆ¿ ìA¿ ìÅ¿ ìÕ¿ î¿ îh¿ îl¿ îª¿ ï¿ ïR¿ ïp¿ ït¿ ï≈¿ ñ¿ ñb¿ ñØ¿ ñ˚¿ óI¿ óä¿ óé¿ ó⁄¿ ò(¿ òx¿ ò¬¿ òÒ¿ ô)¿ ôI¿ ôO¿ ôú¿ ôÈ¿ ö¿ ö!¿ ö>¿ ö`¿ ö|¿ öü¿ ö¶¿ öÒ¿ öı¿ öˆ¿ õF¿ õj¿ õp¿ õ¡¿ ú¿ ú[¿ úz¿ úÄ¿ ú«¿ ù¿ ù]¿ ùá¿ ùà¿ ùŒ¿ ù‘¿ û¿ û2¿ ûa¿ ûb¿ ûπ¿ ûø¿ ü¿ üA¿ üu¿ üv¿ üæ¿ üƒ¿ †¿ †5¿ †6¿ †|¿ †Ç¿ †“¿ †˘¿ °¿ °>¿ °[¿ °h¿ °ê¿ °ñ¿ °ö¿ °õ¿ °‡¿ ¢¿ ¢&¿ ¢L¿ ¢j¿ ¢x¿ ¢~¿ ¢ó¿ ¢Æ¿ ¢À¿ ¢œ¿ ¢–¿ £¿ £g¿ £§¿ £©¿ £Ú¿ §>¿ §á¿ §ø¿ §ƒ¿ • ¿ •P¿ •û¿ •Í¿ •ˇ¿ ¶&¿ ¶c¿ ¶d¿ ¶π¿ ¶ﬂ¿ ¶Â¿ ß*¿ ßs¿ ß¡¿ ®¿ ®¿ ®^¿ ®d¿ ®≤¿ ®ø¿ ®Õ¿ ©¿ ©¿ ©T¿ ©Z¿ ©ö¿ ©†¿ ©„¿ ©ˇ¿ ™1¿ ™S¿ ™z¿ ™{¿ ™Ω¿ ™√¿ ´¿ ´^¿ ´î¿ ´ö¿ ´„¿ ´˙¿ ¨¿ ¨F¿ ¨X¿ ¨ã¿ ¨¿¿ ¨¸¿ ≠.¿ ≠;¿ ≠E¿ ≠Z¿ ≠f¿ ≠á¿ ≠ø¿ ≠Í¿ ≠Û¿ ≠˘¿ Æ	¿ Æ)¿ Æ<¿ ÆF¿ ÆP¿ Æ¿ Æ®¿ ÆÎ¿ Ø¿ Øk¿ Ø°¿ Ø…¿ Øı¿ ∞'¿ ∞|¿ ∞ë¿ ∞ü¿ ∞´¿ ∞ﬁ¿ ±¿ ±@¿ ±L¿ ±V¿ ±°¿ ±ƒ¿ ±Ï¿ ±Ù¿ ±ı¿ ≤¿ ≤.¿ ≤C¿ ≤O¿ ≤Ñ¿ ≤°¿ ≤©¿ ≤∑¿ ≤‹¿ ≥"¿ ≥+¿ ≥;¿ ≥a¿ ≥s¿ ≥ñ¿ ≥æ¿ ≥”¿ ≥ﬂ¿ ≥˙¿ ¥ ¿ ¥(¿ ¥.¿ ¥2¿ ¥3¿ ¥Å¿ ¥“¿ µ¿ µn¿ µõ¿ µœ¿ µ–¿ µ˛¿ ∂>¿ ∂]¿ ∂q¿ ∂Å¿ ∂∑¿ ∂È¿ ∂¸¿ ∑¿ ∑¿ ∑"¿ ∑2¿ ∑W¿ ∑i¿ ∑¢¿ ∑∑¿ ∑√¿ ∑…¿ ∑Õ¿ ∑Œ¿ ∏ ¿ ∏!¿ ∏Y¿ ∏_¿ ∏≠¿ ∏¡¿ ∏·¿ ∏˙¿ π^¿ πd¿ π»¿ ∫¿ ∫V¿ ∫}¿ ∫Ö¿ ∫ã¿ ∫ª¿ ∫Ó¿ ª¿ ª¿ ª$¿ ªV¿ ªö¿ ª°¿ ª∫¿ ªﬁ¿ ª‰¿ ªË¿ ªÈ¿ º%¿ º&¿ ºx¿ º~¿ ºÀ¿ Ω ¿ Ωh¿ ΩΩ¿ Ω—¿ Ω◊¿ æ¿ æ+¿ æ9¿ æ¿ æÄ¿ æΩ¿ æ√¿ ø¿ ø¿ øF¿ øg¿ øó¿ ø∏¿ øπ¿ ø¿ øˆ¿ ¿?¿ ¿è¿ ¿‡¿ ¿Ê¿ ¡/¿ ¡E¿ ¡^¿ ¡ë¿ ¡£¿ ¡’¿ ¬
¿ ¬E¿ ¬v¿ ¬É¿ ¬ç¿ ¬¢¿ ¬Æ¿ ¬œ¿ √¿ √1¿ √:¿ √@¿ √J¿ √\¿ √}¿ √í¿ √û¿ √ﬁ¿ ƒ¿ ƒ¿ ƒL¿ ƒo¿ ƒ«¿ ƒ¯¿ ≈T¿ ≈á¿ ≈≥¿ ≈◊¿ ∆¿ ∆(¿ ∆c¿ ∆q¿ ∆Ñ¿ ∆∞¿ ∆º¿ ∆∆¿ ∆Œ¿ «¿ «¿ «'¿ «5¿ «Y¿ «ü¿ «®¿ «∏¿ « ¿ «Ï¿ »¿ »¿ »(¿ »N¿ »V¿ »\¿ »`¿ »a¿ »Æ¿ »¥¿ …¿ …U¿ …Ü¿ …–¿  ¿  g¿  y¿  ¿  »¿  Â¿ À¿ ÀA¿ ÀB¿ ÀT¿ ÀZ¿ À¶¿ Àˆ¿ Ã5¿ ÃD¿ Ãä¿ Ãª¿ Ãˆ¿ Ã˙¿ ÕF¿ Õn¿ Õo¿ ÕÅ¿ Õá¿ Õ“¿ Œ"¿ Œ[¿ Œj¿ Œﬁ¿ œ5¿ œp¿ œt¿ œ≤¿ œŸ¿ œˆ¿ –*¿ –.¿ –/¿ –P¿ –¶¿ –À¿ –€¿ — ¿ —^¿ —i¿ —∫¿ —„¿ —Î¿ “¿ “7¿ “U¿ “}¿ “É¿ “á¿ “à¿ “Æ¿ “”¿ “˙¿ ”¿ ”¿ ”¿ ”A¿ ”Ü¿ ”á¿ ””¿ ”·¿ ”Á¿ ‘¿ ‘e¿ ‘k¿ ‘∏¿ ‘Û¿ ’2¿ ’8¿ ’Å¿ ’–¿ ’Î¿ ÷¿ ÷(¿ ÷6¿ ÷<¿ ÷U¿ ÷©¿ ÷Ø¿ ÷‘¿ ÷‰¿ ◊¿ ◊¿ ◊$¿ ◊.¿ ◊Ä¿ ◊—¿ ÿ¿ ÿK¿ ÿ{¿ ÿú¿ ÿ¯¿ Ÿ¿ Ÿ[¿ ŸÅ¿ Ÿú¿ Ÿ€¿ Ÿ„¿ ⁄¿ ⁄J¿ ⁄Ä¿ ⁄÷¿ €(¿ €w¿ €ñ¿ €£¿ €Ù¿ ‹E¿ ‹Y¿ ‹c¿ ‹ç¿ ‹ï¿ ‹∞¿ ‹÷¿ ‹ﬁ¿ ‹ﬂ¿ ‹Ò¿ ›-¿ ›M¿ ›í¿ ›ú¿ ›±¿ ›Ω¿ ›æ¿ ›Ÿ¿ ﬁ¿ ﬁ ¿ ﬁX¿ ﬁá¿ ﬁ£¿ ﬁ∑¿ ﬁ¡¿ ﬁÎ¿ ﬁÛ¿ ﬂ¿ ﬂ4¿ ﬂ<¿ ﬂ=¿ ﬂX¿ ﬂú¿ ﬂ§¿ ﬂÂ¿ ‡¿ ‡0¿ ‡D¿ ‡N¿ ‡}¿ ‡Ö¿ ‡†¿ ‡∆¿ ‡Œ¿ ‡œ¿ ‡˝¿ ·2¿ ·R¿ ·Z¿ ·h¿ ·ê¿ ·÷¿ ·ﬂ¿ ·Ô¿ ‚¿ ‚'¿ ‚<¿ ‚H¿ ‚c¿ ‚â¿ ‚ë¿ ‚ó¿ ‚õ¿ ‚ú¿ ‚®¿ ‚⁄¿ ‚¯¿ „F¿ „M¿ „Q¿ „R¿ „^¿ „£¿ „Œ¿ ‰/¿ ‰3¿ ‰4¿ ‰I¿ ‰J¿ ‰Ñ¿ ‰£¿ ‰§¿ ‰√¿ Â¿ Â)¿ Â:¿ Â>¿ Â?¿ Âú¿ Âù¿ ÂÍ¿ Â¿ Ê;¿ Êä¿ Ê≠¿ Êÿ¿ Ê˜¿ Á¿ ÁD¿ Áa¿ Áb¿ Áï¿ Á≥¿ Áπ¿ ÁΩ¿ Áæ¿ ÁÎ¿ ÁÒ¿ Ë<¿ Ëç¿ ËØ¿ Ë¡¿ Ë‡¿ È¿ È,¿ È{¿ ÈÃ¿ Í¿ Í¿ ÍA¿ ÍW¿ Í]¿ Ía¿ Íb¿ Íß¿ ÍÓ¿ Î<¿ Îã¿ Îª¿ Ï¿ Ï	¿ Ï5¿ Ï;¿ Ïä¿ Ï◊¿ Ì$¿ Ìo¿ Ìº¿ Ó¿ Ó\¿ Ó|¿ ÓÇ¿ Ó√¿ ÓÁ¿ ÓÌ¿ Ô>¿ Ôç¿ Ôì¿ Ôæ¿ ÔÁ¿ ¿ 7¿ ê¿ ™¿ √¿ Á¿ Ì¿ Ò
¿ Ò*¿ Ò0¿ Ò4¿ Ò5¿ Ò~¿ ÒÑ¿ Ò’¿ ÒÁ¿ ÒÌ¿ Ú<¿ Úã¿ Ú≥¿ Ú€¿ Û¿ Û[¿ Ûx¿ Ûë¿ Ûµ¿ Ûª¿ Ûÿ¿ ÛÓ¿ ÛÙ¿ Û¯¿ Û˘¿ ÙA¿ ÙG¿ ÙW¿ Ù]¿ ÙÉ¿ Ù´¿ Ù‡¿ ı ¿ ı¿ ı¿ ı>¿ ıD¿ ıì¿ ı‚¿ ˆ3¿ ˆ9¿ ˆu¿ ˆà¿ ˆß¿ ˆ≈¿ ˆ‰¿ ˜¿ ˜4¿ ˜T¿ ˜p¿ ˜ë¿ ˜¡¿ ˜·¿ ¯¿ ¯	¿ ¯¿ ¯¿ ¯M¿ ¯Q¿ ¯~¿ ¯¡¿ ¯¬¿ ¯Í¿ ¯Ó¿ ˘.¿ ˘{¿ ˘ ¿ ˙¿ ˙e¿ ˙å¿ ˙ê¿ ˙‡¿ ˚1¿ ˚w¿ ˚ó¿ ˚õ¿ ˚È¿ ¸5¿ ¸m¿ ¸∏¿ ¸˙¿ ˝ ¿ ˝P¿ ˝í¿ ˝ò¿ ˝®¿ ˝Æ¿ ˝ı¿ ˛3¿ ˛P¿ ˛Q¿ ˛ü¿ ˛Ì¿ ˇ¿ ˇ¿ ˇ]¿ ˇ™¿ ˇ˜¿ ¿ ¿ c¿ ≤¿ ¿¿¿¿e¿ß¿≈¿«¿»¿Í¿Ó¿2¿R¿V¿ô¿ù¿È¿9¿Ñ¿§¿®¿Û¿A¿ä¿⁄¿'¿v¿∆¿Ì¿Ò¿5¿\¿`¿q¿u¿¬¿¿c¿}¿Å¿Õ¿¿k¿º¿˙¿˛¿	%¿	)¿	o¿	Ω¿

¿
U¿
§¿
Ú¿B¿ê¿ÿ¿'¿t¿ø¿ ¿¿S¿£¿Ù¿0¿4¿C¿G¿é¿’¿Ò¿ı¿C¿î¿‡¿-¿r¿≥¿∑¿¿:¿>¿R¿V¿°¿–¿‘¿!¿o¿¿¿¿R¿†¿Ì¿¿¿D¿H¿ô¿Í¿5¿Ö¿÷¿Ì¿Ò¿A¿Q¿U¿ï¿„¿Ù¿¯¿E¿î¿ò¿À¿œ¿!¿q¿¿¿¿V¿Z¿®¿ı¿D¿ê¿ﬂ¿.¿c¿¥¿¿¿e¿ó¿™¿Ù¿9¿f¿j¿k¿∫¿	¿T¿É¿â¿ ¿¿g¿Ü¿å¿ÿ¿ﬁ¿Ó¿Ù¿ !¿ 7¿ N¿ t¿ ä¿ ™¿ ”¿ Ì¿ ı¿ ˘¿ ˙¿! ¿!&¿!c¿!¿!ì¿!£¿!ƒ¿!◊¿!·¿!ˆ¿!˙¿!˚¿"¿"¿"S¿"Y¿"§¿"Û¿#>¿#}¿#∆¿$¿$.¿$4¿$¿$¶¿$¨¿$Ë¿$˘¿%¿%)¿%W¿%v¿%Ü¿%”¿%Â¿&¿&&¿&I¿&∑¿&≈¿&“¿&Ô¿'¿'¿'¿'¿'¿'¿'N¿'T¿'°¿'¿(@¿(~¿(Ñ¿(œ¿(˛¿)N¿)å¿)›¿*)¿*u¿*∞¿* ¿*À¿+¿+¿+b¿+ì¿+ ¿+Ò¿,¿,C¿,I¿,M¿,N¿,à¿,é¿,ﬁ¿-&¿-c¿-i¿-∑¿.¿.R¿.°¿.Á¿/7¿/=¿/Ö¿/’¿/Ù¿0¿0!¿0"¿0s¿0Ç¿0à¿0…¿0÷¿1 ¿1"¿1D¿1e¿1Ñ¿1ä¿1é¿1è¿1…¿1œ¿2 ¿2X¿2e¿2Å¿2Ç¿2Ω¿2√¿3¿3*¿3C¿3D¿3å¿3í¿3¿¿3∆¿4¿4&¿4>¿4n¿4o¿4∑¿4Ω¿5¿5_¿5p¿5}¿5•¿5»¿5ÿ¿5¯¿6¿69¿6A¿6ä¿6ù¿6ß¿6®¿6ƒ¿6€¿7¿7!¿7;¿7O¿7l¿7r¿7ã¿7è¿7ê¿7‚¿7Ë¿87¿8ä¿8õ¿8®¿8œ¿8Ú¿9¿9@¿9j¿9í¿9ò¿9∏¿9’¿9Ô¿:¿:¿:¿:6¿:\¿:|¿:Ä¿:Å¿:≈¿:À¿;¿;P¿;Q¿;è¿;ï¿;≥¿;π¿;…¿;œ¿<#¿<;¿<<¿<â¿<ß¿<¬¿<‡¿<ˆ¿=¿=S¿=q¿=ñ¿=Ï¿>¿>{¿>õ¿>˙¿?¿?`¿?µ¿@¿@E¿@£¿@≤¿@ª¿@¬¿@∆¿@«¿A¿A¿Ae¿Ar¿A¨¿A“¿A”¿B¿B$¿Bq¿B~¿B∏¿Bﬁ¿Bﬂ¿C¿C ¿Cm¿Cy¿CΩ¿CË¿CÈ¿D0¿Dy¿D«¿D‰¿E¿E!¿EA¿EÉ¿E∞¿E¿¿Eˆ¿F¿F*¿F4¿FR¿Fb¿Fò¿F´¿Fµ¿F»¿FÃ¿FÕ¿G¿G)¿G/¿Go¿Gu¿Gª¿G¯¿H¿H¿H?¿H@¿Hv¿H|¿HÃ¿I¿I^¿Id¿I≤¿IŸ¿IÔ¿Iˇ¿J¿JS¿Jì¿J¿¿JÌ¿Jˇ¿K6¿KC¿KO¿KW¿KX¿Ká¿K’¿L&¿L>¿Lt¿Lã¿L†¿L®¿L©¿L÷¿Lˇ¿M4¿MÜ¿M‚¿N¿Nk¿N∏¿O¿O/¿OV¿O¶¿Oø¿O÷¿O‡¿O·¿P¿PY¿Pj¿Pè¿P†¿P™¿P≤¿P≥¿Q¿Q(¿Q~¿Q‡¿Qˆ¿Q˜¿R¿RU¿R¶¿R¬¿S(¿S5¿Sb¿Sî¿S¶¿S›¿SÍ¿T¿Tc¿TÇ¿Tπ¿T∆¿T“¿T⁄¿T€¿U¿U9¿Uù¿V ¿V-¿V_¿Vq¿V®¿Vµ¿V ¿W0¿W=¿WI¿WQ¿WR¿WÉ¿Wƒ¿WÕ¿X¿X<¿XZ¿XΩ¿Y$¿Y[¿Y\¿Yí¿Y£¿Y ¿Yı¿Z%¿Z5¿Zj¿Zu¿Z†¿[¿[0¿[e¿[p¿[í¿[ø¿[Ë¿\¿\=¿\J¿\]¿\·¿]E¿]P¿]Z¿]d¿]w¿]{¿]|¿]Õ¿]˙¿^ ¿^Q¿^û¿^Á¿^Ì¿_8¿_q¿_¡¿`¿`'¿`4¿`\¿`|¿`å¿`©¿`º¿`∆¿`ﬂ¿`„¿`‰¿a!¿a'¿ag¿aá¿a≠¿a∆¿a«¿b%¿b+¿b`¿bf¿bú¿b√¿bƒ¿c¿c¿cT¿cä¿cê¿cŒ¿d¿dK¿d\¿dÅ¿dû¿d∫¿dŒ¿e¿ec¿eö¿e⁄¿f
¿f&¿f?¿fE¿fl¿fó¿fø¿f≈¿f˙¿g9¿gh¿gÉ¿gõ¿g°¿g„¿h ¿hB¿hH¿hL¿hM¿hë¿hó¿hÁ¿i¿i¿iV¿iú¿i∫¿iÀ¿i›¿i˘¿j¿jH¿jL¿jM¿jç¿jì¿j‰¿k0¿k}¿k¥¿k∫¿k¿l¿l$¿l4¿lQ¿ld¿ln¿lÅ¿lÖ¿lÜ¿l¢¿l£¿l„¿lÈ¿m9¿mà¿m⁄¿n¿n!¿nj¿n¥¿o¿oW¿oß¿o˘¿pG¿pV¿p\¿pÆ¿p¸¿qI¿qô¿q…¿qœ¿r¿ri¿rÑ¿rä¿r€¿s#¿s@¿sA¿sì¿s‡¿t¿t¿tQ¿tW¿tò¿tæ¿tÀ¿tÎ¿u¿up¿uv¿uê¿uî¿uï¿u≤¿u≥¿v¿vR¿v£¿v¿w¿w(¿wQ¿wR¿w£¿wÒ¿x¿x¿xj¿xº¿y¿y5¿yd¿ye¿yü¿y©¿y ¿z¿z¿z#¿zÄ¿zß¿zΩ¿z≈¿zÏ¿{¿{	¿{¿{ ¿{$¿{%¿{v¿{«¿|¿|¿|'¿|-¿|~¿|Ã¿}¿}X¿}^¿}Æ¿}„¿}È¿~9¿~Ç¿~“¿¿l¿π¿Û¿˘¿Ä:¿Äà¿ÄÀ¿Ä—¿ÄË¿ÄÓ¿Å7¿ÅÅ¿Å–¿Ç¿ÇL¿Çù¿Çπ¿Çø¿ÇÎ¿É7¿ÉR¿Éy¿Éë¿É—¿Éﬂ¿ÉÂ¿É˛¿ÑS¿Ñe¿Ñî¿Ñ‹¿ÑÊ¿Ñ˚¿Ö¿Ö2¿ÖU¿Öv¿Öï¿Öõ¿Öü¿Ö†¿ÖÔ¿Ü¿Ü¿ÜK¿Üú¿ÜÎ¿á¿á"¿áP¿á]¿á~¿á•¿áæ¿áﬂ¿à¿à6¿àV¿àc¿àè¿àï¿à∏¿àº¿àΩ¿àˇ¿âL¿âã¿âë¿â⁄¿â‡¿ä¿ä?¿äV¿äs¿äw¿äx¿äƒ¿ä ¿ã¿ã=¿ãC¿ãá¿ã®¿ã≈¿ã€¿ã˜¿å¿åG¿åg¿åw¿åù¿å∞¿å∫¿å‰¿åË¿åÈ¿ç¿ç6¿çP¿ç´¿çÿ¿ç¸¿é'¿éS¿éc¿éá¿é´¿é·¿è¿è!¿èZ¿èb¿èu¿è¿èâ¿è†¿è¬¿è€¿ê¿ê¿ê$¿êZ¿ê¿ê§¿ê∑¿ê¡¿ê€¿êÒ¿êı¿êˆ¿ë'¿ë-¿ë|¿ëÀ¿í¿íI¿íO¿íù¿íÌ¿ì>¿ìä¿ìŒ¿î¿îY¿î_¿î¨¿î˜¿ï?¿ïE¿ïì¿ï‚¿ñ/¿ñ\¿ñâ¿ñ—¿ñÓ¿ó%¿óX¿ój¿óù¿óÎ¿óı¿ò
¿ò¿òj¿òp¿ò|¿ò¢¿ò≈¿òË¿ô8¿ôT¿ô∂¿ôÏ¿ö2¿öU¿öÉ¿öò¿ö¶¿ö≤¿öı¿õ@¿õ¢¿õŒ¿ú¿úL¿ú}¿ú£¿ú√¿ù¿ùl¿ù°¿ù«¿ùÿ¿ùÁ¿ùÛ¿û¿û$¿û-¿û4¿ûX¿û|¿ûå¿ûª¿ûŒ¿ûÿ¿ûŸ¿ü>¿üv¿üà¿ü÷¿†¿†F¿†v¿†¬¿†Â¿†ˇ¿°7¿°^¿°Ö¿°ö¿°¶¿°ﬂ¿¢¿¢¿¢¿¢!¿¢A¿¢B¿¢f¿¢ë¿¢°¿¢≈¿¢‰¿¢¯¿£Z¿£e¿£m¿£Ä¿£ä¿££¿£µ¿£€¿£¿£¸¿§¿§!¿§5¿§a¿§x¿§Ü¿§°¿§÷¿§ﬁ¿§¿•¿•,¿•8¿•>¿•k¿•{¿•ü¿•’¿•ˆ¿¶	¿¶¿¶¿¶4¿¶V¿¶h¿¶í¿¶ß¿¶≥¿¶Ã¿¶ˇ¿ß¿ß¿ßK¿ßp¿ßï¿ß®¿ß≤¿ßÃ¿ß‚¿ß„¿®¿®>¿®D¿®H¿®I¿®ï¿®ﬁ¿©+¿©w¿©»¿©ı¿™¿™¿™¿™k¿™ö¿™†¿™Ë¿´7¿´y¿´¿´œ¿¨¿¨M¿¨S¿¨£¿¨È¿≠'¿≠K¿≠X¿≠{¿≠|¿≠ª¿≠˝¿Æ¿ÆR¿Æù¿ÆË¿Ø!¿Ø'¿Øf¿Ø{¿ØÅ¿Ø“¿∞!¿∞M¿∞Z¿∞r¿∞s¿∞µ¿∞ª¿±
¿±U¿±†¿±Ÿ¿±ﬂ¿≤/¿≤Ä¿≤Œ¿≥¿≥0¿≥6¿≥Ç¿≥–¿¥¿¥e¿¥Æ¿¥Ê¿¥Ï¿µ2¿µÅ¿µ–¿∂!¿∂q¿∂í¿∂ü¿∂∑¿∂∏¿∂ˇ¿∑O¿∑ú¿∑Ë¿∏¿∏
¿∏[¿∏©¿∏˙¿πC¿πI¿πö¿πÍ¿π¿∫&¿∫3¿∫Ñ¿∫ß¿∫ ¿∫ı¿ª¿ª(¿ªZ¿ª~¿ªà¿ªò¿ªƒ¿ª ¿ªŒ¿ªœ¿ª›¿ªﬁ¿º!¿º'¿ºt¿ºÅ¿ºπ¿ºﬁ¿ºﬂ¿Ω¿Ω¿Ωe¿Ωq¿Ω≥¿Ω›¿Ωﬁ¿æ$¿æ*¿æ{¿æƒ¿ø¿ø'¿ø-¿ø}¿ø”¿¿¿¿m¿¿ó¿¿ù¿¿Ó¿¿ˇ¿¡¿¡]¿¡Ñ¿¡Ö¿¡“¿¬¿¬¿¬a¿¬~¿¬©¿¬…¿¬È¿¬Ò¿¬Ú¿√-¿√3¿√Å¿√–¿√˙¿ƒ ¿ƒQ¿ƒü¿ƒ¨¿ƒÿ¿ƒŸ¿ƒ˙¿ƒ˚¿≈:¿≈@¿≈è¿≈ï¿≈‡¿∆/¿∆Ä¿∆œ¿«¿«*¿«0¿«}¿«ß¿«≠¿» ¿»Q¿»û¿»¿…¿…Z¿…®¿…˙¿ ¿ ?¿ C¿ D¿ â¿ è¿ ﬂ¿À,¿Ày¿À»¿Ã¿Ãi¿ÃØ¿Ã˚¿ÕI¿Õ~¿ÕÑ¿Õ—¿Œ¿Œi¿Œµ¿œ¿œS¿œr¿œx¿œ«¿–¿–`¿–m¿–z¿–ò¿–˚¿—¿—¿—¿—,¿—T¿—`¿—z¿—¬¿“	¿“*¿“1¿“T¿“X¿“Y¿“´¿“¨¿” ¿”¿”W¿”™¿”∫¿”¿¿”Ì¿‘¿‘,¿‘<¿‘_¿‘r¿‘|¿‘è¿‘ì¿‘î¿‘Â¿’'¿’-¿’}¿’Õ¿’⁄¿’‡¿÷¿÷c¿÷™¿÷Ò¿◊6¿◊k¿◊q¿◊∂¿◊¸¿ÿ5¿ÿ_¿ÿ|¿ÿ£¿ÿ±¿ÿ∑¿ÿﬂ¿Ÿ¿Ÿ'¿ŸW¿Ÿg¿Ÿo¿Ÿp¿Ÿ«¿Ÿ¯¿⁄¿⁄¿⁄¿⁄S¿⁄å¿⁄ê¿⁄ë¿⁄“¿€¿€¿€m¿€ï¿€õ¿€⁄¿‹¿‹5¿‹ì¿‹±¿‹µ¿‹∂¿‹ÿ¿› ¿›¿›¿›L¿›k¿›î¿›∫¿›ﬁ¿ﬁ ¿ﬁ¿ﬁ¿ﬁG¿ﬁg¿ﬁm¿ﬁº¿ﬂ¿ﬂS¿ﬂ™¿ﬂı¿‡*¿‡E¿‡p¿‡≈¿‡¿·¿·C¿·n¿·Ü¿·ì¿·æ¿·ƒ¿·»¿·…¿‚¿‚¿‚_¿‚´¿‚¯¿„1¿„7¿„m¿„s¿„ø¿‰¿‰S¿‰ü¿‰⁄¿‰˜¿Â¿Â¿Â9¿ÂL¿ÂV¿Âi¿Âm¿Ân¿Ââ¿Âä¿Â…¿Âœ¿Ê ¿Êl¿Êπ¿ÊÚ¿Ê¯¿Á.¿Á[¿Áq¿ÁÅ¿Á≠¿Á¿¿Á ¿Á›¿Á·¿Á‚¿Ë¿Ë¿ËV¿Ë\¿Ë°¿ËÓ¿È>¿Èç¿È•¿È´¿Èˆ¿Í2¿Í8¿Íx¿Í≈¿Î¿Î¿Î¿Î#¿Îq¿Î√¿Î”¿ÎÌ¿Ï
¿Ï@¿ÏW¿Ïe¿Ïk¿ÏÉ¿Ï…¿ÏÎ¿Ì¿Ì1¿Ì_¿Ì¶¿Ì∞¿Ì≈¿Ì—¿Ó¿ÓJ¿Ó{¿Óñ¿Ó√¿ÓÈ¿ÓÒ¿Ô¿Ô2¿Ô?¿ÔQ¿Ô¿Ô‹¿ÔÊ¿Ô˚¿¿Q¿õ¿ﬂ¿Ò¿Ò&¿Òc¿Ò¢¿Ò∆¿ÒÃ¿Ò–¿Ò—¿Ú¿Ú+¿Ú1¿ÚÇ¿Ú÷¿Û!¿Ûp¿Ûπ¿Ûø¿Ù¿Ù`¿ÙÉ¿Ùâ¿Ùô¿Ùü¿ÙÔ¿ı.¿ıX¿ıu¿ı´¿ı·¿ıÔ¿ıı¿ˆ¿ˆc¿ˆÖ¿ˆπ¿ˆ¸¿˜2¿˜\¿˜w¿˜§¿˜ ¿˜“¿˜ﬂ¿˜˜¿˜˝¿¯¿¯¿¯R¿¯†¿¯Ò¿˘:¿˘s¿˘ñ¿˘¨¿˘À¿˙¿˙+¿˙V¿˙w¿˙í¿˙∂¿˙Â¿˚<¿˚M¿˚W¿˚à¿˚‰¿˚ı¿˚ˇ¿¸ ¿¸(¿¸B¿¸H¿¸L¿¸M¿¸ò¿¸û¿¸Ï¿˝¿˝¿˝^¿˝ñ¿˝∂¿˝Ã¿˝Ë¿˛¿˛-¿˛U¿˛y¿˛í¿˛ª¿˛ø¿˛¿¿ˇ¿ˇF¿ˇX¿ˇ^¿ˇ£¿ˇ‘¿ˇÒ¿ ¿ '¿ C¿ i¿ à¿ €¿ ˝¿!¿7¿;¿<¿¿ú¿¨¿Œ¿¿L¿h¿∏¿’¿‚¿˛¿I¿d¿q¿}¿Ö¿ò¿¢¿Ó¿<¿ä¿Ÿ¿%¿r¿ª¿”¿·¿Á¿¿P¿b¿î¿‚¿Ï¿¿¿a¿g¿w¿†¿“¿¿¿N¿o¿ï¿£¿±¿”¿	¿	+¿	{¿	ú¿	≠¿	Ê¿
,¿
L¿
ù¿
Ò¿5¿F¿£¿≥¿ø¿…¿¿¿g¿¿å¿®¿˘¿-¿:¿V¿§¿Ò¿1¿>¿ó¿£¿´¿æ¿»¿¿ ¿#¿S¿s¿≥¿∆¿–¿È¿¿?¿I¿g¿¿¿¿1¿\¿b¿r¿ï¿≈¿È¿¸¿¿<¿`¿f¿j¿k¿∑¿¿¿W¿p¿à¿â¿ƒ¿¿¿M¿S¿ü¿‰¿2¿¿•¿´¿˘¿I¿ó¿Æ¿¥¿ ¿J¿ô¿À¿¿¿T¿o¿u¿∆¿¿4¿:¿Ñ¿–¿¿e¿±¿Í¿8¿Z¿^¿_¿¶¿¨¿¸¿H¿ô¿≤¿∏¿ˇ¿L¿ò¿Ë¿8¿U¿à¿™¿ª¿ø¿¿¿ ¿K¿a¿g¿±¿ ¿ ¿ "¿ t¿ µ¿ ª¿!
¿!R¿!{¿!Å¿!Ã¿"¿"0¿"E¿"K¿"ó¿"Ê¿#4¿#É¿#ï¿#∆¿#‹¿$,¿$e¿$l¿$Ω¿$Œ¿$¿%>¿%V¿%v¿%w¿%ï¿%«¿%»¿%Î¿&¿&7¿&8¿&Z¿&Ç¿&ù¿&ı¿'2¿'M¿'U¿'w¿'ù¿(¿(¿(,¿(|¿(á¿(√¿(⁄¿(‚¿(Ë¿(È¿)¿)!¿)D¿)n¿)∆¿*¿*R¿*Z¿*`¿*z¿*¨¿*≤¿*≥¿*“¿+¿+G¿+ê¿+ñ¿+ª¿,¿, ¿,&¿,i¿,m¿,n¿,µ¿,˜¿-8¿->¿-t¿-z¿-¿¿-Á¿-Ì¿.=¿.ä¿.⁄¿/¿/`¿/a¿/®¿/˜¿0C¿0è¿0‡¿1,¿1w¿1Ñ¿1ä¿1’¿2"¿2n¿2â¿2è¿2‡¿3.¿3|¿3Ã¿4¿4`¿4f¿4v¿4|¿4»¿5¿5J¿5K¿5Z¿5[¿5¢¿5«¿5Õ¿6¿6+¿61¿6z¿6û¿6ª¿6—¿6Ì¿7¿7T¿7Ä¿7≠¿7œ¿7”¿7‘¿8%¿8+¿8v¿8í¿8ò¿8·¿9,¿9{¿9√¿:¿:Z¿:`¿:v¿:|¿:Ã¿:ﬂ¿:Â¿:Û¿;:¿;L¿;ô¿;—¿;‚¿<¿<)¿<H¿<R¿<X¿<t¿<è¿<ô¿<°¿<´¿<Ω¿< ¿=¿=2¿=6¿=7¿=å¿=í¿=›¿>¿>¿>Y¿>_¿>´¿>Ê¿?¿?¿?#¿?c¿?ó¿?Ω¿?ﬁ¿@¿@¿@¿@¿@[¿@Ö¿@†¿@°¿@Ú¿@¯¿A$¿AK¿Ac¿Aw¿A}¿A§¿A®¿A©¿A‘¿A⁄¿B(¿Bl¿Bì¿Bô¿BÁ¿BÛ¿C¿Ch¿Cç¿C∫¿CÁ¿CÌ¿C˛¿D¿D¿DL¿DR¿D°¿Dß¿D¿E<¿EM¿Eg¿E¿E®¿E∆¿EŒ¿E“¿E”¿F¿F!¿Fh¿Fπ¿FÂ¿G	¿G&¿G]¿Gî¿G¢¿G®¿G ¿GŒ¿Gœ¿H¿H¿HX¿H^¿HÆ¿H˜¿I	¿I¿IH¿Iå¿IÃ¿IË¿IÏ¿IÌ¿J)¿J/¿J^¿JØ¿J˘¿KI¿Kt¿Kz¿K∆¿Kﬁ¿K‰¿L1¿L|¿L≠¿LÀ¿L„¿M¿M,¿M2¿Mf¿Mﬂ¿NB¿NF¿NG¿NS¿NT¿N•¿N±¿N˘¿N˙¿O¿O¿OZ¿O¢¿O∫¿Oø¿P¿PS¿Ph¿P∏¿Q¿QU¿QÇ¿QΩ¿Qƒ¿Q…¿R¿RN¿RO¿Rz¿RÜ¿R°¿RÕ¿RÊ¿S¿S!¿S8¿S@¿SA¿SV¿Sb¿SÖ¿S√¿Sﬁ¿SË¿T¿T.¿T?¿TI¿T]¿Te¿T|¿T¨¿T¥¿TŒ¿TÒ¿T˘¿U¿U4¿U<¿Ue¿Uô¿U°¿U∏¿U◊¿Uﬂ¿UÂ¿U¯¿U¸¿U˝¿V	¿Vb¿Vc¿V†¿VË¿W¿W¿W3¿WR¿Wu¿W´¿W√¿W ¿WÙ¿X¿X:¿Xf¿XÇ¿X†¿X©¿X∞¿X¥¿Xµ¿X˘¿Y(¿Y.¿Yy¿Yµ¿Y¡¿Z&¿ZP¿Zó¿Zû¿Z¢¿Z£¿Z∞¿Zº¿[¿[,¿[@¿[ü¿[¶¿[∫¿[ﬁ¿[Ò¿\¿\#¿\I¿\R¿\Y¿\m¿\î¿\™¿\æ¿]
¿]'¿]0¿]7¿]K¿]•¿]¨¿^¿^¿^{¿^Ç¿^ñ¿^ˆ¿^˝¿_¿_%¿_\¿_º¿`¿`¿`$¿`8¿`L¿`j¿`±¿`÷¿`ﬂ¿`Ê¿`Í¿`Î¿`˜¿a?¿a@¿aë¿a¢¿a®¿aÛ¿b7¿b=¿bç¿bÃ¿c¿cd¿c©¿c…¿cœ¿d¿d\¿db¿dr¿dx¿dƒ¿d˝¿e¿e1¿eA¿eh¿eá¿eé¿e®¿eŒ¿e‡¿e˙¿f¿f¿f¿f¿fk¿fÅ¿fá¿f◊¿g&¿gT¿gZ¿g™¿g˜¿h¿h.¿hm¿ht¿h¨¿h∞¿h≤¿h≥¿hË¿hÏ¿i-¿im¿iq¿i∂¿i‡¿j3¿jÑ¿j©¿jØ¿jﬁ¿j‰¿jˇ¿k/¿k?¿k`¿kò¿k∞¿l¿l4¿lA¿l]¿l©¿lÙ¿mF¿mó¿m§¿mΩ¿mÂ¿n5¿nO¿nÜ¿nì¿n¨¿n‘¿o'¿oE¿oe¿oú¿o©¿oµ¿oΩ¿o–¿o⁄¿oÎ¿oÔ¿o¿p¿p¿p.¿pP¿pp¿pä¿p§¿p™¿pæ¿pÿ¿pÛ¿p˘¿p˝¿p˛¿q
¿q/¿qH¿qc¿qg¿qh¿qt¿qÜ¿qö¿q∞¿q¥¿qµ¿q¡¿q‹¿qˆ¿r¿r¿r¿r¿r*¿r^¿rx¿rê¿rñ¿rö¿rõ¿rß¿rŸ¿rÚ¿s7¿sV¿sZ¿s\¿s]¿s¨¿s˜¿t¿t¿ti¿tπ¿u¿uO¿u†¿uÌ¿v6¿vÄ¿v—¿w¿wq¿w¡¿w‘¿wÿ¿x#¿xb¿xf¿xt¿xx¿xø¿x˚¿yI¿yô¿yË¿z¿z¿zF¿zL¿zå¿z€¿{¿{'¿{@¿{A¿{}¿{É¿{Œ¿|¿|3¿|D¿|a¿|É¿|∂¿|—¿|’¿|÷¿}(¿}w¿}≈¿}÷¿}¯¿~¿~1¿~?¿~E¿~_¿~¨¿~ˇ¿O¿â¿≥¿Ä¿Ä,¿ÄI¿ÄM¿ÄO¿ÄP¿Äç¿Äë¿Ä›¿Å¿ÅZ¿ÅÜ¿Å’¿Ç¿Ç*¿Ç+¿Ç^¿Çx¿Çy¿Çõ¿Çß¿Çπ¿Ç≈¿Ç‰¿É.¿É5¿Éö¿ÉÆ¿É≤¿É¥¿Éµ¿ÉÛ¿É˜¿ÑH¿Ñ^¿Ñb¿Ñµ¿ÑÀ¿Ñœ¿Ö¿Öj¿Öü¿ÖÌ¿ÖÒ¿ÜD¿Üñ¿Üß¿Ü´¿á¿á¿á#¿á'¿áp¿áë¿á≥¿á’¿à¿à¿à*¿ày¿à√¿à˘¿â1¿âa¿âû¿â§¿â¿¿âƒ¿â≈¿ä¿äZ¿äå¿ä¿¿äÏ¿ã)¿ã/¿ãK¿ãO¿ãP¿ãg¿ãh¿ãÜ¿ã´¿ã¨¿ã˝¿å"¿å(¿åW¿å]¿åx¿å®¿å∏¿åŸ¿ç¿ç)¿çz¿ç≠¿ç∫¿ç÷¿é"¿ém¿éø¿è¿è¿è6¿è^¿èÆ¿è»¿èˇ¿ê¿ê%¿êM¿ê†¿êæ¿êﬁ¿ë¿ë"¿ë.¿ë6¿ëI¿ëS¿ëd¿ëh¿ëi¿ëÉ¿ëú¿ëﬂ¿í/¿í`¿íï¿í´¿í»¿í·¿ì¿ì=¿ì^¿ìæ¿ìÙ¿ì¸¿î¿î3¿î@¿îc¿îÖ¿î–¿ï¿ïh¿ïô¿ïÎ¿ñ¿ñA¿ñn¿ñä¿ñô¿ñ„¿ó¿óU¿óÜ¿óµ¿óÛ¿ò?¿òy¿ò¡¿ò˝¿ô9¿ôo¿ôw¿ô}¿ôÅ¿ôÇ¿ô—¿ô◊¿ö'¿öY¿öé¿ö€¿öÁ¿ö¸¿õf¿õm¿õº¿õﬁ¿õˇ¿ú¿ú"¿úL¿ú•¿ù ¿ùV¿ù]¿ùå¿ùê¿ùë¿ù”¿ùÒ¿û¿û¿û¿ûf¿ûë¿û≠¿û±¿û≤¿û·¿ü1¿üz¿üæ¿ü‹¿†¿†3¿†d¿†q¿†≠¿†˜¿°G¿°M¿°|¿°ü¿°”¿°‡¿¢¿¢^¿¢≤¿¢∏¿¢‰¿£¿£"¿£&¿£'¿£T¿£Z¿£î¿£µ¿£÷¿£Ï¿£¿£Ò¿§7¿§=¿§s¿§à¿§¨¿§»¿•¿•U¿•É¿•≠¿•≈¿•Ÿ¿•ﬂ¿•˜¿¶¿¶#¿¶'¿¶(¿¶r¿¶x¿¶«¿ß¿ßM¿ßÄ¿ßõ¿ß∂¿ß“¿ßÙ¿®D¿®x¿®Ü¿®å¿®≠¿®‹¿®Û¿®˜¿®¯¿©¿©)¿©B¿©f¿©Ç¿©ù¿©Ô¿™¿™ ¿™$¿™%¿™1¿™C¿™W¿™{¿™ó¿™≠¿™ˇ¿´*¿´0¿´4¿´5¿´A¿´\¿´Ä¿´ú¿´∑¿¨	¿¨4¿¨:¿¨>¿¨?¿¨K¿¨¿¨£¿¨ø¿¨’¿≠'¿≠R¿≠X¿≠\¿≠]¿≠Ü¿≠≤¿≠≥¿≠€¿Æ¿Æ¿ÆI¿Æu¿Æó¿ÆÁ¿Ø¿Ø¿Ø¿ØV¿ØÅ¿Ø£¿ØÛ¿∞¿∞¿∞ ¿∞,¿∞^¿∞û¿∞º¿∞·¿∞ˆ¿±¿±P¿±r¿±É¿±ç¿±°¿±ı¿≤#¿≤+¿≤1¿≤F¿≤J¿≤L¿≤M¿≤ù¿≤∂¿≤∫¿≥¿≥V¿≥{¿≥∂¿≥ˆ¿≥¸¿¥=¿¥Ä¿¥–¿µ"¿µ(¿µl¿µã¿µë¿µ·¿∂ ¿∂¿∂¿∂>¿∂U¿∂Y¿∂Z¿∂í¿∂∏¿∂ƒ¿∑¿∑r¿∑∂¿∑Ω¿∑¿∑˛¿∏¿∏8¿∏É¿∏∫¿∏Ò¿∏ˇ¿π,¿πë¿πö¿π∞¿π–¿πÿ¿π‡¿π‰¿πÂ¿πÒ¿∫¿∫/¿∫|¿∫ ¿ª¿ªP¿ª¢¿ª¶¿ªß¿ª≥¿ª≈¿ª˚¿ºP¿ºd¿ºh¿ºj¿ºk¿º≤¿ºΩ¿º‡¿ºˇ¿Ω"¿ΩG¿Ωm¿Ωê¿Ωñ¿Ωó¿ΩË¿æ
¿æ¿æU¿æs¿æt¿æ≈¿ø¿ø¿øZ¿ør¿øí¿øì¿øƒ¿¿¿¿¿¿P¿¿ã¿¿¨¿¿≠¿¿„¿¡#¿¡O¿¡P¿¡\¿¡¿¡´¿¡ﬂ¿¬¿¬Q¿¬ö¿¬û¿¬ü¿¬´¿¬¿¿¬ÿ¿¬Ô¿√¿√"¿√l¿√s¿√w¿√y¿√z¿√ ¿√„¿√Á¿ƒ8¿ƒÑ¿ƒî¿ƒò¿ƒÊ¿≈5¿≈á¿≈ë¿≈ï¿≈À¿∆¿∆g¿∆é¿∆∂¿∆Ì¿∆Ó¿«!¿«E¿«F¿«q¿«£¿«÷¿«◊¿»/¿»0¿»}¿»¶¿»÷¿»⁄¿»€¿… ¿…&¿…r¿…√¿ ¿ V¿ ~¿ ®¿ ˚¿ÀH¿ÀV¿Àç¿À÷¿ÃJ¿ÃS¿ÃY¿Ã}¿ÃÅ¿ÃÇ¿Ãõ¿Ã°¿ÃÁ¿Ã˙¿Õ>¿Õe¿Õñ¿Õø¿Õ≈¿ÕÌ¿ÕÒ¿ÕÚ¿Œ"¿Œ_¿Œí¿Œ∏¿Œ¿¿Œƒ¿Œ≈¿ŒÛ¿œ¿œ,¿œT¿œX¿œY¿œÉ¿œâ¿œ“¿–¿–%¿–M¿–q¿–î¿–ò¿–ö¿–õ¿–Ÿ¿–¸¿— ¿—I¿—Ü¿—÷¿“ ¿“C¿“g¿“ñ¿“ó¿“ª¿“º¿“‹¿“›¿”¿”¿”¿”>¿”w¿”{¿” ¿‘¿‘O¿‘s¿‘w¿‘ß¿‘Á¿’)¿’*¿’6¿’f¿’g¿’s¿’ô¿’ö¿’¶¿’ﬂ¿’ˆ¿’˙¿’¸¿’˝¿÷%¿÷Ä¿÷Å¿÷ ¿÷Î¿÷Ô¿◊¿◊¿◊T¿◊ö¿◊‚¿ÿ3¿ÿk¿ÿ≤¿ÿ˚¿ŸC¿Ÿì¿Ÿƒ¿Ÿ»¿Ÿﬂ¿Ÿ„¿⁄1¿⁄Ç¿⁄™¿⁄Æ¿⁄æ¿⁄¬¿€¿€"¿€&¿€q¿€¬¿‹¿‹¿‹¿‹.¿‹2¿‹É¿‹Œ¿›¿›K¿›O¿›û¿›€¿›ﬂ¿›Ô¿›Û¿ﬁ8¿ﬁu¿ﬁy¿ﬁâ¿ﬁç¿ﬁ›¿ﬂ¿ﬂ¿ﬂh¿ﬂ∏¿ﬂ¬¿‡¿‡E¿‡ã¿‡å¿‡¿¿‡„¿‡‰¿·¿·(¿·L¿·õ¿·∫¿·ø¿‚¿‚^¿‚ö¿‚∆¿‚«¿‚›¿‚ﬁ¿„¿„¿„d¿„±¿„«¿„Õ¿‰¿‰2¿‰8¿‰t¿‰ù¿‰√¿‰ƒ¿‰˛¿Â¿ÂQ¿Â¢¿ÂÂ¿ÂÎ¿Ê8¿Êi¿Ê©¿Ê™¿ÊÛ¿Á6¿Á7¿Áà¿Á¿¿Ë¿Ë9¿Ë:¿Ëv¿Ë–¿È&¿ÈY¿ÈZ¿È~¿Èû¿Èü¿È◊¿Èÿ¿È‰¿Í¿Í¿Í.¿Í@¿ÍT¿ÍZ¿Íy¿Í}¿Í~¿Í»¿Î¿Î¿ÎH¿Îâ¿Îä¿Î≤¿ÎÍ¿Ï¿ÏH¿ÏX¿Ï\¿Ï]¿Ïò¿Ïô¿Ïæ¿Ïı¿Ì¿Ì¿Ì ¿Ì3¿Ì9¿Ì`¿Ìt¿Ìz¿Ì{¿Ìá¿Ì°¿Ì¿ÓA¿ÓH¿Óä¿Óé¿Óè¿Ó ¿Ô¿Ô>¿Ôé¿Ôî¿Ôï¿Ô»¿ÔÃ¿ÔÕ¿¿U¿[¿™¿›¿Ò¿Ò.¿ÒT¿ÒZ¿Ò[¿Òæ¿Òø¿Ò‚¿Òı¿Ò˚¿Ò¸¿Ú3¿ÚG¿ÚM¿ÚN¿Úê¿Ú÷¿Û¿Û3¿Û;¿ÛC¿Ûg¿Ûk¿Ûl¿Ûß¿Û®¿Û¬¿Û’¿Ù¿Ù¿Ù!¿Ùh¿Ù ¿ÙÛ¿ı¿ı¿ıC¿ıì¿ı¶¿ıÃ¿ı÷¿ıﬁ¿ı‰¿ıË¿ıÈ¿ˆ1¿ˆÇ¿ˆ∫¿ˆ¿¿˜¿˜.¿˜4¿˜Ö¿˜ò¿˜û¿˜Î¿¯>¿¯h¿¯î¿¯ö¿¯Ì¿˘:¿˘å¿˘ª¿˘’¿˙9¿˙U¿˙õ¿˙ ¿˙‹¿˚¿˚B¿˚x¿˚†¿˚Û¿˚Ù¿¸¿¸z¿¸{¿¸õ¿¸∞¿¸˜¿˝¿˝B¿˝Ü¿˝±¿˝Í¿˛¿˛¿˛¿˛p¿˛á¿˛é¿˛≠¿˛◊¿˛ÿ¿ˇ¿ˇF¿ˇl¿ˇ©¿ˇË¿ˇÈ¿ '¿ 9¿ f¿ ±¿ ¡¿ ı¿%¿q¿∫¿—¿Í¿!¿_¿ö¿–¿¿#¿h¿ß¿˘¿.¿è¿Ê¿/¿;¿É¿ç¿ï¿ñ¿Ÿ¿Û¿¿Z¿å¿ò¿†¿°¿Ò¿7¿r¿~¿Ü¿å¿ê¿ë¿À¿¿_¿ù¿µ¿Ω¿Á¿Ô¿	¿	¿	¿	4¿	Z¿	ô¿	ü¿	æ¿	˘¿
:¿
@¿
o¿
ã¿
π¿
»¿
˝¿¿¿¿"¿#¿h¿í¿ò¿›¿9¿:¿ì¿·¿¿t¿¡¿˘¿˙¿G¿ó¿Â¿4¿p¿ì¿ö¿‚¿1¿w¿~¿Õ¿¿G¿ï¿ñ¿œ¿¿9¿s¿±¿‘¿¿¿$¿V¿\¿∞¿È¿.¿x¿ ¿¿7¿u¿∑¿»¿È¿Û¿˚¿¸¿4¿Å¿√¿	¿¿¿@¿ç¿∑¿¿)¿2¿H¿ô¿‚¿¿!¿-¿[¿ò¿§¿≠¿¿%¿o¿∫¿ﬁ¿˝¿¿;¿z¿ë¿ú¿§¿™¿´¿˛¿=¿T¿v¿w¿Õ¿¿?¿o¿p¿™¿˘¿=¿Ö¿è¿ó¿ù¿û¿»¿Ã¿Õ¿¿6¿D¿J¿ã¿†¿∂¿÷¿Ï¿¿Ò¿ ;¿ [¿ g¿ †¿ ƒ¿ »¿ …¿!¿!F¿!L¿!î¿!¥¿!∫¿!˝¿"J¿"p¿"ä¿"ú¿"◊¿"Ò¿"˘¿#@¿#F¿#d¿#Ä¿#Ñ¿#Ö¿#•¿#√¿$¿$s¿$©¿$Á¿%¿%¿%2¿%;¿%t¿%z¿%~¿%¿%√¿%˝¿&¿&/¿&R¿&w¿&•¿&¿'C¿'†¿'–¿'‡¿'Ë¿'Ó¿(
¿(¿(¿(_¿(¿(Ö¿(Õ¿(Ì¿(Û¿)?¿)ä¿)Ÿ¿*¿*+¿*n¿*Ä¿*≤¿*ø¿*‘¿+$¿+s¿+|¿+¥¿,¿,¿,¿,¿,R¿,X¿,ñ¿,ú¿,‰¿,˛¿-=¿-b¿-â¿-ÿ¿.$¿.J¿.S¿.°¿.À¿/¿//¿/K¿/U¿/]¿/c¿/u¿/ì¿/¡¿0¿0¿0¿0¿0i¿0∑¿0Ù¿1+¿1M¿1Ä¿1™¿1Â¿2¿23¿2=¿2E¿2K¿2O¿2P¿2î¿2¥¿2‹¿3¿3.¿35¿3q¿3…¿3ˆ¿4@¿4ä¿4º¿4Î¿51¿5Q¿5{¿5É¿5Ñ¿5≈¿5Ú¿5¯¿5˘¿6.¿6T¿6ã¿6ﬂ¿6Ï¿7L¿7R¿7V¿7W¿7ú¿7∞¿7¬¿8¿8/¿88¿8|¿8®¿8Ã¿8Õ¿8˜¿9¿99¿9c¿9ì¿9ö¿9û¿9ü¿9»¿9⁄¿9˚¿:2¿:l¿:u¿:{¿:ƒ¿:»¿:…¿; ¿;G¿;t¿;è¿;»¿;¯¿<#¿<Z¿<ê¿<À¿<’¿<›¿=2¿=U¿=ó¿=‡¿=Í¿>¿>L¿>~¿>ß¿>ﬁ¿>Í¿>Ù¿?$¿?Z¿?|¿?}¿?§¿?∂¿?‡¿@?¿@Q¿@Å¿@…¿@„¿A1¿AÉ¿Aæ¿A…¿B¿B¿BV¿Ba¿Bö¿Bπ¿B‹¿B˙¿C¿C2¿C>¿CH¿Cê¿Cò¿Cû¿C√¿C«¿C»¿D¿D¿Da¿Dw¿Dü¿D‘¿E¿E?¿Ee¿E©¿E˝¿F¿F¿F0¿F\¿F¶¿FØ¿F–¿F˚¿G<¿Gv¿G∏¿G¸¿H)¿H3¿H9¿H=¿H>¿Hg¿Hû¿HÂ¿I¿I,¿IK¿If¿I•¿I€¿IÔ¿I˘¿JT¿Já¿J ¿K¿K¿K>¿KI¿K}¿K∂¿K¿L¿L9¿LÅ¿L•¿Lœ¿L⁄¿M4¿Ml¿M£¿M…¿M¯¿N¿NO¿NY¿Nç¿Nƒ¿NÍ¿O¿O"¿Od¿On¿Ov¿O¢¿O≠¿Oƒ¿O⁄¿P¿P9¿Po¿Pû¿P§¿P®¿P©¿PÁ¿Q¿QH¿Qì¿Q›¿R-¿Ry¿Rü¿RÌ¿RÓ¿S
¿S3¿S4¿Sî¿Sº¿T	¿T/¿T0¿T¿Tœ¿U¿U7¿Ub¿Uß¿V¿V¿V¿VE¿Vn¿V£¿V‘¿W&¿Ww¿W¶¿W–¿W¯¿X ¿X ¿Xx¿Xy¿Xù¿XÎ¿Y3¿YÅ¿Yπ¿Y¬¿Z¿Zc¿Z≠¿Z˛¿["¿[G¿[ß¿[≠¿\¿\b¿\¶¿\ı¿]D¿]î¿]¶¿]Ò¿^8¿^>¿^j¿^í¿^¢¿^Î¿_¿_"¿_f¿_õ¿_•¿_≠¿_≥¿_∑¿_∏¿`¿`k¿`†¿`Ÿ¿`Û¿a+¿aY¿ak¿as¿a—¿a˚¿b¿b&¿bY¿bõ¿b˜¿c#¿cV¿c`¿ch¿cn¿c≤¿cÈ¿cÔ¿cÛ¿cÙ¿d=¿dN¿da¿dÄ¿d†¿d∑¿dÃ¿dÔ¿e¿e-¿eM¿e{¿eó¿e≥¿e∑¿e∏¿eƒ¿eˆ¿f¿fu¿fà¿få¿fç¿fö¿f¶¿fÎ¿g¿gc¿gw¿g–¿g◊¿gÎ¿gˇ¿h¿hn¿hê¿hô¿h†¿h∆¿hÓ¿i¿iD¿iz¿iß¿i∂¿iÈ¿iÒ¿jR¿jX¿jl¿jÄ¿jû¿j⁄¿jˇ¿k¿k¿k#¿kà¿kè¿k÷¿l;¿lA¿lE¿lG¿lH¿lt¿l†¿lŸ¿l€¿l‹¿m¿mE¿mÅ¿mÖ¿mò¿mË¿n¿n&¿n(¿n)¿n{¿n|¿nƒ¿n»¿o¿oN¿oY¿oz¿oΩ¿o⁄¿o˚¿p ¿p=¿pU¿po¿pu¿pv¿p•¿pƒ¿pﬂ¿p˛¿q#¿q8¿qJ¿qQ¿qU¿qV¿qÅ¿qú¿qù¿q÷¿q˜¿q¯¿r-¿rJ¿rK¿rq¿rÑ¿rÖ¿rÕ¿s
¿s¿s ¿sS¿sz¿s¢¿sŒ¿s˙¿t%¿t,¿tz¿t®¿t·¿u¿u¿uu¿uv¿uó¿u◊¿v¿v@¿vA¿vc¿vs¿vü¿v‡¿vÎ¿w"¿wX¿w`¿wÇ¿wí¿wø¿x ¿x¿xM¿xs¿xë¿x”¿xﬁ¿y¿y¿y¿y¿y0¿y_¿y£¿z ¿z¿z¿z:¿zu¿z≤¿z¡¿zﬁ¿zÊ¿zÏ¿zÌ¿{¿{¿{;¿{x¿{ø¿{Í¿|¿|T¿|ö¿|Ÿ¿|˝¿}%¿}B¿}[¿}f¿}n¿}{¿}≈¿~¿~ ¿~r¿~¿¿~¡¿~˚¿O¿o¿ì¿õ¿Ô¿Ä(¿Äi¿Äá¿ÄØ¿ÄÎ¿Å,¿Å@¿ÅY¿Åx¿Åì¿Å†¿Å¿¿Å ¿Å“¿Åÿ¿ÅŸ¿ÅÈ¿Ç4¿Ç_¿Ç~¿Çü¿Ç€¿É¿É/¿ÉI¿ÉQ¿ÉW¿ÉX¿Éw¿Éì¿É∑¿É„¿Éı¿Ñ¿Ñ¿Ñ¿Ñ¿ÑK¿Ñä¿Ñ¢¿Ñµ¿Ñª¿ÑÈ¿Ö¿Ö¿ÖE¿ÖI¿ÖJ¿ÖÄ¿ÖÖ¿Ö‘¿ÖÎ¿Ö¿Ü?¿Üâ¿ÜÃ¿ÜÕ¿á¿ág¿ál¿áº¿áÂ¿à¿à1¿àI¿àl¿àã¿àë¿àæ¿â¿âV¿âq¿âw¿âƒ¿âÏ¿ä>¿äÄ¿äÅ¿ä†¿ä∏¿ä˝¿ã"¿ã.¿ãN¿ã}¿ãƒ¿å¿å¿å¿åR¿åg¿åw¿å}¿åû¿å¢¿å§¿å•¿å˘¿å˝¿çT¿ç§¿ç∑¿ç˚¿éF¿éi¿éë¿é‘¿é÷   
ParentDataPaintingContextConstraints_LocalSemanticsHandlePipelineOwnerPipelineManifoldRenderObjectRenderObjectWithChildMixin#RenderObjectWithLayoutCallbackMixinContainerParentDataMixinContainerRenderObjectMixin"RelayoutWhenSystemFontsChangeMixin_SemanticsParentData_SemanticsConfigurationProvider_SemanticsFragment_IncompleteSemanticsFragment_RenderObjectSemantics"debugDumpRenderObjectSemanticsTree'_debugCollectRenderObjectSemanticsTrees_SemanticsGeometryDiagnosticsDebugCreator2flutter.rendering.PaintingContext.pushLayer.offsetÅThe `offset` is the offset to pass to the `painter`. In particular, it is
not an offset applied to the layer itself. Layers conceptually by default
have no position or size, though they can transform their contents. For
example, an [OffsetLayer] applies an offset to its children.?flutter.rendering.PaintingContext.pushClipRect.needsCompositingÅˇThe `needsCompositing` argument specifies whether the child needs
compositing. Typically this matches the value of
[RenderObject.needsCompositing] for the caller. If false, this method
returns null, indicating that a layer is no longer necessary. If a render
object calling this method stores the `oldLayer` in its
[RenderObject.layer] field, it should set that field to null.

When `needsCompositing` is false, this method will use a more efficient
way to apply the layer effect than actually creating a layer.5flutter.rendering.PaintingContext.pushClipRect.offsetÄÖThe `offset` argument is the offset from the origin of the canvas'
coordinate system to the origin of the caller's coordinate system.7flutter.rendering.PaintingContext.pushClipRect.oldLayerÅ–For the `oldLayer` argument, specify the layer created in the previous
frame. This gives the engine more information for performance
optimizations. Typically this is the value of [RenderObject.layer] that a
render object creates once, then reuses for all subsequent frames until a
layer is no longer needed (e.g. the render object no longer needs
compositing) or until the render object changes the type of the layer
(e.g. from opacity layer to a clip rect layer).,flutter.rendering.RenderObject.performResizeÅ|Updates the render objects size using only the constraints.

Do not call this function directly: call [layout] instead. This function
is called by [layout] when there is actually work to be done by this
render object during layout. The layout constraints provided by your
parent are available via the [constraints] getter.

This function is called only if [sizedByParent] is true.-flutter.rendering.RenderObject.getTransformToÇÕApplies the paint transform from this [RenderObject] to the `target`
[RenderObject].

Returns a matrix that maps the local paint coordinate system to the
coordinate system of `target`, or a [Matrix4.zero] if the paint transform
can not be computed.

This method throws an exception when the `target` is not in the same render
tree as this [RenderObject], as the behavior is undefined.

This method ignores [RenderObject.paintsChild]. This means it will still
try to compute the paint transform even if this [RenderObject] or
`target` is currently not visible.

If `target` is null, this method returns a matrix that maps from the
local paint coordinate system to the coordinate system of the
[PipelineOwner.rootNode]. ”