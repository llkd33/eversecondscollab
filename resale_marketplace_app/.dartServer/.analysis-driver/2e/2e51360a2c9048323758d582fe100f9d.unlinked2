ÄÖaxisDirection
controllerphysicsviewportBuilderincrementCalculatorexcludeFromSemanticshitTestBehaviorsemanticChildCountdragStartBehaviorrestorationIdscrollBehaviorclipBehavioraxiscreateStatedebugFillPropertiesmaybeOfof"recommendDeferredLoadingForContextensureVisible
scrollablepositionupdateShouldNotify	_positionresolvedPhysics_physicsdeltaToScrollOrigin_effectiveScrollControllervsyncdevicePixelRatio_devicePixelRationotificationContextstorageContext_persistedScrollOffset_configuration_fallbackScrollController_mediaQueryGestureSettings_updatePositionrestoreState
saveOffset	initStatedidChangeDependencies_shouldUpdatePositiondidUpdateWidgetdispose_scrollSemanticsKeysetSemanticsActions_gestureDetectorKey_ignorePointerKey_gestureRecognizers_shouldIgnorePointer_lastCanDrag_lastAxisDirection
setCanDragsetIgnorePointer_drag_hold_handleDragDown_handleDragStart_handleDragUpdate_handleDragEnd_handleDragCancel_disposeHold_disposeDrag#_targetScrollOffsetForPointerScroll_pointerSignalEventDelta_receivedPointerSignal_handlePointerScroll _handleScrollMetricsNotification_buildChromebuild_performEnsureVisiblestatechild	registrar_selectionDelegate_kDefaultDragTargetSize%_kDefaultSelectToScrollVelocityScalar_autoScroller_scheduledLayoutChange _currentDragStartRelatedToOrigin_currentDragEndRelatedToOrigin_selectionStartsInScrollable_scheduleLayoutChange!_selectableStartEdgeUpdateRecords_selectableEndEdgeUpdateRecordsdidChangeSelectableshandleClearSelectionhandleSelectionEdgeUpdate_inferPositionRelatedToOrigin"_updateDragLocationsFromGeometrieshandleSelectAllhandleSelectWordhandleGranularlyExtendSelection"handleDirectionallyExtendSelection_jumpToEdge_globalPositionInScrollable_dragTargetFromEventdispatchSelectionEventToChildensureChildUpdatedallowImplicitScrollingcreateRenderObjectupdateRenderObject_allowImplicitScrolling_semanticChildCount_onScrollToOffsetdescribeSemanticsConfiguration
_innerNodeassembleSemanticsNodeclearSemanticscreateDefaultValuedidUpdateValuefromPrimitivestoPrimitivesenablednoneweightedEventweightedContinuousfreediagonalDragBehaviorhorizontalDetailsverticalDetails_verticalFallbackController_horizontalFallbackController_verticalOuterScrollableKey_horizontalInnerScrollableKeyverticalScrollablehorizontalScrollabletwoDimensionalScrollablehorizontalKey
lockedAxislastDragOffset_evaluateLockedAxisverticalOuterKeyViewportBuilderTwoDimensionalViewportBuilder_EnsureVisibleResults
Scrollable_ScrollableScopeScrollableState_ScrollableSelectionHandler _ScrollableSelectionHandlerState%_ScrollableSelectionContainerDelegate_getDeltaToScrollOrigin_ScrollSemantics_RenderScrollSemantics_RestorableScrollOffsetDiagonalDragBehaviorTwoDimensionalScrollableTwoDimensionalScrollableState_TwoDimensionalScrollableScope_VerticalOuterDimension_VerticalOuterDimensionState_HorizontalInnerDimension_HorizontalInnerDimensionStateÅ†	ToleranceWidgetBuildContextViewportOffsetListFuturevoidViewportListViewGridViewCustomScrollViewofensureVisibleSingleChildScrollViewShrinkWrappingViewportScrollControllerScrollPositionPageViewPageControllerPageStoragekeepScrollOffsetPageStorageKeykey
ScrollViewScrollNotificationNotificationListenerStatefulWidgetAxisDirectiondownDragStartBehaviorstartCliphardEdgeHitTestBehavioropaqueaxisDirectionrightinitialScrollOffsetoffset	animateToScrollConfigurationScrollBehaviorscrollBehaviorScrollPhysicsphysicsAlwaysScrollableScrollPhysicsScrollActionScrollIncrementTypepagelineScrollIncrementCalculatorGestureDetectorexcludeFromSemanticsbool	separatedSemanticsConfigurationscrollChildCountintDragGestureRecognizerdragStartBehaviorRestorationBucketRestorationScopeRestorationManagerString	ScrollbarScrollableDetailsclipBehaviorAxisaxisDirectionToAxisoverrideDiagnosticPropertiesBuilderdebugFillPropertiesaddEnumPropertyDiagnosticsPropertyStringPropertyInheritedElement'getElementForInheritedWidgetOfExactTypewidget
scrollabledependOnInheritedElementcontextmaybeOfaxisFlutterError	fromPartsDiagnosticsNodeErrorSummaryErrorDescription	ErrorHintrecommendDeferredLoadingactivityScrollActivityvelocitygetInheritedWidgetOfExactTypepositiondoubleDurationzeroCurveCurveseaseScrollPositionAlignmentPolicyexplicitRenderObject_performEnsureVisiblefindRenderObject	alignmentdurationcurvealignmentPolicytargetRenderObjectaddAllisEmptyvaluelengthsinglewaitthenInheritedWidgetStateTickerProviderStateMixinRestorationMixinScrollContextcreateScrollPositionOffsetEdgeDraggingAutoScrolleruppixelsleft
controllerTickerProvidercurrentContextrestorationIdDeviceGestureSettingsgetScrollPhysicsapplyTodetachscheduleMicrotaskdisposeattach	protectedregisterForRestorationrestoreOffsetinitialRestore!debugIsSerializableForRestorationServicesBindinginstancerestorationManager	flushData	initState
MediaQuerymaybeGestureSettingsOfmaybeDevicePixelRatioOfViewdevicePixelRatiodidChangeDependenciesshouldNotifyruntimeTypeparentdidUpdateWidget	GlobalKeySetSemanticsActioncurrentStatereplaceSemanticsActionsRawGestureDetectorStateMapTypeGestureRecognizerFactoryverticalVerticalDragGestureRecognizer$GestureRecognizerFactoryWithHandlerssupportedDevicesdragDevicesonDownonStartonUpdateonEndonCancelminFlingDistanceminFlingVelocitymaxFlingVelocityvelocityTrackerBuildermultitouchDragStrategygetMultitouchDragStrategygestureSettings
horizontalHorizontalDragGestureRecognizerreplaceGestureRecognizersRenderIgnorePointerignoringDragScrollHoldControllerDragDownDetailsholdDragStartDetailsdragDragUpdateDetailsupdateDragEndDetailsendcancelminmaxminScrollExtentmaxScrollExtentPointerScrollEventLogicalKeyboardKeyHardwareKeyboardlogicalKeysPressedanypointerAxisModifierscontainskindPointerDeviceKindmouseflipAxisscrollDeltadxdyaxisDirectionIsReversedPointerSignalEventshouldAcceptUserOffsetrespondallowPlatformDefaultGestureBindingpointerSignalResolverregisterPointerScrollInertiaCancelEventpointerScrollPointerEventScrollMetricsNotificationdepthmarkNeedsSemanticsUpdate	directiondecorationClipBehaviorbuildScrollbarbuildOverscrollIndicatorchildListeneronPointerSignalRawGestureDetectorgesturesbehaviorhitTestBehavior	SemanticsexplicitChildNodesIgnorePointerviewportBuilderonNotificationallowImplicitScrollingsemanticChildCountSelectionRegistrarSelectionContainerstate	registrardelegate)MultiSelectableSelectionContainerDelegatevelocityScalaraddListenerremoveListenerSchedulerBindingaddPostFrameCallbacklayoutDidChange
debugLabelSelectionEdgeUpdateEvent
SelectableselectablestoSetremoveWheredidChangeSelectablesSelectionResultClearSelectionEventclearhandleClearSelectionglobalPositiontypeSelectionEventTypeendEdgeUpdate	translateforEndgranularityforStarthandleSelectionEdgeUpdatependingstopAutoScrollstartAutoScrollIfNecessary	scrolling	RenderBoxglobalToLocallocalToGlobalsizeheightwidthinfiniteMatrix4getTransformTocurrentSelectionStartIndexforceUpdateStartSelectionGeometryhasSelectionSelectionPointstartSelectionPointMatrixUtilstransformPointlocalPosition
lineHeightcurrentSelectionEndIndexforceUpdateEndendSelectionPointSelectAllSelectionEventhandleSelectAllSelectWordSelectionEventhandleSelectWordGranularlyExtendSelectionEventhandleGranularlyExtendSelectionisEnd!DirectionallyExtendSelectionEvent"handleDirectionallyExtendSelectionRectfromLTRB
edgeBottombottomedgeToptopjumpTofromLTWH
fromCentercenterSelectionEventstartEdgeUpdategranularlyExtendSelectiondirectionallyExtendSelectionremove	selectAll
selectWordselectParagraphdispatchSelectionEventToChildabsprecisionErrorTolerancedispatchSelectionEventSemanticsNodeRenderViewportexcludeFromScrollingRenderAbstractViewportuseTwoPaneSemanticsdescribeSemanticsConfigurationSingleChildRenderObjectWidgetRenderProxyBoxisSemanticBoundaryhaveDimensionshasImplicitScrollingscrollPositionscrollExtentMaxscrollExtentMinonScrollToOffsetIterablefirstisTaggedassembleSemanticsNodeshowOnScreenrecthasFlagSemanticsFlagisHiddenindexInParentscrollIndex
updateWithconfigchildrenInInversePaintOrderclearSemanticsRestorableValuenotifyListenersObject
kTouchSlopTwoDimensionalViewportTwoDimensionalScrollViewnoneverticalScrollablehorizontalScrollable"dependOnInheritedWidgetOfExactTypetwoDimensionalScrollableScrollMetricsverticalDetailshorizontalDetailshorizontalKeyincrementCalculatordiagonalDragBehaviorverticalOuterKeyverticalOffsethorizontalOffsetweightedEventweightedContinuousfree_handleDragDown_handleDragStartsourceTimeStampdeltaprimaryDelta_handleDragUpdatepixelsPerSecondVelocityprimaryVelocity_handleDragEnd_handleDragCancel
setCanDrag_gestureRecognizersPanGestureRecognizer_configuration_physics_mediaQueryGestureSettings_lastCanDrag_lastAxisDirection_gestureDetectorKey_effectiveScrollControllerStatefulWidgetInheritedWidgetStateTickerProviderStateMixinRestorationMixinScrollContext)MultiSelectableSelectionContainerDelegateSingleChildRenderObjectWidgetRenderProxyBoxRestorableValue
ScrollableScrollableState·§.â˙VàF-≤uÖîÖ¢	Tolerance Önpackage:flutter/physics.dart   Ç0   
dart:async  ÇE   ÇWÇZmathÇZ	dart:math  Çb   package:flutter/foundation.dart  Çå   package:flutter/gestures.dart  Ç¥   package:flutter/rendering.dart  Ç›   package:flutter/scheduler.dart  É   package:flutter/services.dart  É/   
basic.dart  ÉD   framework.dart  É]   gesture_detector.dart  É}   media_query.dart  Éò   notification_listener.dart  ÉΩ   restoration.dart  Éÿ   restoration_properties.dart  É˛   scroll_activity.dart  Ñ   scroll_configuration.dart  ÑA   scroll_context.dart  Ñ_   scroll_controller.dart  ÑÄ   scroll_physics.dart  Ñû   scroll_position.dart  ÑΩ   scrollable_helpers.dart  Ñﬂ   selectable_region.dart  Ö    selection_container.dart  Ö#   ticker_provider.dart  ÖB   	view.dart  ÖV   viewport.dart¿ • ¿Ä«ä <ÄÜÄ§Ä•Ä’ÄŸÄ˝ÅÅDÅoÅíÅ¬ÅıÇ%Ç.Ç/ÇDÇ`ÇaÇãÇ≥Ç‹ÉÉ-É.ÉCÉ\É|ÉóÉºÉ◊É˝ÑÑ@Ñ^ÑÑùÑºÑﬁÑˇÖ"ÖAÖUÖmÖnÖ§Ö•ÖΩÖ€Ö‹Ü'ÜLÜ¶ÜßÜˆá%áMábá~á•áŒá’á÷àààLàôà¿âââXâÅâÖâ–ääbäfä∑ããRãjãnã∫å	ååå`ådå±ç çCçççëç⁄ééké≤é∂éÌéÒè?èêè‹ê'êuêyêáêãê‘ëëTëqë¿ëŸí'íEíîí¢íıì4ì^ìÉìòìßì‘ìÈì˚îî<îcîÄî∂îŒîÁïïAïáïàï√ïıï˚ñIñôñ‚ó/óÄóúó¢ó óﬂòòò=òéòûò§òÚôBôèô‘ö#ölöëöóöÊõ õ&õ6õ<õáõØõƒõÍõÎú úTúZú¶ú—ú◊ù%ùNùTùâù⁄ûûûdû¥üüNüûüÌ†††%†+†|† °°1°Q°R°ü°•°ˆ¢5¢;¢K¢Q¢õ¢Í£.£W£X£ô£Â§2§H§N§ö§Î•"•(•`•Æ•Á•¸¶4¶5¶w¶ƒ¶·¶Áß7ßÉßÕß‚ßËß¯ß˛®O®c®Ü®á®ƒ©©©d©ö©Ø©µ©≈©À™™;™<™Ñ™ä™⁄™‡´,´w´√´…¨¨\¨b¨r¨x¨Ω≠≠8≠9≠ê≠œÆÆÆ[ÆßÆÒØØØaØØØ‡ØÊ∞.∞4∞D∞J∞ô∞ª∞¡∞÷±±±?±ç±ì±‚≤≤%≤p≤º≤¬≤“≤ÿ≥%≥7≥L≥k≥l≥®≥Û≥˘¥F¥ä¥ê¥’µµbµzµèµ∑µ∏µÓµÙ∂∂∂u∂»∑∑)∑*∑^∑d∑ç∑ƒ∑≈∑—∏∏∏∏Y∏Ñ∏’π!πeπiπjπ∫π„πÈ∫∫∫ ∫a∫k∫q∫ΩªªPªvª|ª ººgºÑºäº÷Ω&ΩAΩGΩWΩ]Ω£Ω—ææ`æíæ˜øøoø¬ø˛¿ @9¿ @T¿ @\¿ @Ä¿ @’¿ @€¿ @Ï¿ @¿ @Ò¿ AA¿ AP¿ AV¿ Ay¿ A¿ Aç¿ A»¿ A“¿ Aÿ¿ B$¿ Bk¿ B∑¿ B›¿ B„¿ C1¿ CÅ¿ CÀ¿ C—¿ D¿ Dm¿ Dà¿ Dé¿ D⁄¿ E¿ E¿ E*¿ E0¿ EÄ¿ EÆ¿ E¿ F;¿ FK¿ Fp¿ F®¿ F¿¿ G¿ G3¿ G@¿ G\¿ Gò¿ G›¿ H/¿ HÑ¿ Hª¿ H·¿ H˚¿ I¿ I$¿ I;¿ Ië¿ Iø¿ IŒ¿ I⁄¿ I‚¿ Iı¿ Iˇ¿ J¿ J ¿ J!¿ Jr¿ J∞¿ J∂¿ K¿ KU¿ K•¿ K´¿ K¯¿ LG¿ Lê¿ Lñ¿ L‰¿ M-¿ Mw¿ Mö¿ M†¿ MÔ¿ N¿ Nb¿ Nº¿ NŸ¿ O3¿ Ou¿ O}¿ O®¿ OÚ¿ O¯¿ P
¿ P¿ P¿ P^¿ P{¿ PÅ¿ Pƒ¿ Q¿ Q6¿ Q[¿ Qw¿ Qì¿ Q∫¿ QŸ¿ R5¿ R<¿ Ru¿ Rv¿ R≈¿ S¿ Sc¿ S®¿ S◊¿ Sﬁ¿ T¿ TD¿ TÉ¿ T§¿ Tœ¿ U¿ U7¿ UU¿ Uq¿ Uá¿ U±¿ U·¿ UÍ¿ V¿ V¿ VF¿ Vj¿ Vö¿ V†¿ V°¿ VŸ¿ V¸¿ W¿ W!¿ W>¿ WD¿ Wé¿ Wí¿ Wî¿ Wï¿ WÊ¿ X'¿ XX¿ Xº¿ XΩ¿ X·¿ Y¿ Y¿ Y¿ YA¿ Yf¿ Yj¿ Yl¿ Ym¿ Yô¿ Yù¿ YÁ¿ Z¿ Z¿ Z[¿ Z®¿ Z¨¿ Z˝¿ [2¿ [b¿ [ñ¿ [µ¿ [¬¿ [√¿ \¿ \¿ \[¿ \®¿ \ˆ¿ ]#¿ ]@¿ ]A¿ ]~¿ ]∞¿ ]À¿ ]Ã¿ ^¿ ^]¿ ^c¿ ^¥¿ ^Î¿ _(¿ _]¿ _ì¿ _ ¿ `¿ `¿ `¿ `<¿ `s¿ `t¿ `Ä¿ `ª¿ `º¿ `»¿ `Ï¿ `Ì¿ `˘¿ a-¿ aN¿ aO¿ a[¿ a™¿ a´¿ a∑¿ aÂ¿ aÊ¿ aÚ¿ b'¿ b{¿ b|¿ b¢¿ b—¿ c¿ c¿ cO¿ cj¿ cπ¿ cÊ¿ d2¿ dk¿ d¨¿ d≠¿ d‡¿ dˇ¿ e5¿ eÇ¿ eŒ¿ f¿ f2¿ f8¿ f9¿ fò¿ f∑¿ fË¿ fÏ¿ fÌ¿ f˙¿ g¿ gO¿ gç¿ g¨¿ g‹¿ h9¿ h?¿ hC¿ hD¿ hQ¿ h]¿ hÄ¿ h∑¿ h‚¿ i-¿ iu¿ i≤¿ i∂¿ i∑¿ iƒ¿ i–¿ iÂ¿ j
¿ j@¿ jF¿ j]¿ ja¿ jb¿ jo¿ j{¿ jú¿ jÈ¿ k¿ k[¿ kr¿ kï¿ kô¿ kö¿ kœ¿ l ¿ l3¿ l9¿ lb¿ lé¿ lÿ¿ lÎ¿ lÒ¿ mU¿ mu¿ m«¿ m–¿ n¿ n%¿ n-¿ nT¿ n{¿ n≥¿ n¥¿ o¿ o¿ o	¿ o¿ o"¿ oQ¿ ow¿ ox¿ o≠¿ o◊¿ p$¿ pH¿ p{¿ p¶¿ p€¿ q	¿ q3¿ qB¿ qv¿ q¶¿ qœ¿ r¿ r9¿ rs¿ r}¿ rÖ¿ ræ¿ rÒ¿ r˜¿ r¯¿ s$¿ s=¿ sC¿ sG¿ sH¿ sU¿ sa¿ st¿ sô¿ sƒ¿ s—¿ t¿ t0¿ t6¿ t7¿ tO¿ tu¿ tä¿ té¿ tè¿ tû¿ tü¿ t‘¿ t’¿ t·¿ tÓ¿ u)¿ u]¿ uß¿ u≠¿ u±¿ u≤¿ u‡¿ u·¿ v"¿ vN¿ vÅ¿ vÇ¿ v◊¿ w¿ wC¿ wh¿ wi¿ w¿ wõ¿ wú¿ w®¿ wµ¿ w’¿ x'¿ x5¿ x;¿ xM¿ xì¿ x·¿ y+¿ yi¿ yÑ¿ yë¿ yÆ¿ y ¿ z¿ z7¿ zå¿ zÒ¿ {.¿ {K¿ {|¿ {Ø¿ {‰¿ |¿ |H¿ |é¿ |‘¿ }¿ }z¿ }ø¿ ~"¿ ~g¿ ~Æ¿ ~√¿ ~÷¿ ~„¿ ¿ C¿ p¿ «¿ ﬂ¿ ÄD¿ ÄÉ¿ Ä†¿ Ä—¿ Å¿ Å9¿ Åh¿ Åù¿ Å„¿ Ç)¿ Ço¿ Çœ¿ É¿ Éw¿ Éº¿ Ñ¿ Ñ¿ Ñ+¿ Ñ8¿ Ñ@¿ ÑF¿ Ñ`¿ ÑÜ¿ Ñ∫¿ Ö¿ Ö¿ Ö¿ Ö¿ Ö)¿ Ö6¿ Ö\¿ ÖÖ¿ Öì¿ Öô¿ Öª¿ ÖÔ¿ Ü¿ Üs¿ Ü§¿ Ü™¿ ÜÆ¿ ÜØ¿ Ü√¿ Üƒ¿ Ü”¿ ÜÚ¿ ÜÛ¿ á%¿ á@¿ á[¿ áÑ¿ áà¿ áâ¿ áΩ¿ à¿ àX¿ àÅ¿ àú¿ àŒ¿ àÈ¿ â7¿ âP¿ âf¿ âl¿ âp¿ âq¿ âß¿ âˆ¿ ä"¿ ä>¿ äB¿ äC¿ äs¿ ä¬¿ äÓ¿ ã¿ ã"¿ ã&¿ ã'¿ ãD¿ ãz¿ ã»¿ å¿ å$¿ å2¿ å8¿ åh¿ å∑¿ å„¿ å¯¿ ç¿ ç(¿ çC¿ çG¿ çH¿ ç`¿ çr¿ çv¿ çw¿ çè¿ ç°¿ ç•¿ ç¶¿ ç∏¿ çπ¿ é	¿ éC¿ éÄ¿ éï¿ éÿ¿ é¯¿ éˇ¿ è¿ è¿ èO¿ èú¿ è™¿ èË¿ êB¿ ê\¿ ê°¿ ê‚¿ ë4¿ ëÑ¿ ë‘¿ í#¿ í4¿ íc¿ íd¿ í™¿ í”¿ ì¿ ì/¿ ì6¿ ì7¿ ìÇ¿ ìÜ¿ ìá¿ ì¡¿ ì˝¿ îJ¿ îô¿ î¿¿ îÛ¿ ï¿ ï¿ ïG¿ ïõ¿ ï¿ ñ3¿ ñê¿ ñ†¿ ñ®¿ ñ¯¿ ó¿ óN¿ óâ¿ ó™¿ ò¿ ò¿ ò¿ ò¿ ò?¿ òh¿ ò∏¿ ô
¿ ôK¿ ôp¿ ôv¿ ôz¿ ô{¿ ôÕ¿ ô¿ ö(¿ öj¿ öõ¿ ö€¿ ö„¿ öÈ¿ ö˚¿ öˇ¿ õ ¿ õ<¿ õu¿ õú¿ õ ¿ õ˝¿ ú¿ ú¿ ú/¿ ú>¿ úÜ¿ úï¿ úú¿ ú†¿ ú°¿ ú≤¿ ú≥¿ ú¿¿ úÃ¿ úÛ¿ ù¿ ùp¿ ù∑¿ ùæ¿ ùÊ¿ û¿ û¿ ûv¿ û∫¿ û‡¿ û¯¿ ü¿ ü)¿ üZ¿ ü}¿ ü°¿ ü ¿ üˆ¿ †3¿ †O¿ †ç¿ †Ø¿ †’¿ °¿ °C¿ °R¿ °_¿ °j¿ °s¿ °z¿ °{¿ °£¿ °„¿ ¢¿ ¢>¿ ¢b¿ ¢Ä¿ ¢ƒ¿ ¢·¿ £¿ £3¿ £>¿ £G¿ £M¿ £N¿ £z¿ £{¿ £æ¿ §¿ §*¿ §V¿ §k¿ §á¿ §•¿ §º¿ §≈¿ §À¿ §Ã¿ §ﬂ¿ §„¿ §‰¿ •2¿ •~¿ •ƒ¿ •Û¿ ¶¿ ¶*¿ ¶Q¿ ¶p¿ ¶Ã¿ ¶Ú¿ ¶˘¿ ß>¿ ßL¿ ßh¿ ßÇ¿ ßñ¿ ßæ¿ ßÏ¿ ßÛ¿ ®+¿ ®/¿ ®0¿ ®=¿ ®I¿ ®é¿ ®π¿ ©	¿ ©`¿ ©d¿ ©f¿ ©g¿ ©ö¿ ©û¿ ©€¿ ™¿ ™X¿ ™~¿ ™ó¿ ™≥¿ ™–¿ ™È¿ ™Ô¿ ™¿ ´¿ ´0¿ ´F¿ ´l¿ ´m¿ ´y¿ ´—¿ ´”¿ ´‘¿ ¨(¿ ¨i¿ ¨j¿ ¨v¿ ¨ã¿ ¨¢¿ ¨‚¿ ¨˝¿ ≠¿ ≠%¿ ≠)¿ ≠*¿ ≠6¿ ≠v¿ ≠ú¿ ≠Õ¿ Æ¿ Æ¿ Æ¿ Æ¿ Æ¿ Æ,¿ ÆN¿ Æc¿ Æg¿ Æh¿ Æt¿ Æõ¿ Æ∫¿ Æ›¿ Ø¿ Ø¿ Ø#¿ Ø'¿ Ø)¿ Ø*¿ Øy¿ Ø§¿ Ø®¿ Ø¯¿ ∞I¿ ∞î¿ ∞§¿ ±¿ ±e¿ ±Å¿ ±±¿ ±¿¿ ±ˇ¿ ≤	¿ ≤;¿ ≤?¿ ≤@¿ ≤Ä¿ ≤≥¿ ≤¥¿ ≤Î¿ ≥-¿ ≥.¿ ≥M¿ ≥}¿ ≥§¿ ≥–¿ ≥˙¿ ≥˚¿ ¥L¿ ¥y¿ ¥z¿ ¥¶¿ ¥¬¿ ¥È¿ µ¿ µ¿ µ¿ µP¿ µg¿ µô¿ µù¿ µû¿ µË¿ ∂(¿ ∂I¿ ∂k¿ ∂y¿ ∂¿ ∂¢¿ ∂Ï¿ ∑¿ ∑!¿ ∑)¿ ∑O¿ ∑h¿ ∑¨¿ ∑∞¿ ∑±¿ ∑Ù¿ ∏¿ ∏¿ ∏h¿ ∏ä¿ ∏ê¿ ∏‡¿ π/¿ π|¿ πÕ¿ πﬁ¿ π‰¿ ∫2¿ ∫Ç¿ ∫”¿ ª¿ ªn¿ ª»¿ ª…¿ ª’¿ ªı¿ º4¿ ºg¿ º≠¿ º¥¿ ºÂ¿ Ω+¿ Ω2¿ ΩT¿ ΩX¿ ΩY¿ Ωe¿ Ω©¿ Ωÿ¿ æ¿ æ2¿ æ]¿ æá¿ æµ¿ æπ¿ æ∫¿ æ∆¿ ø¿ ør¿ øü¿ ø˜¿ ø˝¿ ¿>¿ ¿x¿ ¿‘¿ ¡¿ ¡9¿ ¡T¿ ¡]¿ ¡å¿ ¡Ø¿ ¡◊¿ ¡‡¿ ¡Ì¿ ¬K¿ ¬ô¿ ¬¥¿ ¬œ¿ ¬ÿ¿ √	¿ √.¿ √V¿ √_¿ √e¿ √∞¿ √±¿ ƒ¿ ƒT¿ ƒf¿ ƒì¿ ƒπ¿ ƒŒ¿ ƒ‘¿ ƒ¸¿ ≈I¿ ≈n¿ ≈ñ¿ ≈û¿ ≈§¿ ≈∑¿ ≈ª¿ ≈º¿ ≈¸¿ ∆F¿ ∆ä¿ ∆≥¿ «¿ «Q¿ «°¿ «Ò¿ »+¿ »Z¿ »b¿ »∑¿ »◊¿ »ﬂ¿ »Â¿ …&¿ …Å¿ …Ö¿ …Ü¿ …æ¿ …¯¿ …˛¿  M¿  É¿  —¿ À¿ À?¿ Àa¿ ÀÅ¿ Àà¿ À…¿ Ã¿ ÃK¿ Ãw¿ Ã¡¿ Õ¿ Õ>¿ ÕÄ¿ Õ‚¿ Œ"¿ Œ:¿ Œz¿ ŒÉ¿ Œ»¿ Œ€¿ œ¿ œ¿ œ¿ œ<¿ œÇ¿ œÿ¿ œ˝¿ –;¿ –õ¿ –Ÿ¿ –Ò¿ —-¿ —6¿ —y¿ —å¿ —≤¿ —ª¿ —¡¿ —≈¿ —∆¿ —“¿ “¿ “@¿ “Å¿ “’¿ ”¿ ”-¿ ”3¿ ”F¿ ”J¿ ”K¿ ”W¿ ”ú¿ ”Ú¿ ‘4¿ ‘^¿ ‘q¿ ‘u¿ ‘v¿ ‘Ç¿ ‘‹¿ ’-¿ ’z¿ ’…¿ ÷¿ ÷m¿ ÷ï¿ ÷µ¿ ÷ª¿ ÷Œ¿ ÷“¿ ÷”¿ ÷ﬂ¿ ◊?¿ ◊ì¿ ◊‡¿ ÿ/¿ ÿn¿ ÿ”¿ ÿ˚¿ Ÿ¿ Ÿ!¿ Ÿ4¿ Ÿ8¿ Ÿ9¿ Ÿ]¿ Ÿ~¿ Ÿú¿ Ÿº¿ Ÿ–¿ ⁄
¿ ⁄;¿ ⁄~¿ ⁄ã¿ ⁄«¿ ⁄˙¿ €?¿ €E¿ €s¿ €Å¿ €á¿ €€¿ ‹#¿ ‹t¿ ‹Ö¿ ‹ü¿ ‹¶¿ ‹’¿ ‹ﬁ¿ ‹Á¿ ›¿ ›(¿ ›/¿ ›R¿ ›o¿ ›∑¿ ﬁ	¿ ﬁ]¿ ﬁo¿ ﬁy¿ ﬁ´¿ ﬁ¸¿ ﬂ¿ ﬂ¿ ﬂD¿ ﬂè¿ ﬂô¿ ﬂ©¿ ﬂ…¿ ‡¿ ‡V¿ ‡h¿ ‡r¿ ‡ù¿ ‡Á¿ ‡˘¿ ·¿ ·-¿ ·v¿ ·Ä¿ ·ê¿ ·Ø¿ ·˜¿ ‚I¿ ‚ù¿ ‚Ø¿ ‚π¿ ‚Î¿ „<¿ „N¿ „X¿ „Ñ¿ „œ¿ „Ÿ¿ „È¿ ‰¿ ‰J¿ ‰ï¿ ‰ß¿ ‰±¿ ‰‹¿ Â&¿ Â8¿ ÂB¿ Âl¿ Âµ¿ Âø¿ Âœ¿ Â’¿ ÂŸ¿ Â⁄¿ Ê¿ Ê`¿ Ê§¿ Ê¿ Á¿ Á¿ Á¿ Á\¿ Áx¿ Áú¿ Á¬¿ ÁÈ¿ Á¿ ÁÙ¿ Áı¿ Ë¿ Ë`¿ Ëz¿ Ë©¿ Ë¯¿ È ¿ ÈM¿ Èö¿ È¬¿ È˚¿ Í7¿ Í_¿ ÍÆ¿ Í˚¿ Î ¿ Î\¿ Îö¿ Î√¿ ÎÌ¿ Ï¿ Ïi¿ Ï∏¿ Ïæ¿ Ì¿ Ì¿ Ì¿ Ì¿ ÌE¿ Ìy¿ Ì–¿ Ó¿ Ó,¿ Ó~¿ Ó∑¿ Ó˙¿ ÔH¿ Ôc¿ Ô~¿ Ôá¿ Ô∞¿ Ô¯¿ ¿ Y¿ è¿ ‹¿ ‚¿ Ò5¿ Òg¿ Òç¿ Ò›¿ Ú¿ ÚY¿ Ú£¿ Úæ¿ ÚŸ¿ Ú‚¿ ÛG¿ Ûû¿ Û‘¿ Ù¿ Ù%¿ Ù)¿ Ù*¿ Ù6¿ ÙI¿ Ùx¿ Ù•¿ Ù…¿ ÙÌ¿ ı¿ ı¿ ı¿ ı	¿ ıK¿ ı}¿ ı¬¿ ˆ¿ ˆO¿ ˆñ¿ ˆõ¿ ˆù¿ ˆû¿ ˆ‡¿ ˜¿ ˜"¿ ˜]¿ ˜´¿ ˜Ú¿ ¯¿ ¯P¿ ¯T¿ ¯§¿ ¯Ú¿ ˘B¿ ˘ä¿ ˘£¿ ˘‚¿ ˘˝¿ ˙¿ ˙(¿ ˙R¿ ˙j¿ ˙ê¿ ˙°¿ ˙Á¿ ˙Ë¿ ˚	¿ ˚.¿ ˚O¿ ˚b¿ ˚c¿ ˚o¿ ˚≥¿ ˚÷¿ ˚¿ ¸&¿ ¸T¿ ¸f¿ ¸m¿ ¸q¿ ¸r¿ ¸~¿ ¸’¿ ¸Ê¿ ˝¿ ˝2¿ ˝N¿ ˝¿ ˝É¿ ˝Ö¿ ˝Ü¿ ˝º¿ ˝◊¿ ˝˝¿ ˛'¿ ˛?¿ ˛e¿ ˛{¿ ˛ò¿ ˛—¿ ˇ¿ ˇ¿ ˇL¿ ˇP¿ ˇQ¿ ˇñ¿ ˇ¬¿ ˇﬁ¿ ¿ #¿ 1¿ 7¿ o¿ Ü¿ ª¿ €¿ ﬂ¿ ‡¿¿R¿r¿ù¿…¿◊¿›¿¿"¿&¿'¿4¿5¿k¿á¿Æ¿’¿„¿È¿
¿*¿.¿/¿_¿â¿≥¿€¿‚¿ ¿¿¿¿X¿ä¿∞¿”¿‡¿¿D¿z¿∞¿·¿<¿q¿y¿¿É¿Ñ¿°¿¢¿Æ¿Ã¿‰¿¿-¿3¿è¿®¿„¿Ò¿˜¿¯¿I¿J¿f¿≠¿È¿	¿	]¿	û¿	ª¿	 ¿
 ¿
5¿
?¿
\¿
d¿
j¿
ñ¿
‡¿3¿7¿8¿D¿^¿z¿ë¿ï¿ó¿ò¿Í¿¯¿9¿E¿m¿n¿z¿§¿ª¿ø¿¿¿Ã¿Ù¿¿¿¿!¿<¿N¿R¿S¿_¿Ñ¿Ü¿á¿ó¿ò¿Ÿ¿˘¿L¿h¿ß¿≠¿˛¿¿%¿&¿k¿ä¿ê¿‡¿/¿@¿A¿Ü¿¿¿∆¿¿T¿h¿~¿¿«¿◊¿ﬂ¿·¿‚¿*¿t¿ã¿è¿‡¿'¿c¿™¿ª¿ø¿
¿Y¿ë¿ï¿£¿ß¿Ú¿)¿z¿à¿¿¿˜¿˝¿N¿]¿Ä¿è¿¥¿◊¿˙¿¿0¿W¿í¿»¿˚¿¿¿O¿c¿ñ¿ó¿œ¿’¿¿i¿ñ¿ó¿Õ¿”¿¿e¿ê¿ë¿ﬁ¿‰¿3¿}¿É¿ì¿ô¿Ë¿¿D¿E¿É¿â¿∞¿Ë¿È¿!¿'¿i¿∫¿¯¿¿¿W¿]¿Ñ¿ß¿®¿‚¿Ë¿¿8¿9¿u¿{¿¢¿œ¿–¿‹¿ 0¿ 1¿ Å¿ ™¿ ∞¿ ”¿ Ÿ¿ Á¿!D¿!N¿!T¿!ñ¿!‰¿"5¿"u¿"{¿" ¿"¿"ˆ¿#¿#¿#X¿#é¿#÷¿$	¿$_¿$å¿$ê¿$ë¿$·¿$¿$ˆ¿%¿%¿%-¿%Ñ¿%é¿%î¿%÷¿&$¿&u¿&µ¿&ª¿'¿'O¿'U¿'¶¿'≈¿'À¿'€¿'·¿(.¿({¿(Ω¿)
¿)¿)?¿)w¿)è¿)‡¿* ¿*-¿*I¿*ú¿*Ó¿+=¿+ç¿+≥¿+Õ¿+⁄¿+Ê¿+Ó¿,¿,¿,(¿,,¿,.¿,/¿,i¿,m¿,æ¿-¿-¿- ¿-m¿-≥¿-˚¿.>¿.p¿.æ¿.Ô¿/"¿/Å¿/‚¿/„¿0¿0¿0V¿0\¿0™¿0…¿0Ù¿12¿1h¿1l¿1m¿1°¿1ß¿1‚¿1Ë¿28¿2W¿2Ñ¿2ƒ¿2¸¿3 ¿3¿3¿3¿3/¿3d¿3ú¿3¢¿3Ÿ¿4¿4¿40¿44¿45¿4B¿4N¿4ã¿4±¿4Û¿4Ù¿5¿5Y¿5ì¿5‡¿6¿69¿6t¿6§¿6–¿7¿7W¿7t¿7©¿7„¿7Î¿7Ò¿7Ú¿8¿8]¿8ô¿8Ê¿9
¿9A¿9~¿9∞¿9ﬁ¿:¿:g¿:Ñ¿:ª¿:˜¿:ˇ¿;¿;	¿;
¿;¿;#¿;J¿;V¿;§¿;Ì¿;Ù¿< ¿<R¿<ü¿<¶¿<ß¿<”¿<˛¿=$¿=N¿=p¿=¶¿=ﬂ¿>6¿>g¿>}¿>∞¿>Ì¿?¿?A¿?|¿?º¿?Ò¿@,¿@]¿@Æ¿@⁄¿A
¿AE¿AÑ¿A„¿B¿B4¿Bm¿B∞¿Bœ¿C¿CK¿Cë¿C ¿D	¿D>¿Dï¿DÌ¿D¸¿E	¿E¿E¿E$¿E%¿Ej¿E£¿E§¿E˛¿F¿F¿F¿F¿F/¿F[¿Fâ¿Fû¿F¢¿F§¿F•¿F€¿G¿GR¿Gu¿G¥¿G›¿H	¿H#¿H)¿H*¿Hj¿Hk¿Hw¿Hø¿H¡¿H¬¿HÔ¿I"¿ID¿IS¿It¿Iò¿I∫¿I–¿I„¿I˚¿J¿J:¿JW¿Jp¿Jã¿J∆¿K¿K ¿KS¿KÖ¿KÜ¿Kí¿K‚¿K‰¿KÂ¿L"¿LU¿Lï¿L√¿M
¿M¿M¿M9¿M:¿Mu¿MÅ¿M∞¿MÀ¿MÁ¿N¿N-¿Nâ¿NØ¿N∂¿N¬¿Nœ¿O ¿Oq¿Oò¿Oü¿Oƒ¿O»¿O…¿Oı¿P¿PR¿P£¿P”¿P¯¿QE¿QR¿Qk¿Qq¿Qu¿Qv¿QÇ¿Q¥¿Qÿ¿Q˛¿R¿R<¿Rp¿Rñ¿R·¿R˚¿S2¿S8¿S\¿S`¿Sa¿Sm¿S°¿SŒ¿SÚ¿T¿T'¿TM¿Tp¿T™¿T‚¿U¿UE¿Uo¿U§¿U¬¿U◊¿V¿VV¿Ví¿V≤¿V·¿W¿W1¿WO¿Wü¿W©¿WØ¿W‘¿Wÿ¿WŸ¿WÂ¿X¿X`¿Xê¿Xº¿X‚¿Y¿Y<¿YC¿Yä¿Y∫¿YÊ¿Z¿Z:¿Zf¿Zm¿Zn¿Zí¿Z∏¿ZÓ¿[$¿[4¿[Z¿[v¿[Ω¿[Û¿\¿\7¿\l¿\°¿\“¿]¿]-¿]i¿]ö¿]…¿^ ¿^
¿^¿^*¿^;¿^j¿^±¿^Õ¿^Ï¿_3¿_C¿_]¿_á¿_ç¿_ø¿_√¿_ƒ¿_–¿` ¿`¿`2¿`m¿`®¿`Á¿a#¿a>¿aE¿aÜ¿a¬¿a›¿a‰¿aÂ¿b	¿b/¿b>¿bm¿b°¿b«¿c¿c¿c@¿cD¿cE¿cQ¿cn¿câ¿c†¿cƒ¿cÍ¿c˘¿d(¿d\¿dÇ¿d¥¿d∫¿dŸ¿d›¿dﬁ¿dÍ¿e
¿e.¿eT¿e¶¿e∫¿e€¿eÎ¿f¿fN¿ft¿fâ¿fÿ¿g%¿go¿gæ¿gÊ¿h(¿hÜ¿hﬁ¿i¿i'¿iT¿iÉ¿i¥¿iﬂ¿j¿jR¿jî¿j÷¿k2¿ks¿kµ¿k∆¿k’¿k‚¿l4¿lÇ¿lƒ¿l„¿m¿m/¿mi¿m«¿m”¿m›¿mÌ¿mÛ¿m˜¿m¯¿n¿n@¿ny¿n†¿nŒ¿n˜¿n˛¿oD¿oj¿o∑¿oª¿oΩ¿oæ¿oÌ¿p"¿pF¿pU¿py¿pù¿pø¿p’¿pË¿q ¿q¿q?¿q\¿qu¿qê¿qÀ¿r'¿r(¿r]¿rê¿rë¿rù¿rÒ¿rÛ¿rÙ¿s3¿s^¿s_¿sî¿s“¿t¿tG¿tH¿tT¿tu¿t¶¿t˙¿u¿u!¿u"¿up¿uº¿v
¿v¿vE¿v`¿v|¿v£¿v¬¿w¿wD¿wK¿wÖ¿w£¿w≥¿w—¿wÌ¿x¿x-¿x6¿xg¿xw¿xï¿x±¿x«¿xÒ¿x˙¿y¿y¿y/¿y3¿y4¿y@¿y`¿yÑ¿y™¿yÒ¿z¿z1¿zA¿zp¿z§¿z ¿zﬂ¿{*¿{y¿{ ¿|¿|f¿|∞¿|Ï¿}>¿}å¿}Œ¿}Ì¿~¿~9¿~s¿~—¿~›¿~Á¿~˜¿~˝¿¿¿¿J¿É¿™¿ÿ¿Ä¿Ä¿ÄN¿Ät¿Ä¡¿Ä≈¿Ä«   Å/// @docImport 'package:flutter/material.dart';
///
/// @docImport 'page_storage.dart';
/// @docImport 'page_view.dart';
/// @docImport 'scroll_metrics.dart';
/// @docImport 'scroll_notification.dart';
/// @docImport 'scroll_view.dart';
/// @docImport 'single_child_scroll_view.dart';
/// @docImport 'two_dimensional_scroll_view.dart';
/// @docImport 'two_dimensional_viewport.dart';Ç/   ÇDÇ[ÇZ Ça   Çã   Ç≥   Ç‹   É   É.   ÉC   É\   É|   Éó   Éº   É◊   É˝   Ñ   Ñ@   Ñ^   Ñ   Ñù   Ñº   Ñﬁ   Ñˇ   Ö"   ÖA   ÖU   ÖnÖîÖ¢ â¿ Nãì:ì:ä+/// A widget that manages scrolling in one dimension and informs the [Viewport]
/// through which the content is viewed.
///
/// [Scrollable] implements the interaction model for a scrollable widget,
/// including gesture recognition, but does not have an opinion about how the
/// viewport, which actually displays the children, is constructed.
///
/// It's rare to construct a [Scrollable] directly. Instead, consider [ListView]
/// or [GridView], which combine scrolling, viewporting, and a layout model. To
/// combine layout models (or to use a custom layout mode), consider using
/// [CustomScrollView].
///
/// The static [Scrollable.of] and [Scrollable.ensureVisible] functions are
/// often used to interact with the [Scrollable] widget inside a [ListView] or
/// a [GridView].
///
/// To further customize scrolling behavior with a [Scrollable]:
///
/// 1. You can provide a [viewportBuilder] to customize the child model. For
///    example, [SingleChildScrollView] uses a viewport that displays a single
///    box child whereas [CustomScrollView] uses a [Viewport] or a
///    [ShrinkWrappingViewport], both of which display a list of slivers.
///
/// 2. You can provide a custom [ScrollController] that creates a custom
///    [ScrollPosition] subclass. For example, [PageView] uses a
///    [PageController], which creates a page-oriented scroll position subclass
///    that keeps the same page visible when the [Scrollable] resizes.
///
/// ## Persisting the scroll position during a session
///
/// Scrollables attempt to persist their scroll position using [PageStorage].
/// This can be disabled by setting [ScrollController.keepScrollOffset] to false
/// on the [controller]. If it is enabled, using a [PageStorageKey] for the
/// [key] of this widget (or one of its ancestors, e.g. a [ScrollView]) is
/// recommended to help disambiguate different [Scrollable]s from each other.
///
/// See also:
///
///  * [ListView], which is a commonly used [ScrollView] that displays a
///    scrolling, linear list of child widgets.
///  * [PageView], which is a scrolling list of child widgets that are each the
///    size of the viewport.
///  * [GridView], which is a [ScrollView] that displays a scrolling, 2D array
///    of child widgets.
///  * [CustomScrollView], which is a [ScrollView] that creates custom scroll
///    effects using slivers.
///  * [SingleChildScrollView], which is a scrollable widget that has a single
///    child.
///  * [ScrollNotification] and [NotificationListener], which can be used to watch
///    the scroll position without using a [ScrollController]. ì`Ç&ìã ìãìï "/// Creates a widget that scrolls.ìú	ì£ì¢  ì´'ì±ì∞  ìÿìﬁì›  ìÌìÛìÚ  ìˇîî  î"î(î'  î@!îFîE  îgîmîl  îÑ0îäîâ  î∫î¿îø  î“îÿî◊  îÎ!îÒî  ï-ïï  ì¿ìÕìŒî\îùîÆîØîˇïïï)ï8ï9ïHïNïÑïjïbïOïeïÄïmïÉïäÇxóıóıÇ>/// {@template flutter.widgets.Scrollable.axisDirection}
/// The direction in which this widget scrolls.
///
/// For example, if the [Scrollable.axisDirection] is [AxisDirection.down],
/// increasing the scroll position will cause content below the bottom of the
/// viewport to become visible through the viewport. Similarly, if the
/// axisDirection is [AxisDirection.right], increasing the scroll position
/// will cause content beyond the right edge of the viewport to become visible
/// through the viewport.
///
/// Defaults to [AxisDirection.down].
/// {@endtemplate} òÉ·õﬁõﬁÉñ/// {@template flutter.widgets.Scrollable.controller}
/// An object that can be used to control the position to which this widget is
/// scrolled.
///
/// A [ScrollController] serves several purposes. It can be used to control
/// the initial scroll position (see [ScrollController.initialScrollOffset]).
/// It can be used to control whether the scroll view should automatically
/// save and restore its scroll position in the [PageStorage] (see
/// [ScrollController.keepScrollOffset]). It can be used to read the current
/// scroll position (see [ScrollController.offset]), or change it (see
/// [ScrollController.animateTo]).
///
/// If null, a [ScrollController] will be created internally by [Scrollable]
/// in order to create and manage the [ScrollPosition].
///
/// See also:
///
///  * [Scrollable.ensureVisible], which animates the scroll position to
///    reveal a given [BuildContext].
/// {@endtemplate} õÌÖb°H°HÖ/// {@template flutter.widgets.Scrollable.physics}
/// How the widgets should respond to user input.
///
/// For example, determines how the widget continues to animate after the
/// user stops dragging the scroll view.
///
/// Defaults to matching platform conventions via the physics provided from
/// the ambient [ScrollConfiguration].
///
/// If an explicit [ScrollBehavior] is provided to
/// [Scrollable.scrollBehavior], the [ScrollPhysics] provided by that behavior
/// will take precedence after [Scrollable.physics].
///
/// The physics can be changed dynamically, but new physics will only take
/// effect if the _class_ of the provided object changes. Merely constructing
/// a new instance with a different configuration is insufficient to cause the
/// physics to be reapplied. (This is because the final object used is
/// generated dynamically, which can be relatively expensive, and it would be
/// inefficient to speculatively create this object each frame to see if the
/// physics should be updated.)
///
/// See also:
///
///  * [AlwaysScrollableScrollPhysics], which can be used to indicate that the
///    scrollable should react to scroll requests (and possible overscroll)
///    even if the scrollable's contents fit without scrolling being necessary.
/// {@endtemplate} °TÇ£F£FÅ«/// Builds the viewport through which the scrollable content is displayed.
///
/// A typical viewport uses the given [ViewportOffset] to determine which part
/// of its content is actually visible through the viewport.
///
/// See also:
///
///  * [Viewport], which is a viewport that displays a list of slivers.
///  * [ShrinkWrappingViewport], which is a viewport that displays a list of
///    slivers and sizes itself based on the size of the slivers. £ZÇÿ¶¶Çâ/// {@template flutter.widgets.Scrollable.incrementCalculator}
/// An optional function that will be called to calculate the distance to
/// scroll when the scrollable is asked to scroll via the keyboard using a
/// [ScrollAction].
///
/// If not supplied, the [Scrollable] will scroll a default amount when a
/// keyboard navigation key is pressed (e.g. pageUp/pageDown, control-upArrow,
/// etc.), or otherwise invoked by a [ScrollAction].
///
/// If [incrementCalculator] is null, the default for
/// [ScrollIncrementType.page] is 80% of the size of the scroll window, and
/// for [ScrollIncrementType.line], 50 logical pixels.
/// {@endtemplate} ¶7ÇM®p®pÇ/// {@template flutter.widgets.scrollable.excludeFromSemantics}
/// Whether the scroll actions introduced by this [Scrollable] are exposed
/// in the semantics tree.
///
/// Text fields with an overflow are usually scrollable to make sure that the
/// user can get to the beginning/end of the entered text. However, these
/// scrolling actions are generally not exposed to the semantics layer.
/// {@endtemplate}
///
/// See also:
///
///  * [GestureDetector.excludeFromSemantics], which is used to accomplish the
///    exclusion. ®âÅ∞™*™*Åv/// {@template flutter.widgets.scrollable.hitTestBehavior}
/// Defines the behavior of gesture detector used in this [Scrollable].
///
/// This defaults to [HitTestBehavior.opaque] which means it prevents targets
/// behind this [Scrollable] from receiving events.
/// {@endtemplate}
///
/// See also:
///
///  * [HitTestBehavior], for an explanation on different behaviors. ™>Ç¯≠$≠$Çº/// The number of children that will contribute semantic information.
///
/// The value will be null if the number of children is unknown or unbounded.
///
/// Some subtypes of [ScrollView] can infer this value automatically. For
/// example [ListView] will use the number of widgets in the child list,
/// while the [ListView.separated] constructor will use half that amount.
///
/// For [CustomScrollView] and other types which do not receive a builder
/// or list of widgets, the child count must be explicitly provided.
///
/// See also:
///
///  * [CustomScrollView], for an explanation of scroll semantics.
///  * [SemanticsConfiguration.scrollChildCount], the corresponding semantics property. ≠íÉo∞∞É/// {@template flutter.widgets.scrollable.dragStartBehavior}
/// Determines the way that drag start behavior is handled.
///
/// If set to [DragStartBehavior.start], scrolling drag behavior will
/// begin at the position where the drag gesture won the arena. If set to
/// [DragStartBehavior.down] it will begin at the position where a down
/// event is first detected.
///
/// In general, setting this to [DragStartBehavior.start] will make drag
/// animation smoother and setting it to [DragStartBehavior.down] will make
/// drag behavior feel slightly more reactive.
///
/// By default, the drag start behavior is [DragStartBehavior.start].
///
/// See also:
///
///  * [DragGestureRecognizer.dragStartBehavior], which gives an example for
///    the different behaviors.
///
/// {@endtemplate} ±Çc≥\≥\Ç+/// {@template flutter.widgets.scrollable.restorationId}
/// Restoration ID to save and restore the scroll offset of the scrollable.
///
/// If a restoration id is provided, the scrollable will persist its current
/// scroll offset and restore it during state restoration.
///
/// The scroll offset is persisted in a [RestorationBucket] claimed from
/// the surrounding [RestorationScope] using the provided restoration ID.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.
/// {@endtemplate} ≥nÇGµßµßÇ/// {@template flutter.widgets.scrollable.scrollBehavior}
/// A [ScrollBehavior] that will be applied to this widget individually.
///
/// Defaults to null, wherein the inherited [ScrollBehavior] is copied and
/// modified to alter the viewport decoration, like [Scrollbar]s.
///
/// [ScrollBehavior]s also provide [ScrollPhysics]. If an explicit
/// [ScrollPhysics] is provided in [physics], it will take precedence,
/// followed by [scrollBehavior], and then the inherited ancestor
/// [ScrollBehavior].
/// {@endtemplate} µ∫Åm∑∑ÅG/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.hardEdge].
///
/// This is passed to decorators in [ScrollableDetails], and does not directly affect
/// clipping of the [Scrollable]. This reflects the same [Clip] that is provided
/// to [ScrollView.clipBehavior] and is supplied to the [Viewport]. ∑,Äó∑ò∑ò\/// The axis along which the scroll view scrolls.
///
/// Determined by the [axisDirection].   ∑«?∑„∑„   ∑«∑»∏
Å^∏∏  ∏/&∏L∏K  ∏
∏πláÉΩÎΩÎÑ0/// The state from the closest instance of this class that encloses the given
/// context, or null if none is found.
///
/// Typical usage is as follows:
///
/// ```dart
/// ScrollableState? scrollable = Scrollable.maybeOf(context);
/// ```
///
/// Calling this method will create a dependency on the [ScrollableState]
/// that is returned, if there is one. This is typically the closest
/// [Scrollable], but may be a more distant ancestor if [axis] is used to
/// target a specific [Scrollable].
///
/// Using the optional [Axis] is useful when Scrollables are nested and the
/// target [Scrollable] is not the closest instance. When [axis] is provided,
/// the nearest enclosing [ScrollableState] in that [Axis] is returned, or
/// null if there is none.
///
/// This finds the nearest _ancestor_ [Scrollable] of the `context`. This
/// means that if the `context` is that of a [Scrollable], it will _not_ find
/// _that_ [Scrollable].
///
/// See also:
///
/// * [Scrollable.of], which is similar to this method, but asserts
///   if no [Scrollable] ancestor is found. ΩÛææ   æ

ææ   ¿ @Ûâ,¿ E«¿ E«ÑÇ/// The state from the closest instance of this class that encloses the given
/// context.
///
/// Typical usage is as follows:
///
/// ```dart
/// ScrollableState scrollable = Scrollable.of(context);
/// ```
///
/// Calling this method will create a dependency on the [ScrollableState]
/// that is returned, if there is one. This is typically the closest
/// [Scrollable], but may be a more distant ancestor if [axis] is used to
/// target a specific [Scrollable].
///
/// Using the optional [Axis] is useful when Scrollables are nested and the
/// target [Scrollable] is not the closest instance. When [axis] is provided,
/// the nearest enclosing [ScrollableState] in that [Axis] is returned.
///
/// This finds the nearest _ancestor_ [Scrollable] of the `context`. This
/// means that if the `context` is that of a [Scrollable], it will _not_ find
/// _that_ [Scrollable].
///
/// If no [Scrollable] ancestor is found, then this method will assert in
/// debug mode, and throw an exception in release mode.
///
/// See also:
///
/// * [Scrollable.maybeOf], which is similar to this method, but returns null
///   if no [Scrollable] ancestor is found. ¿ E ¿ Eÿ¿ E◊  ¿ E·
¿ EË¿ EÁ   ¿ J#ÖÍ¿ N¿ NÉ≈/// Provides a heuristic to determine if expensive frame-bound tasks should be
/// deferred for the [context] at a specific point in time.
///
/// Calling this method does _not_ create a dependency on any other widget.
/// This also means that the value returned is only good for the point in time
/// when it is called, and callers will not get updated if the value changes.
///
/// The heuristic used is determined by the [physics] of this [Scrollable]
/// via [ScrollPhysics.recommendDeferredLoading]. That method is called with
/// the current [ScrollPosition.activity]'s [ScrollActivity.velocity].
///
/// The optional [Axis] allows targeting of a specific [Scrollable] of that
/// axis, useful when Scrollables are nested. When [axis] is provided,
/// [ScrollPosition.recommendDeferredLoading] is called for the nearest
/// [Scrollable] in that [Axis].
///
/// If there is no [Scrollable] in the widget tree above the [context], this
/// method returns false. ¿ N<¿ NJ¿ NI  ¿ NS
¿ NZ¿ NY   ¿ PáÄ¿ QL¿ QLÅ/// Scrolls all scrollables that enclose the given context so as to make the
/// given context visible.
///
/// If a [Scrollable] enclosing the provided [BuildContext] is a
/// [TwoDimensionalScrollable], both vertical and horizontal axes will ensure
/// the target is made visible. ¿ Q_¿ Qm¿ Ql  ¿ Q{¿ QÉ¿ QÇ  ¿ Qó!¿ Q°¿ Q†  ¿ Qæ¿ Q≈¿ Qƒ  ¿ Q›V¿ Q¸¿ Q˚  
¿ Qé¿ Q´¿ Q≥¿ Q¥¿ QÃ¿ Q“¿ Q”¿ R¿ R*¿ R+ ¿ X'ÅD¿ X-¿ X-  ¿ XZa¿ X` ¿ X`¿ Xp  ¿ Xr¿ XÅ¿ XÄ  ¿ Xå¿ Xõ¿ Xö  ¿ X§¿ X¥¿ X≥   ¿ Xø ¿ X’¿ X’  ¿ X„¿ X¯¿ X¯   ¿ Yd¿ Y¿ Y  ¿ Y)¿ Y;¿ Y:  ¿ Y¿ Y ¿ Ym¿ O¯¿ [8¿ [8Åƒ/// State object for a [Scrollable] widget.
///
/// To manipulate a [Scrollable] widget's scroll position, use the object
/// obtained from the [position] property.
///
/// To be informed of when a [Scrollable] widget is scrolling, use a
/// [NotificationListener] to listen for [ScrollNotification] notifications.
///
/// This class is not intended to be subclassed. To specialize the behavior of a
/// [Scrollable], provide it with a [ScrollPhysics].  ¿ ]%¿ ]5¿ ]5  ¿ ]≤¿ ]¡¿ ]¡  ¿ a/¿ a;¿ a;  ¿ b)P¿ bG¿ bG ¿ b`¿ bw¿ bx¿ b~"¿ bí¿ bí  ¿ b§+¿ b∂¿ b∂  ¿ b”1¿ bÍ¿ bÍ  ¿ t°1¿ t±¿ t± ¿ t«¿ t–¿ t—¿ u„i¿ v¿ v ¿ v(¿ v1¿ vI¿ v2¿ vJ¿ vK¿ vP/¿ v`¿ v` ¿ vt¿ v}¿ v~¿ vŸh¿ v˝¿ v˝ ¿ w¿ w?¿ w@¿ w¿ w>¿ w ¿ w&¿ wE!¿ wJ¿ wJ ¿ wa¿ wk¿ wq¿ wq  ¿ wÅ¿ wá¿ wá  ¿ Ü∆¿ ÜÃ¿ ÜÃ  ¿ Ü’¿ ÜÎ¿ ÜÎ  
¿ [≈Å]¿ ]¿ ]Å(/// The manager for this [Scrollable] widget's viewport position.
///
/// To control what kind of [ScrollPosition] is created for a [Scrollable],
/// provide it with custom [ScrollController] that creates the appropriate
/// [ScrollPosition] in its [ScrollController.createScrollPosition] method.   ¿ ]Cl¿ ]ì¿ ]ì:/// The resolved [ScrollPhysics] of the [ScrollableState].   ¿ ]ŒÇ7¿ ^¯¿ ^¯Å/// An [Offset] that represents the absolute distance from the origin, or 0,
/// of the [ScrollPosition] expressed in the associated [Axis].
///
/// Used by [EdgeDraggingAutoScroller] to progress the position forward when a
/// drag gesture reaches the edge of the [Viewport].   ¿ `	i¿ `¿ `    ¿ `vD¿ `î¿ `î   ¿ `v¿ `w¿ `æ-¿ `›¿ `›   ¿ `æ¿ `ø¿ `Ô=¿ a¿ a   ¿ `Ô¿ `¿ aQX¿ ao¿ ao   ¿ aQ¿ aR¿ a≠7¿ a ¿ a    ¿ a≠¿ aÆ¿ aË>¿ b ¿ b    ¿ aË¿ aÈ¿ cQÉö¿ cV¿ cV    ¿ fÔÅS¿ g¿ g  ¿ g¿ g.¿ g-  ¿ g8¿ g>¿ g=  ¿ fÔ¿ f¿ f¸¿ f˝¿ hFÅo¿ hd¿ hd  ¿ ho¿ hw¿ hv  ¿ hF¿ hG¿ hS¿ hT¿ iπÄß¿ i◊¿ i◊   ¿ iπ¿ i∫¿ i∆¿ i«¿ jdÅ4¿ jÇ¿ jÇ   ¿ jd¿ je¿ jq¿ jr¿ kúÉk¿ k°¿ k°  ¿ k∑¿ k√¿ k¬   ¿ oÑ;¿ o)¿ o)  ¿ o9¿ oE¿ oD  ¿ o¿ o¿ o¿ o¿ sJÅC¿ sh¿ sh   ¿ sJ¿ sK¿ sW¿ sX¿ t◊ÄŸ¿ tı¿ tı  ¿ u	¿ u¿ u  ¿ t◊¿ tÿ¿ t„¿ t‰¿ wûç}¿ wº¿ wº  ¿ w«
¿ wÕ¿ wÃ  ¿ wû¿ wü¿ w™¿ w´¿ ÖÅé¿ Ö=¿ Ö=  ¿ ÖN
¿ ÖT¿ ÖS  ¿ Ö¿ Ö ¿ Ö+¿ Ö,¿ ÜıÄí¿ Ü˙¿ Ü˙  ¿ á
¿ á¿ á   ¿ áãÅ‰¿ áê¿ áê  ¿ á°¿ á≥¿ á≤   ¿ âsÄŒ¿ âx¿ âx  ¿ âä¿ âù¿ âú   ¿ äEÄ‡¿ äJ¿ äJ  ¿ äY¿ äi¿ äh   ¿ ã)Ç¿ ã.¿ ã.    ¿ çJ+¿ çO¿ çO    ¿ çy+¿ ç~¿ ç~    ¿ éEÄΩ¿ éL¿ éL  ¿ ép¿ éx¿ éw   ¿ è¨ÉŸ¿ è≥¿ è≥  ¿ èÃ¿ è‡¿ èﬂ   ¿ ìâÑÇ¿ ìé¿ ìé  ¿ ì•¿ ìπ¿ ì∏   ¿ òÅj¿ ò¿ ò  ¿ ò)¿ ò7¿ ò6   ¿ ô}ÅÅ¿ ôÇ¿ ôÇ  ¿ ô£&¿ ôæ¿ ôΩ   ¿ õÅù¿ õ	¿ õ	  ¿ õ¿ õ$¿ õ#  ¿ õ,¿ õ4¿ õ3   ¿ úµà-¿ ú’¿ ú’  ¿ ú€¿ úÈ¿ úË  ¿ úµ¿ ú∂¿ ú¬¿ ú√¿ •∆Çh¿ •‹¿ •‹  ¿ •˜¿ ¶¿ ¶  ¿ ¶¿ ¶¿ ¶  ¿ ¶.!¿ ¶8¿ ¶7  ¿ ¶U¿ ¶\¿ ¶[  ¿ ¶tV¿ ¶ì¿ ¶í  ¿ ¶– ¿ ¶ﬂ¿ ¶ﬁ  
¿ ¶%¿ ¶B¿ ¶J¿ ¶K¿ ¶c¿ ¶i¿ ¶j¿ ¶§¿ ¶¡¿ ¶¬¿ ®2Å1¿ ®P¿ ®P  ¿ ®d&¿ ®Å¿ ®Ä  ¿ ®2¿ ®3¿ ®?¿ ®@ ¿ ©gÇk¿ ™#¿ ™#Äµ/// A widget to handle selection for a scrollable.
///
/// This widget registers itself to the [registrar] and uses
/// [SelectionContainer] to collect selectables from its subtree. ¿ ™ZÄî¿ ™` ¿ ™`¿ ™{  ¿ ™Ç¿ ™ë¿ ™ê  ¿ ™õ¿ ™™¿ ™©  ¿ ™∑¿ ™∆¿ ™≈  ¿ ™‘¿ ™„¿ ™‚   ¿ ™Ú¿ ´¿ ´  ¿ ´¿ ´&¿ ´&  ¿ ´2¿ ´?¿ ´?  ¿ ´H"¿ ´a¿ ´a   ¿ ´oa¿ ´ú¿ ´ú   ¿ ´o¿ ´p ¿ ´‘ÉT¿ ´⁄¿ ´⁄   ¿ ¨*=¿ ¨U¿ ¨U   ¿ ¨lÄº¿ ¨}¿ ¨}   ¿ ¨l¿ ¨m¿ ≠,Äﬂ¿ ≠=¿ ≠=  ¿ ≠M%¿ ≠j¿ ≠i  ¿ ≠,¿ ≠-¿ ÆW¿ Æ ¿ Æ    ¿ Æ¿ Æ¿ ÆjÄº¿ Æ}¿ Æ}  ¿ ÆÉ¿ Æë¿ Æê  ¿ Æj¿ Æk ¿ Ø*¿ E›¿ ∞™¿ ∞™Åy/// This updater handles the case where the selectables change frequently, and
/// it optimizes toward scrolling updates.
///
/// It keeps track of the drag start offset relative to scroll origin for every
/// selectable. The records are used to determine whether the selection is up to
/// date with the scroll position when it sends the drag update event to a
/// selectable. ¿ ±Å8¿ ± ¿ ±¿ ±+  ¿ ±-¿ ±<¿ ±;  ¿ ±B ¿ ±[¿ ±Z  ¿ ±u¿ ±k¿ ±w¿ ±ï¿ ±á¿ ±ó¿ ±Ø¿ ≤¿ ±π¿ ±÷¿ ±»¿ ±ÿ¿ ≤Ç/¿ ≤ñ¿ ≤ñ ¿ ≤∞¿ ≤Ì>¿ ≥¿ ≥ ¿ ≥)¿ ≥0¿ ≥F¿ ≥F  ¿ ≥O,¿ ≥n¿ ≥n  ¿ ≥#¿ ≥Ñ¿ ≥Ñ ¿ ≥ù¿ ≥¶(¿ ≥Æ¿ ≥Æ  ¿ ≥“&¿ ≥⁄¿ ≥⁄  ¿ ¥N)¿ ¥S¿ ¥S ¿ ¥r¿ ¥®¿ ¥∑¿ ¥∑  ¿ ∑≥Éπ¿ ª2¿ ª2É@/// Stores the scroll offset when a scrollable receives the last
/// [SelectionEdgeUpdateEvent].
///
/// The stored scroll offset may be null if a scrollable never receives a
/// [SelectionEdgeUpdateEvent].
///
/// When a new [SelectionEdgeUpdateEvent] is dispatched to a selectable, this
/// updater checks the current scroll offset against the one stored in these
/// records. If the scroll offset is different, it synthesizes an opposite
/// [SelectionEdgeUpdateEvent] and dispatches the event before dispatching the
/// new event.
///
/// For example, if a selectable receives an end [SelectionEdgeUpdateEvent]
/// and its scroll offset in the records is different from the current value,
/// it synthesizes a start [SelectionEdgeUpdateEvent] and dispatches it before
/// dispatching the original end [SelectionEdgeUpdateEvent].¿ ªj¿ ªk¿ ªV¿ ªi¿ ªW¿ ªc¿ ªpV¿ ªé¿ ªé ¿ ªƒ¿ ª≈¿ ª∞¿ ª√¿ ª±¿ ªΩ¿ ¥|)¿ ¥è¿ ¥è    ¿ ¥ƒÄÿ¿ ¥»¿ ¥»  ¿ ¥—¿ ¥·¿ ¥‡   ¿ ∂*ÅÖ¿ ∂/¿ ∂/    ¿ ªÀÅå¿ ª‹¿ ª‹   ¿ ªÀ¿ ªÃ¿ Ω[Å]¿ Ωw¿ Ωw  ¿ Ωå¿ Ω°¿ Ω†  ¿ Ω[¿ Ω\¿ æºÜ˛¿ æÿ¿ æÿ  ¿ æÚ¿ ø¿ ø  ¿ æº¿ æΩ¿ ≈æÉ∆¿ ≈≈¿ ≈≈  ¿ ≈„¿ ≈Î¿ ≈Í   ¿ …àà<¿ À¿ ÀÅ~/// Infers the [_currentDragStartRelatedToOrigin] and
/// [_currentDragEndRelatedToOrigin] from the geometry.
///
/// This method is called after a select word and select all event where the
/// selection is triggered by none drag events. The
/// [_currentDragStartRelatedToOrigin] and [_currentDragEndRelatedToOrigin]
/// are essential to handle future [SelectionEdgeUpdateEvent]s. ¿ ÀC¿ ÀI¿ ÀH  ¿ Àe¿ Àk¿ Àj  ¿ À[¿ À{¿ —»ÅÅ¿ —‰¿ —‰  ¿ —Ù¿ “¿ “  ¿ —»¿ —…¿ ”MÅ'¿ ”i¿ ”i  ¿ ”z¿ ”î¿ ”ì  ¿ ”M¿ ”N¿ ‘xÇY¿ ‘î¿ ‘î  ¿ ‘¥$¿ ‘‘¿ ‘”  ¿ ‘x¿ ‘y¿ ÷’Çb¿ ÷Ò¿ ÷Ò  ¿ ◊'¿ ◊7¿ ◊6  ¿ ÷’¿ ÷÷¿ Ÿ;åù¿ Ÿ@¿ Ÿ@  ¿ ŸL¿ ŸR¿ ŸQ   ¿ Â‹Å@¿ Â·¿ Â·  ¿ Â˝¿ Ê¿ Ê   ¿ Á Ä”¿ Á%¿ Á%  ¿ Á:¿ ÁT¿ ÁS   ¿ Á˜Ö¿ Ë¿ Ë  ¿ Ë1¿ Ë=¿ Ë<  ¿ ËH¿ ËX¿ ËW  ¿ Á˜¿ Á¯¿ Ìá ¿ Ì¿ Ì  ¿ Ì,¿ Ì8¿ Ì7  ¿ Ì¿ Ì	¿ Ù,ÄŸ¿ Ù=¿ Ù=   ¿ Ù,¿ Ù- ¿ ˆûÜÊ¿ ˘©¿ ˘©É/// With [_ScrollSemantics] certain child [SemanticsNode]s can be
/// excluded from the scrollable area for semantics purposes.
///
/// Nodes, that are to be excluded, have to be tagged with
/// [RenderViewport.excludeFromScrolling] and the [RenderAbstractViewport] in
/// use has to add the [RenderViewport.useTwoPaneSemantics] tag to its
/// [SemanticsConfiguration] by overriding
/// [RenderObject.describeSemanticsConfiguration].
///
/// If the tag [RenderViewport.useTwoPaneSemantics] is present on the viewport,
/// two semantics nodes will be used to represent the [Scrollable]: The outer
/// node will contain all children, that are excluded from scrolling. The inner
/// node, which is annotated with the scrolling actions, will house the
/// scrollable children. ¿ ˘‰Å¿ ˘Í ¿ ˘Í¿ ˘˙  ¿ ˙	¿ ˙¿ ˙  ¿ ˙¿ ˙¿ ˙  ¿ ˙,$¿ ˙;¿ ˙:  ¿ ˙V¿ ˙e¿ ˙d  ¿ ˙n ¿ ˙}¿ ˙|  ¿ ˙î¿ ˙õ¿ ˙ö  
¿ ˙®¿ ˙Æ¿ ˙‰¿ ˙ ¿ ˙¬¿ ˙Ø¿ ˙≈¿ ˙‡¿ ˙Õ¿ ˙„¿ ˙Í¿ ˙ˇ¿ ˙ˇ  ¿ ˚!¿ ˚¿ ˚  ¿ ˚0¿ ˚;¿ ˚;  ¿ ˚Q¿ ˚\¿ ˚\   ¿ ˚eÅ¿ ˚à¿ ˚à  ¿ ˚õ¿ ˚©¿ ˚®  ¿ ˚e¿ ˚f¿ ¸tÅ¿ ¸Ö¿ ¸Ö  ¿ ¸ò¿ ¸¶¿ ¸•  ¿ ¸Æ#¿ ¸∆¿ ¸≈  ¿ ¸t¿ ¸u ¿ ˝Üé¿ ˝å¿ ˝å  ¿ ˝æÅë¿ ˝æ ¿ ˝æ¿ ˝‘  ¿ ˝€ ¿ ˝Ù¿ ˝Û  ¿ ˛$¿ ˛¿ ˛  ¿ ˛+¿ ˛:¿ ˛9  ¿ ˛C ¿ ˛R¿ ˛Q  ¿ ˛i¿ ˛u¿ ˛t  ¿ ˛å¿ ˛Ç¿ ˛é¿ ˛∑¿ ˛ü¿ ˛π¿ ˛Ï¿ ˛ÿ¿ ˛Ó¿ ˇ	¿ ˇ¿ ˇ¿ ˇ¿ ˇƒ¿ ˇ”¿ ˇ”  ¿T¿Y¿Y  ¿)	¿.¿.  ¿m¿r¿r  ¿Ü¿ï¿ï  ¿ ˇSn¿ ˇ´¿ ˇ´B/// Whether this render object is excluded from the semantic tree.   ¿ ˇ‡Ä˛¿ ˇ‰¿ ˇ‰  ¿ ˇÌ¿ ˇ˝¿ ˇ¸   ¿ ‚o¿¿1/// Whether this node can be scrolled implicitly.   ¿tÄ±¿x¿x  ¿è
¿ï¿î   ¿73¿@¿@    ¿âÄ§¿ç¿ç  ¿†
¿¶¿•   ¿1Ä“¿6¿6  ¿H¿P¿O   ¿Ç{¿¿  ¿7¿O¿N  ¿¿¿§Ñí¿µ¿µ  ¿–¿ﬂ¿ﬁ  ¿Ë¿ ¿ˇ  ¿ ¿$¿#  ¿§¿•¿:Z¿K¿K   ¿:¿; ¿¯Åç¿˛¿˛    ¿U.¿j¿j   ¿U¿V¿;1¿O¿O   ¿;¿<¿pN¿Å¿Å  ¿ê¿ô¿ò  ¿p¿q¿¬Q¿’¿’  ¿‰¿Ì¿Ï  ¿¬¿√¿:¿+¿+   ¿¿ ¿‚öK¿é¿éÉ•/// A widget that manages scrolling in both the vertical and horizontal
/// dimensions and informs the [TwoDimensionalViewport] through which the
/// content is viewed.
///
/// [TwoDimensionalScrollable] implements the interaction model for a scrollable
/// widget in both the vertical and horizontal axes, including gesture
/// recognition, but does not have an opinion about how the
/// [TwoDimensionalViewport], which actually displays the children, is
/// constructed.
///
/// It's rare to construct a [TwoDimensionalScrollable] directly. Instead,
/// consider subclassing [TwoDimensionalScrollView], which combines scrolling,
/// viewporting, and a layout model in both dimensions.
///
/// See also:
///
///  * [TwoDimensionalScrollView], an abstract base class for displaying a
///    scrolling array of children in both directions.
///  * [TwoDimensionalViewport], which can be used to customize the child layout
///    model. ¿¬Ç>¿e ¿e¿} Äî/// Creates a widget that scrolls in two dimensions.
///
/// The [horizontalDetails], [verticalDetails], and [viewportBuilder] must not
/// be null.
¿Ñ	¿ã¿ä  ¿ì¿¢¿°  ¿∏¿«¿∆  ¿€¿Í¿È  ¿˛¿¿  ¿¿"¿!  ¿4!¿:¿9  ¿[5¿a¿`  ¿ñ0¿ú¿õ  ¿Ã-¿“¿—  
¿P¿w¿ã¿å¿Ø¿¿¿¡¿„¿Ú¿Û	¿Äê¿Ä¿Ä\/// How scrolling gestures should lock to one axis, or allow free movement
/// in both axes. ¿ôÄ˚¿É¿ÉÄ…/// The configuration of the horizontal [Scrollable].
///
/// These [ScrollableDetails] can be used to set the [AxisDirection],
/// [ScrollController], [ScrollPhysics] and more for the horizontal axis. ¿ôÄı¿¿Ä≈/// The configuration of the vertical [Scrollable].
///
/// These [ScrollableDetails] can be used to set the [AxisDirection],
/// [ScrollController], [ScrollPhysics] and more for the vertical axis. ¿ìÅØ¿3¿3Åi/// Builds the viewport through which the scrollable content is displayed.
///
/// A [TwoDimensionalViewport] uses two given [ViewportOffset]s to determine
/// which part of its content is actually visible through the viewport.
///
/// See also:
///
///  * [TwoDimensionalViewport], which is a viewport that displays a span of
///    widgets in both dimensions. ¿GÄü¿”¿”d/// {@macro flutter.widgets.Scrollable.incrementCalculator}
///
/// This value applies in both axes. ¿ÎÅ*¿¿Å/// {@macro flutter.widgets.scrollable.restorationId}
///
/// Internally, the [TwoDimensionalScrollable] will introduce a
/// [RestorationScope] that will be assigned this value. The two [Scrollable]s
/// within will then be given unique IDs within this scope. ¿Äã¿ë¿ëe/// {@macro flutter.widgets.scrollable.excludeFromSemantics}
///
/// This value applies to both axes. ¿™Äå¿'¿'`/// {@macro flutter.widgets.scrollable.hitTestBehavior}
///
/// This value applies to both axes. ¿;Äí¿º¿ºb/// {@macro flutter.widgets.scrollable.dragStartBehavior}
///
/// This value applies in both axes.  ¿“]¿˛¿˛   ¿“¿”¿ 3Ñ\¿#∂¿#∂É2/// The state from the closest instance of this class that encloses the given
/// context, or null if none is found.
///
/// Typical usage is as follows:
///
/// ```dart
/// TwoDimensionalScrollableState? scrollable = TwoDimensionalScrollable.maybeOf(context);
/// ```
///
/// Calling this method will create a dependency on the closest
/// [TwoDimensionalScrollable] in the [context]. The internal [Scrollable]s
/// can be accessed through [TwoDimensionalScrollableState.verticalScrollable]
/// and [TwoDimensionalScrollableState.horizontalScrollable].
///
/// Alternatively, [Scrollable.maybeOf] can be used by providing the desired
/// [Axis] to the `axis` parameter.
///
/// See also:
///
/// * [TwoDimensionalScrollable.of], which is similar to this method, but
///   asserts if no [Scrollable] ancestor is found. ¿#æ¿#Ã¿#À   ¿$ìáò¿(¢¿(¢Éπ/// The state from the closest instance of this class that encloses the given
/// context.
///
/// Typical usage is as follows:
///
/// ```dart
/// TwoDimensionalScrollableState scrollable = TwoDimensionalScrollable.of(context);
/// ```
///
/// Calling this method will create a dependency on the closest
/// [TwoDimensionalScrollable] in the [context]. The internal [Scrollable]s
/// can be accessed through [TwoDimensionalScrollableState.verticalScrollable]
/// and [TwoDimensionalScrollableState.horizontalScrollable].
///
/// If no [TwoDimensionalScrollable] ancestor is found, then this method will
/// assert in debug mode, and throw an exception in release mode.
///
/// Alternatively, [Scrollable.of] can be used by providing the desired [Axis]
/// to the `axis` parameter.
///
/// See also:
///
/// * [TwoDimensionalScrollable.maybeOf], which is similar to this method,
///   but returns null if no [TwoDimensionalScrollable] ancestor is found. ¿(•¿(≥¿(≤    ¿,/öt¿.v¿.vÇ@/// State object for a [TwoDimensionalScrollable] widget.
///
/// To manipulate one of the internal [Scrollable] widget's scroll position, use
/// the object obtained from the [verticalScrollable] or [horizontalScrollable]
/// property.
///
/// To be informed of when a [TwoDimensionalScrollable] widget is scrolling,
/// use a [NotificationListener] to listen for [ScrollNotification]s.
/// Both axes will have the same viewport depth since there is only one
/// viewport, and so should be differentiated by the [Axis] of the
/// [ScrollMetrics] provided by the notification.  ¿.¿-¿.“¿.“  ¿.Ò/¿/¿/  ¿/$[¿/E¿/E ¿/c¿/l¿/|¿/m¿/}¿/~¿/É]¿/§¿/§ ¿/ƒ¿/Õ¿/›¿/Œ¿/ﬁ¿/ﬂ¿/ÂÅÜ¿0ﬂ¿0ﬂÄŸ/// The [ScrollableState] of the vertical axis.
///
/// Accessible by calling [TwoDimensionalScrollable.of].
///
/// Alternatively, [Scrollable.of] can be used by providing [Axis.vertical]
/// to the `axis` parameter.   ¿1oÅê¿2m¿2mÄ›/// The [ScrollableState] of the horizontal axis.
///
/// Accessible by calling [TwoDimensionalScrollable.of].
///
/// Alternatively, [Scrollable.of] can be used by providing [Axis.horizontal]
/// to the `axis` parameter.   ¿3Å0¿3!¿3!   ¿3¿3¿3¿3¿47Ü—¿4U¿4U  ¿4e"¿4¿4~  ¿47¿48¿4D¿4E¿;äı¿;,¿;,  ¿;2¿;@¿;?  ¿;¿;¿;¿;¿FÄú¿F#¿F#   ¿F¿F¿F¿F ¿GuÅK¿G{¿G{  ¿G∂r¿Gº ¿Gº¿G⁄  ¿G·&¿G¿GÔ  ¿H¿H¿H   ¿H,<¿HP¿HP   ¿HmQ¿H~¿H~  ¿Hë"¿H±¿H∞  ¿Hm¿Hn ¿HÔÇÙ¿Hı¿Hı  ¿I$Å˙¿I* ¿I*¿IA  ¿IH	¿IO¿IN  ¿IW¿If¿Ie  ¿Ix¿Ià¿Iá  ¿Iú¿I¨¿I´  ¿Iæ¿I≈¿Iƒ  ¿I‘¿I€¿I⁄  ¿IÁ¿IÓ¿IÌ  ¿Iˇ¿J¿J  ¿J¿J%¿J$  ¿J>¿JE¿JD  ¿J[¿Jb¿Ja  ¿Jt¿J{¿Jz  ¿Jè5¿Jï¿Jî  ¿J´¿Jø¿J¿¿JÕ¿J”¿K¿Jˆ¿J‚¿J‘¿JÂ¿JÚ¿JÛ¿K¿J˘¿K
¿K¿K¿K"/¿K=¿K=  ¿KU.¿Kv¿Kv   ¿KàY¿K±¿K±   ¿Kà¿Kâ ¿KÂ£◊¿KÎ¿KÎ   ¿M¿M¿M  ¿M!¿M)¿M)  ¿L$p¿L=¿L=    ¿Lór¿L´¿L´    	¿MwÇP¿Mô¿Mô  ¿M¥¿M¬¿M¡  ¿Mœ¿M◊¿M÷  ¿MÎ!¿Mı¿MÙ  ¿N¿N¿N  ¿N1V¿NP¿NO  ¿Nç ¿Nú¿Nõ  ¿Mw¿Mx¿M‚¿Mˇ¿N¿N¿N ¿N&¿N'¿Na¿N~¿N¿OÀÅ©¿O–¿O–  ¿O‰¿OÏ¿OÎ   ¿QxÅÁ¿Qâ¿Qâ  ¿Qô¿Q™¿Q©  ¿Qx¿Qy¿ScÑt¿St¿St  ¿SÖ¿Só¿Sñ  ¿Sc¿Sd¿W€áÁ¿WÏ¿WÏ  ¿W˛¿X¿X  ¿W€¿W‹¿_∆É}¿_◊¿_◊  ¿_Ê¿_ˆ¿_ı  ¿_∆¿_«¿cGÅï¿cX¿cX   ¿cG¿cH¿d‡â¿dÒ¿dÒ  ¿d¸
¿e¿e  ¿d‡¿d·¿m˙Å¿¿n¿n  ¿n¿n(¿n'  ¿n0¿n8¿n7  ¿m˙¿m˚ ¿oÌÉ¿oÛ¿oÛ  ¿p$Ç¿p* ¿p*¿pC  ¿pJ	¿pQ¿pP  ¿pY¿ph¿pg  ¿p}¿pç¿på  ¿p°¿p±¿p∞  ¿p√¿p ¿p…  ¿pŸ¿p‡¿pﬂ  ¿pÏ¿pÛ¿pÚ  ¿q¿q¿q
  ¿q#¿q*¿q)  ¿qC¿qJ¿qI  ¿q`¿qg¿qf  ¿qy¿qÄ¿q  ¿qî5¿qö¿qô  ¿q∞¿qƒ¿q≈¿q“¿qÿ¿r$¿q˝¿qÁ¿qŸ¿qÍ¿q˜¿q¯¿r¿r ¿r¿r¿r¿r*1¿rK¿rK  ¿r_/¿rz¿rz   ¿rì]¿ræ¿ræ   ¿rì¿rî ¿rÙç“¿r˙¿r˙   ¿s5'¿sJ¿sJ  ¿sap¿sÄ¿sÄ    ¿s‘r¿sÌ¿sÌ    ¿tJÄ÷¿t[¿t[   ¿tJ¿tK¿vÉ&¿v.¿v.  ¿vI¿vW¿vV  ¿vd¿vl¿vk  ¿vÄ!¿vä¿vâ  ¿vß¿vÆ¿v≠  ¿v∆V¿vÂ¿v‰  ¿w" ¿w1¿w0  ¿v¿v¿vw¿vî¿vú¿vù¿vµ¿vª¿vº¿vˆ¿w¿w¿y6Ö ¿yG¿yG  ¿yR
¿yX¿yW  ¿y6¿y7¿Å¿¿¿  ¿$¿2¿1  ¿:¿B¿A  ¿¿  ¿òÑH¿Q¿Q`/// Specifies how to configure the [DragGestureRecognizer]s of a
/// [TwoDimensionalScrollable].  ¿jÄπ¿¿Ä¨/// This behavior will not allow for any diagonal scrolling.
///
/// Drag gestures in one direction or the other will lock the input axis until
/// the gesture is released. ¿(Å¿1¿1Ä˛/// This behavior will only allow diagonal scrolling on a weighted
/// scale per gesture event.
///
/// This means that after initially evaluating the drag gesture, the weighted
/// evaluation (based on [kTouchSlop]) stands until the gesture is released. ¿CÅ9¿j¿jÅ/// This behavior will only allow diagonal scrolling on a weighted
/// scale that is evaluated throughout a gesture event.
///
/// This means that during each update to the drag gesture, the scrolling
/// axis will be allowed to scroll diagonally if it exceeds the
/// [kTouchSlop]. ¿Å\¿Ÿ¿ŸS/// This behavior allows free movement in any and all directions when
/// dragging.       ¿ ı	Åì¿ ı¿ ı  ¿ ı(¿ ı9¿ ı8    Ö‹Ä…ÜTÜTo/// Signature used by [Scrollable] to build the viewport through which the
/// scrollable content is displayed.  ÜvÜÑÜÉ  ÜåÜúÜõ   ÜßÅ-á-á-}/// Signature used by [TwoDimensionalScrollable] to build the viewport through
/// which the scrollable content is displayed.  áháváu  áÑáîáì  á´!áªá∫   à¿Fà»à»        	  ÄÆ  package:flutter/material.dart  Ä‚  page_storage.dart  Å  page_view.dart  Å'  scroll_metrics.dart  ÅM  scroll_notification.dart  Åx  scroll_view.dart  Åõ  single_child_scroll_view.dart  ÅÀ   two_dimensional_scroll_view.dart  Å˛  two_dimensional_viewport.dart ä <ÄÜÄ§Ä•Ä’ÄŸÄ˝ÅÅDÅoÅíÅ¬ÅıÇ%Ç.Ç/ÇDÇ`ÇaÇãÇ≥Ç‹ÉÉ-É.ÉCÉ\É|ÉóÉºÉ◊É˝ÑÑ@Ñ^ÑÑùÑºÑﬁÑˇÖ"ÖAÖUÖmÖnÖ§Ö•ÖΩÖ€Ö‹Ü'ÜLÜ¶ÜßÜˆá%áMábá~á•áŒá’á÷àààLàôà¿âââXâÅâÖâ–ääbäfä∑ããRãjãnã∫å	ååå`ådå±ç çCçççëç⁄ééké≤é∂éÌéÒè?èêè‹ê'êuêyêáêãê‘ëëTëqë¿ëŸí'íEíîí¢íıì4ì^ìÉìòìßì‘ìÈì˚îî<îcîÄî∂îŒîÁïïAïáïàï√ïıï˚ñIñôñ‚ó/óÄóúó¢ó óﬂòòò=òéòûò§òÚôBôèô‘ö#ölöëöóöÊõ õ&õ6õ<õáõØõƒõÍõÎú úTúZú¶ú—ú◊ù%ùNùTùâù⁄ûûûdû¥üüNüûüÌ†††%†+†|† °°1°Q°R°ü°•°ˆ¢5¢;¢K¢Q¢õ¢Í£.£W£X£ô£Â§2§H§N§ö§Î•"•(•`•Æ•Á•¸¶4¶5¶w¶ƒ¶·¶Áß7ßÉßÕß‚ßËß¯ß˛®O®c®Ü®á®ƒ©©©d©ö©Ø©µ©≈©À™™;™<™Ñ™ä™⁄™‡´,´w´√´…¨¨\¨b¨r¨x¨Ω≠≠8≠9≠ê≠œÆÆÆ[ÆßÆÒØØØaØØØ‡ØÊ∞.∞4∞D∞J∞ô∞ª∞¡∞÷±±±?±ç±ì±‚≤≤%≤p≤º≤¬≤“≤ÿ≥%≥7≥L≥k≥l≥®≥Û≥˘¥F¥ä¥ê¥’µµbµzµèµ∑µ∏µÓµÙ∂∂∂u∂»∑∑)∑*∑^∑d∑ç∑ƒ∑≈∑—∏∏∏∏Y∏Ñ∏’π!πeπiπjπ∫π„πÈ∫∫∫ ∫a∫k∫q∫ΩªªPªvª|ª ººgºÑºäº÷Ω&ΩAΩGΩWΩ]Ω£Ω—ææ`æíæ˜øøoø¬ø˛¿ @9¿ @T¿ @\¿ @Ä¿ @’¿ @€¿ @Ï¿ @¿ @Ò¿ AA¿ AP¿ AV¿ Ay¿ A¿ Aç¿ A»¿ A“¿ Aÿ¿ B$¿ Bk¿ B∑¿ B›¿ B„¿ C1¿ CÅ¿ CÀ¿ C—¿ D¿ Dm¿ Dà¿ Dé¿ D⁄¿ E¿ E¿ E*¿ E0¿ EÄ¿ EÆ¿ E¿ F;¿ FK¿ Fp¿ F®¿ F¿¿ G¿ G3¿ G@¿ G\¿ Gò¿ G›¿ H/¿ HÑ¿ Hª¿ H·¿ H˚¿ I¿ I$¿ I;¿ Ië¿ Iø¿ IŒ¿ I⁄¿ I‚¿ Iı¿ Iˇ¿ J¿ J ¿ J!¿ Jr¿ J∞¿ J∂¿ K¿ KU¿ K•¿ K´¿ K¯¿ LG¿ Lê¿ Lñ¿ L‰¿ M-¿ Mw¿ Mö¿ M†¿ MÔ¿ N¿ Nb¿ Nº¿ NŸ¿ O3¿ Ou¿ O}¿ O®¿ OÚ¿ O¯¿ P
¿ P¿ P¿ P^¿ P{¿ PÅ¿ Pƒ¿ Q¿ Q6¿ Q[¿ Qw¿ Qì¿ Q∫¿ QŸ¿ R5¿ R<¿ Ru¿ Rv¿ R≈¿ S¿ Sc¿ S®¿ S◊¿ Sﬁ¿ T¿ TD¿ TÉ¿ T§¿ Tœ¿ U¿ U7¿ UU¿ Uq¿ Uá¿ U±¿ U·¿ UÍ¿ V¿ V¿ VF¿ Vj¿ Vö¿ V†¿ V°¿ VŸ¿ V¸¿ W¿ W!¿ W>¿ WD¿ Wé¿ Wí¿ Wî¿ Wï¿ WÊ¿ X'¿ XX¿ Xº¿ XΩ¿ X·¿ Y¿ Y¿ Y¿ YA¿ Yf¿ Yj¿ Yl¿ Ym¿ Yô¿ Yù¿ YÁ¿ Z¿ Z¿ Z[¿ Z®¿ Z¨¿ Z˝¿ [2¿ [b¿ [ñ¿ [µ¿ [¬¿ [√¿ \¿ \¿ \[¿ \®¿ \ˆ¿ ]#¿ ]@¿ ]A¿ ]~¿ ]∞¿ ]À¿ ]Ã¿ ^¿ ^]¿ ^c¿ ^¥¿ ^Î¿ _(¿ _]¿ _ì¿ _ ¿ `¿ `¿ `¿ `<¿ `s¿ `t¿ `Ä¿ `ª¿ `º¿ `»¿ `Ï¿ `Ì¿ `˘¿ a-¿ aN¿ aO¿ a[¿ a™¿ a´¿ a∑¿ aÂ¿ aÊ¿ aÚ¿ b'¿ b{¿ b|¿ b¢¿ b—¿ c¿ c¿ cO¿ cj¿ cπ¿ cÊ¿ d2¿ dk¿ d¨¿ d≠¿ d‡¿ dˇ¿ e5¿ eÇ¿ eŒ¿ f¿ f2¿ f8¿ f9¿ fò¿ f∑¿ fË¿ fÏ¿ fÌ¿ f˙¿ g¿ gO¿ gç¿ g¨¿ g‹¿ h9¿ h?¿ hC¿ hD¿ hQ¿ h]¿ hÄ¿ h∑¿ h‚¿ i-¿ iu¿ i≤¿ i∂¿ i∑¿ iƒ¿ i–¿ iÂ¿ j
¿ j@¿ jF¿ j]¿ ja¿ jb¿ jo¿ j{¿ jú¿ jÈ¿ k¿ k[¿ kr¿ kï¿ kô¿ kö¿ kœ¿ l ¿ l3¿ l9¿ lb¿ lé¿ lÿ¿ lÎ¿ lÒ¿ mU¿ mu¿ m«¿ m–¿ n¿ n%¿ n-¿ nT¿ n{¿ n≥¿ n¥¿ o¿ o¿ o	¿ o¿ o"¿ oQ¿ ow¿ ox¿ o≠¿ o◊¿ p$¿ pH¿ p{¿ p¶¿ p€¿ q	¿ q3¿ qB¿ qv¿ q¶¿ qœ¿ r¿ r9¿ rs¿ r}¿ rÖ¿ ræ¿ rÒ¿ r˜¿ r¯¿ s$¿ s=¿ sC¿ sG¿ sH¿ sU¿ sa¿ st¿ sô¿ sƒ¿ s—¿ t¿ t0¿ t6¿ t7¿ tO¿ tu¿ tä¿ té¿ tè¿ tû¿ tü¿ t‘¿ t’¿ t·¿ tÓ¿ u)¿ u]¿ uß¿ u≠¿ u±¿ u≤¿ u‡¿ u·¿ v"¿ vN¿ vÅ¿ vÇ¿ v◊¿ w¿ wC¿ wh¿ wi¿ w¿ wõ¿ wú¿ w®¿ wµ¿ w’¿ x'¿ x5¿ x;¿ xM¿ xì¿ x·¿ y+¿ yi¿ yÑ¿ yë¿ yÆ¿ y ¿ z¿ z7¿ zå¿ zÒ¿ {.¿ {K¿ {|¿ {Ø¿ {‰¿ |¿ |H¿ |é¿ |‘¿ }¿ }z¿ }ø¿ ~"¿ ~g¿ ~Æ¿ ~√¿ ~÷¿ ~„¿ ¿ C¿ p¿ «¿ ﬂ¿ ÄD¿ ÄÉ¿ Ä†¿ Ä—¿ Å¿ Å9¿ Åh¿ Åù¿ Å„¿ Ç)¿ Ço¿ Çœ¿ É¿ Éw¿ Éº¿ Ñ¿ Ñ¿ Ñ+¿ Ñ8¿ Ñ@¿ ÑF¿ Ñ`¿ ÑÜ¿ Ñ∫¿ Ö¿ Ö¿ Ö¿ Ö¿ Ö)¿ Ö6¿ Ö\¿ ÖÖ¿ Öì¿ Öô¿ Öª¿ ÖÔ¿ Ü¿ Üs¿ Ü§¿ Ü™¿ ÜÆ¿ ÜØ¿ Ü√¿ Üƒ¿ Ü”¿ ÜÚ¿ ÜÛ¿ á%¿ á@¿ á[¿ áÑ¿ áà¿ áâ¿ áΩ¿ à¿ àX¿ àÅ¿ àú¿ àŒ¿ àÈ¿ â7¿ âP¿ âf¿ âl¿ âp¿ âq¿ âß¿ âˆ¿ ä"¿ ä>¿ äB¿ äC¿ äs¿ ä¬¿ äÓ¿ ã¿ ã"¿ ã&¿ ã'¿ ãD¿ ãz¿ ã»¿ å¿ å$¿ å2¿ å8¿ åh¿ å∑¿ å„¿ å¯¿ ç¿ ç(¿ çC¿ çG¿ çH¿ ç`¿ çr¿ çv¿ çw¿ çè¿ ç°¿ ç•¿ ç¶¿ ç∏¿ çπ¿ é	¿ éC¿ éÄ¿ éï¿ éÿ¿ é¯¿ éˇ¿ è¿ è¿ èO¿ èú¿ è™¿ èË¿ êB¿ ê\¿ ê°¿ ê‚¿ ë4¿ ëÑ¿ ë‘¿ í#¿ í4¿ íc¿ íd¿ í™¿ í”¿ ì¿ ì/¿ ì6¿ ì7¿ ìÇ¿ ìÜ¿ ìá¿ ì¡¿ ì˝¿ îJ¿ îô¿ î¿¿ îÛ¿ ï¿ ï¿ ïG¿ ïõ¿ ï¿ ñ3¿ ñê¿ ñ†¿ ñ®¿ ñ¯¿ ó¿ óN¿ óâ¿ ó™¿ ò¿ ò¿ ò¿ ò¿ ò?¿ òh¿ ò∏¿ ô
¿ ôK¿ ôp¿ ôv¿ ôz¿ ô{¿ ôÕ¿ ô¿ ö(¿ öj¿ öõ¿ ö€¿ ö„¿ öÈ¿ ö˚¿ öˇ¿ õ ¿ õ<¿ õu¿ õú¿ õ ¿ õ˝¿ ú¿ ú¿ ú/¿ ú>¿ úÜ¿ úï¿ úú¿ ú†¿ ú°¿ ú≤¿ ú≥¿ ú¿¿ úÃ¿ úÛ¿ ù¿ ùp¿ ù∑¿ ùæ¿ ùÊ¿ û¿ û¿ ûv¿ û∫¿ û‡¿ û¯¿ ü¿ ü)¿ üZ¿ ü}¿ ü°¿ ü ¿ üˆ¿ †3¿ †O¿ †ç¿ †Ø¿ †’¿ °¿ °C¿ °R¿ °_¿ °j¿ °s¿ °z¿ °{¿ °£¿ °„¿ ¢¿ ¢>¿ ¢b¿ ¢Ä¿ ¢ƒ¿ ¢·¿ £¿ £3¿ £>¿ £G¿ £M¿ £N¿ £z¿ £{¿ £æ¿ §¿ §*¿ §V¿ §k¿ §á¿ §•¿ §º¿ §≈¿ §À¿ §Ã¿ §ﬂ¿ §„¿ §‰¿ •2¿ •~¿ •ƒ¿ •Û¿ ¶¿ ¶*¿ ¶Q¿ ¶p¿ ¶Ã¿ ¶Ú¿ ¶˘¿ ß>¿ ßL¿ ßh¿ ßÇ¿ ßñ¿ ßæ¿ ßÏ¿ ßÛ¿ ®+¿ ®/¿ ®0¿ ®=¿ ®I¿ ®é¿ ®π¿ ©	¿ ©`¿ ©d¿ ©f¿ ©g¿ ©ö¿ ©û¿ ©€¿ ™¿ ™X¿ ™~¿ ™ó¿ ™≥¿ ™–¿ ™È¿ ™Ô¿ ™¿ ´¿ ´0¿ ´F¿ ´l¿ ´m¿ ´y¿ ´—¿ ´”¿ ´‘¿ ¨(¿ ¨i¿ ¨j¿ ¨v¿ ¨ã¿ ¨¢¿ ¨‚¿ ¨˝¿ ≠¿ ≠%¿ ≠)¿ ≠*¿ ≠6¿ ≠v¿ ≠ú¿ ≠Õ¿ Æ¿ Æ¿ Æ¿ Æ¿ Æ¿ Æ,¿ ÆN¿ Æc¿ Æg¿ Æh¿ Æt¿ Æõ¿ Æ∫¿ Æ›¿ Ø¿ Ø¿ Ø#¿ Ø'¿ Ø)¿ Ø*¿ Øy¿ Ø§¿ Ø®¿ Ø¯¿ ∞I¿ ∞î¿ ∞§¿ ±¿ ±e¿ ±Å¿ ±±¿ ±¿¿ ±ˇ¿ ≤	¿ ≤;¿ ≤?¿ ≤@¿ ≤Ä¿ ≤≥¿ ≤¥¿ ≤Î¿ ≥-¿ ≥.¿ ≥M¿ ≥}¿ ≥§¿ ≥–¿ ≥˙¿ ≥˚¿ ¥L¿ ¥y¿ ¥z¿ ¥¶¿ ¥¬¿ ¥È¿ µ¿ µ¿ µ¿ µP¿ µg¿ µô¿ µù¿ µû¿ µË¿ ∂(¿ ∂I¿ ∂k¿ ∂y¿ ∂¿ ∂¢¿ ∂Ï¿ ∑¿ ∑!¿ ∑)¿ ∑O¿ ∑h¿ ∑¨¿ ∑∞¿ ∑±¿ ∑Ù¿ ∏¿ ∏¿ ∏h¿ ∏ä¿ ∏ê¿ ∏‡¿ π/¿ π|¿ πÕ¿ πﬁ¿ π‰¿ ∫2¿ ∫Ç¿ ∫”¿ ª¿ ªn¿ ª»¿ ª…¿ ª’¿ ªı¿ º4¿ ºg¿ º≠¿ º¥¿ ºÂ¿ Ω+¿ Ω2¿ ΩT¿ ΩX¿ ΩY¿ Ωe¿ Ω©¿ Ωÿ¿ æ¿ æ2¿ æ]¿ æá¿ æµ¿ æπ¿ æ∫¿ æ∆¿ ø¿ ør¿ øü¿ ø˜¿ ø˝¿ ¿>¿ ¿x¿ ¿‘¿ ¡¿ ¡9¿ ¡T¿ ¡]¿ ¡å¿ ¡Ø¿ ¡◊¿ ¡‡¿ ¡Ì¿ ¬K¿ ¬ô¿ ¬¥¿ ¬œ¿ ¬ÿ¿ √	¿ √.¿ √V¿ √_¿ √e¿ √∞¿ √±¿ ƒ¿ ƒT¿ ƒf¿ ƒì¿ ƒπ¿ ƒŒ¿ ƒ‘¿ ƒ¸¿ ≈I¿ ≈n¿ ≈ñ¿ ≈û¿ ≈§¿ ≈∑¿ ≈ª¿ ≈º¿ ≈¸¿ ∆F¿ ∆ä¿ ∆≥¿ «¿ «Q¿ «°¿ «Ò¿ »+¿ »Z¿ »b¿ »∑¿ »◊¿ »ﬂ¿ »Â¿ …&¿ …Å¿ …Ö¿ …Ü¿ …æ¿ …¯¿ …˛¿  M¿  É¿  —¿ À¿ À?¿ Àa¿ ÀÅ¿ Àà¿ À…¿ Ã¿ ÃK¿ Ãw¿ Ã¡¿ Õ¿ Õ>¿ ÕÄ¿ Õ‚¿ Œ"¿ Œ:¿ Œz¿ ŒÉ¿ Œ»¿ Œ€¿ œ¿ œ¿ œ¿ œ<¿ œÇ¿ œÿ¿ œ˝¿ –;¿ –õ¿ –Ÿ¿ –Ò¿ —-¿ —6¿ —y¿ —å¿ —≤¿ —ª¿ —¡¿ —≈¿ —∆¿ —“¿ “¿ “@¿ “Å¿ “’¿ ”¿ ”-¿ ”3¿ ”F¿ ”J¿ ”K¿ ”W¿ ”ú¿ ”Ú¿ ‘4¿ ‘^¿ ‘q¿ ‘u¿ ‘v¿ ‘Ç¿ ‘‹¿ ’-¿ ’z¿ ’…¿ ÷¿ ÷m¿ ÷ï¿ ÷µ¿ ÷ª¿ ÷Œ¿ ÷“¿ ÷”¿ ÷ﬂ¿ ◊?¿ ◊ì¿ ◊‡¿ ÿ/¿ ÿn¿ ÿ”¿ ÿ˚¿ Ÿ¿ Ÿ!¿ Ÿ4¿ Ÿ8¿ Ÿ9¿ Ÿ]¿ Ÿ~¿ Ÿú¿ Ÿº¿ Ÿ–¿ ⁄
¿ ⁄;¿ ⁄~¿ ⁄ã¿ ⁄«¿ ⁄˙¿ €?¿ €E¿ €s¿ €Å¿ €á¿ €€¿ ‹#¿ ‹t¿ ‹Ö¿ ‹ü¿ ‹¶¿ ‹’¿ ‹ﬁ¿ ‹Á¿ ›¿ ›(¿ ›/¿ ›R¿ ›o¿ ›∑¿ ﬁ	¿ ﬁ]¿ ﬁo¿ ﬁy¿ ﬁ´¿ ﬁ¸¿ ﬂ¿ ﬂ¿ ﬂD¿ ﬂè¿ ﬂô¿ ﬂ©¿ ﬂ…¿ ‡¿ ‡V¿ ‡h¿ ‡r¿ ‡ù¿ ‡Á¿ ‡˘¿ ·¿ ·-¿ ·v¿ ·Ä¿ ·ê¿ ·Ø¿ ·˜¿ ‚I¿ ‚ù¿ ‚Ø¿ ‚π¿ ‚Î¿ „<¿ „N¿ „X¿ „Ñ¿ „œ¿ „Ÿ¿ „È¿ ‰¿ ‰J¿ ‰ï¿ ‰ß¿ ‰±¿ ‰‹¿ Â&¿ Â8¿ ÂB¿ Âl¿ Âµ¿ Âø¿ Âœ¿ Â’¿ ÂŸ¿ Â⁄¿ Ê¿ Ê`¿ Ê§¿ Ê¿ Á¿ Á¿ Á¿ Á\¿ Áx¿ Áú¿ Á¬¿ ÁÈ¿ Á¿ ÁÙ¿ Áı¿ Ë¿ Ë`¿ Ëz¿ Ë©¿ Ë¯¿ È ¿ ÈM¿ Èö¿ È¬¿ È˚¿ Í7¿ Í_¿ ÍÆ¿ Í˚¿ Î ¿ Î\¿ Îö¿ Î√¿ ÎÌ¿ Ï¿ Ïi¿ Ï∏¿ Ïæ¿ Ì¿ Ì¿ Ì¿ Ì¿ ÌE¿ Ìy¿ Ì–¿ Ó¿ Ó,¿ Ó~¿ Ó∑¿ Ó˙¿ ÔH¿ Ôc¿ Ô~¿ Ôá¿ Ô∞¿ Ô¯¿ ¿ Y¿ è¿ ‹¿ ‚¿ Ò5¿ Òg¿ Òç¿ Ò›¿ Ú¿ ÚY¿ Ú£¿ Úæ¿ ÚŸ¿ Ú‚¿ ÛG¿ Ûû¿ Û‘¿ Ù¿ Ù%¿ Ù)¿ Ù*¿ Ù6¿ ÙI¿ Ùx¿ Ù•¿ Ù…¿ ÙÌ¿ ı¿ ı¿ ı¿ ı	¿ ıK¿ ı}¿ ı¬¿ ˆ¿ ˆO¿ ˆñ¿ ˆõ¿ ˆù¿ ˆû¿ ˆ‡¿ ˜¿ ˜"¿ ˜]¿ ˜´¿ ˜Ú¿ ¯¿ ¯P¿ ¯T¿ ¯§¿ ¯Ú¿ ˘B¿ ˘ä¿ ˘£¿ ˘‚¿ ˘˝¿ ˙¿ ˙(¿ ˙R¿ ˙j¿ ˙ê¿ ˙°¿ ˙Á¿ ˙Ë¿ ˚	¿ ˚.¿ ˚O¿ ˚b¿ ˚c¿ ˚o¿ ˚≥¿ ˚÷¿ ˚¿ ¸&¿ ¸T¿ ¸f¿ ¸m¿ ¸q¿ ¸r¿ ¸~¿ ¸’¿ ¸Ê¿ ˝¿ ˝2¿ ˝N¿ ˝¿ ˝É¿ ˝Ö¿ ˝Ü¿ ˝º¿ ˝◊¿ ˝˝¿ ˛'¿ ˛?¿ ˛e¿ ˛{¿ ˛ò¿ ˛—¿ ˇ¿ ˇ¿ ˇL¿ ˇP¿ ˇQ¿ ˇñ¿ ˇ¬¿ ˇﬁ¿ ¿ #¿ 1¿ 7¿ o¿ Ü¿ ª¿ €¿ ﬂ¿ ‡¿¿R¿r¿ù¿…¿◊¿›¿¿"¿&¿'¿4¿5¿k¿á¿Æ¿’¿„¿È¿
¿*¿.¿/¿_¿â¿≥¿€¿‚¿ ¿¿¿¿X¿ä¿∞¿”¿‡¿¿D¿z¿∞¿·¿<¿q¿y¿¿É¿Ñ¿°¿¢¿Æ¿Ã¿‰¿¿-¿3¿è¿®¿„¿Ò¿˜¿¯¿I¿J¿f¿≠¿È¿	¿	]¿	û¿	ª¿	 ¿
 ¿
5¿
?¿
\¿
d¿
j¿
ñ¿
‡¿3¿7¿8¿D¿^¿z¿ë¿ï¿ó¿ò¿Í¿¯¿9¿E¿m¿n¿z¿§¿ª¿ø¿¿¿Ã¿Ù¿¿¿¿!¿<¿N¿R¿S¿_¿Ñ¿Ü¿á¿ó¿ò¿Ÿ¿˘¿L¿h¿ß¿≠¿˛¿¿%¿&¿k¿ä¿ê¿‡¿/¿@¿A¿Ü¿¿¿∆¿¿T¿h¿~¿¿«¿◊¿ﬂ¿·¿‚¿*¿t¿ã¿è¿‡¿'¿c¿™¿ª¿ø¿
¿Y¿ë¿ï¿£¿ß¿Ú¿)¿z¿à¿¿¿˜¿˝¿N¿]¿Ä¿è¿¥¿◊¿˙¿¿0¿W¿í¿»¿˚¿¿¿O¿c¿ñ¿ó¿œ¿’¿¿i¿ñ¿ó¿Õ¿”¿¿e¿ê¿ë¿ﬁ¿‰¿3¿}¿É¿ì¿ô¿Ë¿¿D¿E¿É¿â¿∞¿Ë¿È¿!¿'¿i¿∫¿¯¿¿¿W¿]¿Ñ¿ß¿®¿‚¿Ë¿¿8¿9¿u¿{¿¢¿œ¿–¿‹¿ 0¿ 1¿ Å¿ ™¿ ∞¿ ”¿ Ÿ¿ Á¿!D¿!N¿!T¿!ñ¿!‰¿"5¿"u¿"{¿" ¿"¿"ˆ¿#¿#¿#X¿#é¿#÷¿$	¿$_¿$å¿$ê¿$ë¿$·¿$¿$ˆ¿%¿%¿%-¿%Ñ¿%é¿%î¿%÷¿&$¿&u¿&µ¿&ª¿'¿'O¿'U¿'¶¿'≈¿'À¿'€¿'·¿(.¿({¿(Ω¿)
¿)¿)?¿)w¿)è¿)‡¿* ¿*-¿*I¿*ú¿*Ó¿+=¿+ç¿+≥¿+Õ¿+⁄¿+Ê¿+Ó¿,¿,¿,(¿,,¿,.¿,/¿,i¿,m¿,æ¿-¿-¿- ¿-m¿-≥¿-˚¿.>¿.p¿.æ¿.Ô¿/"¿/Å¿/‚¿/„¿0¿0¿0V¿0\¿0™¿0…¿0Ù¿12¿1h¿1l¿1m¿1°¿1ß¿1‚¿1Ë¿28¿2W¿2Ñ¿2ƒ¿2¸¿3 ¿3¿3¿3¿3/¿3d¿3ú¿3¢¿3Ÿ¿4¿4¿40¿44¿45¿4B¿4N¿4ã¿4±¿4Û¿4Ù¿5¿5Y¿5ì¿5‡¿6¿69¿6t¿6§¿6–¿7¿7W¿7t¿7©¿7„¿7Î¿7Ò¿7Ú¿8¿8]¿8ô¿8Ê¿9
¿9A¿9~¿9∞¿9ﬁ¿:¿:g¿:Ñ¿:ª¿:˜¿:ˇ¿;¿;	¿;
¿;¿;#¿;J¿;V¿;§¿;Ì¿;Ù¿< ¿<R¿<ü¿<¶¿<ß¿<”¿<˛¿=$¿=N¿=p¿=¶¿=ﬂ¿>6¿>g¿>}¿>∞¿>Ì¿?¿?A¿?|¿?º¿?Ò¿@,¿@]¿@Æ¿@⁄¿A
¿AE¿AÑ¿A„¿B¿B4¿Bm¿B∞¿Bœ¿C¿CK¿Cë¿C ¿D	¿D>¿Dï¿DÌ¿D¸¿E	¿E¿E¿E$¿E%¿Ej¿E£¿E§¿E˛¿F¿F¿F¿F¿F/¿F[¿Fâ¿Fû¿F¢¿F§¿F•¿F€¿G¿GR¿Gu¿G¥¿G›¿H	¿H#¿H)¿H*¿Hj¿Hk¿Hw¿Hø¿H¡¿H¬¿HÔ¿I"¿ID¿IS¿It¿Iò¿I∫¿I–¿I„¿I˚¿J¿J:¿JW¿Jp¿Jã¿J∆¿K¿K ¿KS¿KÖ¿KÜ¿Kí¿K‚¿K‰¿KÂ¿L"¿LU¿Lï¿L√¿M
¿M¿M¿M9¿M:¿Mu¿MÅ¿M∞¿MÀ¿MÁ¿N¿N-¿Nâ¿NØ¿N∂¿N¬¿Nœ¿O ¿Oq¿Oò¿Oü¿Oƒ¿O»¿O…¿Oı¿P¿PR¿P£¿P”¿P¯¿QE¿QR¿Qk¿Qq¿Qu¿Qv¿QÇ¿Q¥¿Qÿ¿Q˛¿R¿R<¿Rp¿Rñ¿R·¿R˚¿S2¿S8¿S\¿S`¿Sa¿Sm¿S°¿SŒ¿SÚ¿T¿T'¿TM¿Tp¿T™¿T‚¿U¿UE¿Uo¿U§¿U¬¿U◊¿V¿VV¿Ví¿V≤¿V·¿W¿W1¿WO¿Wü¿W©¿WØ¿W‘¿Wÿ¿WŸ¿WÂ¿X¿X`¿Xê¿Xº¿X‚¿Y¿Y<¿YC¿Yä¿Y∫¿YÊ¿Z¿Z:¿Zf¿Zm¿Zn¿Zí¿Z∏¿ZÓ¿[$¿[4¿[Z¿[v¿[Ω¿[Û¿\¿\7¿\l¿\°¿\“¿]¿]-¿]i¿]ö¿]…¿^ ¿^
¿^¿^*¿^;¿^j¿^±¿^Õ¿^Ï¿_3¿_C¿_]¿_á¿_ç¿_ø¿_√¿_ƒ¿_–¿` ¿`¿`2¿`m¿`®¿`Á¿a#¿a>¿aE¿aÜ¿a¬¿a›¿a‰¿aÂ¿b	¿b/¿b>¿bm¿b°¿b«¿c¿c¿c@¿cD¿cE¿cQ¿cn¿câ¿c†¿cƒ¿cÍ¿c˘¿d(¿d\¿dÇ¿d¥¿d∫¿dŸ¿d›¿dﬁ¿dÍ¿e
¿e.¿eT¿e¶¿e∫¿e€¿eÎ¿f¿fN¿ft¿fâ¿fÿ¿g%¿go¿gæ¿gÊ¿h(¿hÜ¿hﬁ¿i¿i'¿iT¿iÉ¿i¥¿iﬂ¿j¿jR¿jî¿j÷¿k2¿ks¿kµ¿k∆¿k’¿k‚¿l4¿lÇ¿lƒ¿l„¿m¿m/¿mi¿m«¿m”¿m›¿mÌ¿mÛ¿m˜¿m¯¿n¿n@¿ny¿n†¿nŒ¿n˜¿n˛¿oD¿oj¿o∑¿oª¿oΩ¿oæ¿oÌ¿p"¿pF¿pU¿py¿pù¿pø¿p’¿pË¿q ¿q¿q?¿q\¿qu¿qê¿qÀ¿r'¿r(¿r]¿rê¿rë¿rù¿rÒ¿rÛ¿rÙ¿s3¿s^¿s_¿sî¿s“¿t¿tG¿tH¿tT¿tu¿t¶¿t˙¿u¿u!¿u"¿up¿uº¿v
¿v¿vE¿v`¿v|¿v£¿v¬¿w¿wD¿wK¿wÖ¿w£¿w≥¿w—¿wÌ¿x¿x-¿x6¿xg¿xw¿xï¿x±¿x«¿xÒ¿x˙¿y¿y¿y/¿y3¿y4¿y@¿y`¿yÑ¿y™¿yÒ¿z¿z1¿zA¿zp¿z§¿z ¿zﬂ¿{*¿{y¿{ ¿|¿|f¿|∞¿|Ï¿}>¿}å¿}Œ¿}Ì¿~¿~9¿~s¿~—¿~›¿~Á¿~˜¿~˝¿¿¿¿J¿É¿™¿ÿ¿Ä¿Ä¿ÄN¿Ät¿Ä¡¿Ä≈¿Ä«   
Scrollable_ScrollableScopeScrollableState_ScrollableSelectionHandler _ScrollableSelectionHandlerState%_ScrollableSelectionContainerDelegate_getDeltaToScrollOrigin_ScrollSemantics_RenderScrollSemantics_RestorableScrollOffsetDiagonalDragBehaviorTwoDimensionalScrollableTwoDimensionalScrollableState_TwoDimensionalScrollableScope_VerticalOuterDimension_VerticalOuterDimensionState_HorizontalInnerDimension_HorizontalInnerDimensionState	(flutter.widgets.Scrollable.axisDirectionÅÃThe direction in which this widget scrolls.

For example, if the [Scrollable.axisDirection] is [AxisDirection.down],
increasing the scroll position will cause content below the bottom of the
viewport to become visible through the viewport. Similarly, if the
axisDirection is [AxisDirection.right], increasing the scroll position
will cause content beyond the right edge of the viewport to become visible
through the viewport.

Defaults to [AxisDirection.down].%flutter.widgets.Scrollable.controllerÉ	An object that can be used to control the position to which this widget is
scrolled.

A [ScrollController] serves several purposes. It can be used to control
the initial scroll position (see [ScrollController.initialScrollOffset]).
It can be used to control whether the scroll view should automatically
save and restore its scroll position in the [PageStorage] (see
[ScrollController.keepScrollOffset]). It can be used to read the current
scroll position (see [ScrollController.offset]), or change it (see
[ScrollController.animateTo]).

If null, a [ScrollController] will be created internally by [Scrollable]
in order to create and manage the [ScrollPosition].

See also:

 * [Scrollable.ensureVisible], which animates the scroll position to
   reveal a given [BuildContext]."flutter.widgets.Scrollable.physicsÑkHow the widgets should respond to user input.

For example, determines how the widget continues to animate after the
user stops dragging the scroll view.

Defaults to matching platform conventions via the physics provided from
the ambient [ScrollConfiguration].

If an explicit [ScrollBehavior] is provided to
[Scrollable.scrollBehavior], the [ScrollPhysics] provided by that behavior
will take precedence after [Scrollable.physics].

The physics can be changed dynamically, but new physics will only take
effect if the _class_ of the provided object changes. Merely constructing
a new instance with a different configuration is insufficient to cause the
physics to be reapplied. (This is because the final object used is
generated dynamically, which can be relatively expensive, and it would be
inefficient to speculatively create this object each frame to see if the
physics should be updated.)

See also:

 * [AlwaysScrollableScrollPhysics], which can be used to indicate that the
   scrollable should react to scroll requests (and possible overscroll)
   even if the scrollable's contents fit without scrolling being necessary..flutter.widgets.Scrollable.incrementCalculatorÇAn optional function that will be called to calculate the distance to
scroll when the scrollable is asked to scroll via the keyboard using a
[ScrollAction].

If not supplied, the [Scrollable] will scroll a default amount when a
keyboard navigation key is pressed (e.g. pageUp/pageDown, control-upArrow,
etc.), or otherwise invoked by a [ScrollAction].

If [incrementCalculator] is null, the default for
[ScrollIncrementType.page] is 80% of the size of the scroll window, and
for [ScrollIncrementType.line], 50 logical pixels./flutter.widgets.scrollable.excludeFromSemanticsÅ2Whether the scroll actions introduced by this [Scrollable] are exposed
in the semantics tree.

Text fields with an overflow are usually scrollable to make sure that the
user can get to the beginning/end of the entered text. However, these
scrolling actions are generally not exposed to the semantics layer.*flutter.widgets.scrollable.hitTestBehaviorÄæDefines the behavior of gesture detector used in this [Scrollable].

This defaults to [HitTestBehavior.opaque] which means it prevents targets
behind this [Scrollable] from receiving events.,flutter.widgets.scrollable.dragStartBehaviorÇäDetermines the way that drag start behavior is handled.

If set to [DragStartBehavior.start], scrolling drag behavior will
begin at the position where the drag gesture won the arena. If set to
[DragStartBehavior.down] it will begin at the position where a down
event is first detected.

In general, setting this to [DragStartBehavior.start] will make drag
animation smoother and setting it to [DragStartBehavior.down] will make
drag behavior feel slightly more reactive.

By default, the drag start behavior is [DragStartBehavior.start].

See also:

 * [DragGestureRecognizer.dragStartBehavior], which gives an example for
   the different behaviors.(flutter.widgets.scrollable.restorationIdÅ≥Restoration ID to save and restore the scroll offset of the scrollable.

If a restoration id is provided, the scrollable will persist its current
scroll offset and restore it during state restoration.

The scroll offset is persisted in a [RestorationBucket] claimed from
the surrounding [RestorationScope] using the provided restoration ID.

See also:

 * [RestorationManager], which explains how state restoration works in
   Flutter.)flutter.widgets.scrollable.scrollBehaviorÅùA [ScrollBehavior] that will be applied to this widget individually.

Defaults to null, wherein the inherited [ScrollBehavior] is copied and
modified to alter the viewport decoration, like [Scrollbar]s.

[ScrollBehavior]s also provide [ScrollPhysics]. If an explicit
[ScrollPhysics] is provided in [physics], it will take precedence,
followed by [scrollBehavior], and then the inherited ancestor
[ScrollBehavior]. U…