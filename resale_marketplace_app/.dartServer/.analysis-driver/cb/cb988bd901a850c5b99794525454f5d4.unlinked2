Ä‘_startstart_extentextent==hashCodetoStringlerpborderAnimationbordergapAnimationgaptextDirection	fillColorhoverColorTweenhoverAnimationblendedColorpaintshouldRepaint
hoverColor
isHoveringcreateState_kHoverDuration_controller_hoverColorController_borderAnimation_border_hoverAnimation_hoverColorTween	initStatedisposedidUpdateWidgetbuild	textAlignhelper
helperTexthelperStylehelperMaxLineserror	errorText
errorStyleerrorMaxLinesempty_helper_error
_hasHelper	_hasError_handleChange_buildHelper_buildErrorneverautoalways_xcenter
_stringifyiconinputlabelhintprefixsuffix
prefixIcon
suffixIconhelperErrorcounter	containercontentPaddingisCollapsedfloatingLabelHeightfloatingLabelProgressfloatingLabelAlignment	borderGapalignLabelWithHintisDenseisEmptyvisualDensitymaintainHintSizeinputConstraintsbaselinecontainerHeightsubtextSizesize
subtextGapprefixToInputGapinputToSuffixGapchildren
decoration_decoration_textDirectiontextBaseline_textBaseline_defaultTextAlignVerticaltextAlignVertical_textAlignVertical	isFocused
_isFocusedexpands_expands	material3
_material3_isOutlineAligned_densityOffsetvisitChildrenForSemantics	_minWidth	_maxWidth
_minHeight_boxSize_getBaseline_getDryBaseline_boxParentData_computeSubtextSizes_layout_interpolateThreecomputeMinIntrinsicWidthcomputeMaxIntrinsicWidth_lineHeightcomputeMinIntrinsicHeightcomputeMaxIntrinsicHeightcomputeDistanceToActualBaseline_labelTransformcomputeDryBaselinecomputeDryLayoutperformLayout_paintLabelapplyPaintTransformhitTestSelfhitTestChildren$_childSemanticsConfigurationDelegatedescribeSemanticsConfigurationslotschildForSlotcreateRenderObjectupdateRenderObjectlabelIsFloatingtextstylechildsemanticsSortKeysemanticsTag	baseStyle_labelShouldWithdrawcontainerOfdebugFillProperties_floatingLabelController_floatingLabelAnimation_shakingLabelController
_borderGap_prefixSemanticsSortOrder_inputSemanticsSortOrder_suffixSemanticsSortOrder_kPrefixSemanticsTag_kSuffixSemanticsTagdidChangeDependencies_effectiveDecoration_floatingLabelEnabled_getDefaultM2BorderColor_getFillColor_getHoverColor_getIconColor_getPrefixIconColor_getSuffixIconColor_hasInlineLabel_shouldShowLabel_getInlineLabelStyle_getInlineHintStyle_getFloatingLabelStyle_getHelperStyle_getErrorStylematerialState_getDefaultBorder_curvedAnimation_buildTransition	iconColor	labelText
labelStylefloatingLabelStylehintText	hintStylehintTextDirectionhintMaxLineshintFadeDurationmaintainHintHeightfloatingLabelBehaviorprefixIconConstraints
prefixTextprefixStyleprefixIconColor
suffixTextsuffixStylesuffixIconColorsuffixIconConstraintscounterTextcounterStylefilled
focusColorerrorBorderfocusedBorderfocusedErrorBorderdisabledBorderenabledBorderenabledsemanticCounterTextconstraintscopyWithapplyDefaultsoutlineBorderactiveIndicatorBordermergecontext_colors
_textTheme_kTransitionDuration_kTransitionCurve_kFinalLabelScale_SubtextSize_ChildBaselineGetter_kHintFadeTransitionDuration_InputBorderGap_InputBorderTween_InputBorderPainter_BorderContainer_BorderContainerState_HelperError_HelperErrorStateFloatingLabelBehaviorFloatingLabelAlignment_DecorationSlot_Decoration_RenderDecorationLayout_RenderDecoration
_Decorator
_AffixTextInputDecorator_InputDecoratorStateInputDecorationInputDecorationTheme_InputDecoratorDefaultsM2_InputDecoratorDefaultsM3Å∑
lerpDoubleDurationmillisecondsCurveCurvesfastOutSlowIndouble	RenderBoxBoxConstraintsChangeNotifiernotifyListenersoverrideboolObject	identicalruntimeTypestartextentinthashStringdescribeIdentityTweenInputBorderShapeBorderlerpbeginendCustomPainter
Listenablerepaint	AnimationTextDirectionColor
ColorTween
alphaBlendevaluatevoidCanvasSizeRectOffsetzeroalphadrawPathgetOuterPathtextDirectionPaintcolorstylePaintingStylefillpaintgapStart	gapExtentgapPercentagevalueborderAnimationhoverAnimationgapAnimationbordergapStatefulWidgetStateTickerProviderStateMixinAnimationControllerCurvedAnimation	initStatedurationwidget
isHoveringvsyncparentcurvereverseCurveflippedlinearColorstransparent
hoverColordisposedidUpdateWidgetforwardreverseWidgetBuildContextCustomPaintforegroundPaintermergeDirectionalityof	fillColorhoverColorTween	TextAlign	TextStyleSingleTickerProviderStateMixinSizedBoxshrink
helperTexthelper	errorTexterroraddListenersetState	Semantics	containerchildFadeTransitionopacityanimateTexthelperStyle	textAlignoverflowTextOverflowellipsismaxLineshelperMaxLinesFractionalTranslationtranslationview
errorStyleerrorMaxLinesisDismissedisCompletedStackchildrenfloatingLabelBehaviorlabel	labelTextfloatingLabelAlignment	immutableltrrtl_hashCode_xtoStringAsFixedEdgeInsetsDirectionalVisualDensitycontentPaddingisCollapsedfloatingLabelHeightfloatingLabelProgress	borderGapalignLabelWithHintisDenseisEmptyvisualDensitymaintainHintSizeiconinputhintprefixsuffix
prefixIcon
suffixIconhelperErrorcounter!SlottedContainerRenderObjectMixinTextBaselineTextAlignVerticalchildForSlotIterablemarkNeedsLayoutcentertopymarkNeedsSemanticsUpdate	isOutlinebaseSizeAdjustmentRenderObjectVisitorgetMinIntrinsicWidthgetMaxIntrinsicWidthgetMinIntrinsicHeightsizeChildLayoutHelpergetBaseline
alphabeticheightgetDryBaselinedryLayoutChildBoxParentData
parentDataChildLayouterlayoutChildboxconstraintsdeflate
EdgeInsetsonlyleftcounterSizewidthmaxcounterAscentascentbottomHeightsubtextHeightmaxWidthinfinityloosen
horizontalcopyWithverticaldytightenbottomkMinInteractiveDimension	maxHeightmininputConstraintscontainerHeightbaselinesubtextSizeListreduceoffsetgetDistanceToActualBaselineMatrix4ideographicgetDryLayout	constrainconstrainWidthconstrainHeighttightForlayoutparentUsesSizegetDistanceToBaselinedxoffsetToPrefixIconPaintingContext
paintChild
borderSideidentity	translatescalelayerpushTransformneedsCompositingoldLayerTransformLayerRenderObjectmultiplyapplyPaintTransformBoxHitTestResultaddWithPaintOffsetpositionhitTesttransformed"ChildSemanticsConfigurationsResultSemanticsConfiguration)ChildSemanticsConfigurationsResultBuilderchildConfigtagsChildrenWith_kPrefixSemanticsTagadd_kSuffixSemanticsTagmarkAsMergeUpmarkAsSiblingMergeGroupbuildchildConfigurationsDelegate#SlottedMultiChildRenderObjectWidgetvalues
decorationtextBaselinetextAlignVertical	isFocusedexpands	material3ThemeuseMaterial3StatelessWidgetSemanticsSortKeySemanticsTagDefaultTextStyleIgnorePointerignoringAnimatedOpacitysortKeytagForChildren	TextFieldEditableTextMaterial
DecorationDecoratedBox	ThemeDatainputDecorationTheme	textThememinLinesDropdownButtonInkWellalwaysenabledfilledcounterTextfindAncestorRenderObjectOfTypeDiagnosticPropertiesBuilderdebugFillPropertiesDiagnosticsPropertydefaultValueOrdinalSortKeynametoStringnever_labelShouldWithdrawdidChangeDependenciesapplyDefaultscontextdisabledColorcolorSchemeprimary	hintColor	onSurfacewithOpacityMaterialStateProperty	resolveAs	iconColorIconButtonThemeDataprefixIconColorforegroundColorresolvesuffixIconColor
labelStyletitleMedium	baseStyle	hintStyle	bodyLargefloatingLabelStyleSetMaterialStatedisabledfocusedhoveredUnderlineInputBorder
BorderSidenoneactiveIndicatorBorderoutlineBorderIconButtonThemehintTexthintTextDirectionhintMaxLineshintFadeDurationAnimatedSwitchertransitionBuildererrorBorderdisabledBorderfocusedErrorBorderfocusedBorderenabledBorderMatrixTransition	animationonTransformtranslationValuesAnimatedDefaultTextStyle
prefixText
suffixTextlabelIsFloatingtextprefixStylesemanticsSortKeysemanticsTagsuffixStyleMouseRegioncursorSystemMouseCursorsbasicPaddingpadding	IconThemedataIconThemeDataCenterwidthFactorheightFactorConstrainedBoxprefixIconConstraintseffectiveConstraintsminWidth	minHeightButtonStyleWidgetStatePropertyAlliconSizesuffixIconConstraints
liveRegioncounterStylesemanticsLabelsemanticCounterTextfromSTEBright
MediaQuerytextScalerOffontSize
DeprecatedIcon	ImageIconWidgetStateColorWidgetStaterichWidgetStateTextStyleColorSchemeWidgetStatePropertyTextFormField	validatorautoEdgeInsetsGeometry	collapsedAlignstandard
focusColorOutlineInputBorderWidgetStateInputBordermaintainHintHeighthashAlljoinDiagnosticable!MaterialStateUnderlineInputBorderMaterialStateOutlineInputBorderIntPropertyColorPropertyMaterialStateTextStyleresolveWithstatescontains	bodySmallMaterialStateColorbrightnessOf
Brightnessdarklightwhite70black45	TextThemeonSurfaceVariantsurfaceContainerHighestMaterialStateBorderSideonErrorContaineroutlineChangeNotifierTweenCustomPainterStatefulWidgetStateTickerProviderStateMixinSingleTickerProviderStateMixin	RenderBox!SlottedContainerRenderObjectMixin#SlottedMultiChildRenderObjectWidgetStatelessWidgetDiagnosticableInputDecorationThemeƒÛ(ÜXQ_ıv§
pÖÔ    Ål   Å~ÅÅmathÅÅ	dart:mathÅòÅß
lerpDouble Åà   dart:ui  Å´   package:flutter/foundation.dart  Å’   package:flutter/rendering.dart  Å˛   package:flutter/widgets.dart  Ç&   button_style.dart  ÇB   color_scheme.dart  Ç^   colors.dart  Çt   constants.dart  Çç   icon_button_theme.dart  ÇÆ   input_border.dart  Ç    material.dart  Ç‚   material_state.dart  É    text_theme.dart  É   
theme.dart  É/   theme_data.dart¿Ç† ¿îª <ÄÜÄ§Ä•Ä‘ÄÿÄ¯ÅÅ:ÅaÅjÅkÅáÅ©Å™Å‘Å˝Ç$Ç%ÇAÇ]ÇsÇåÇ≠Ç…Ç·ÇˇÉÉ.ÉHÉIÉaÉyÉzÉ†Ñ6ÑyÑØÑ÷Ñ◊Ö,ÖâÖäÖƒÖ«Ü	ÜRÜxÜ¬Ü√áá&áUágáÜá£áæá‘áÌáÛá˜á¯àà0àMàiàÄàôàüà£à§à∞ââ4âVâiâoâõâØâµäääää~ä∞ä±äΩäÏäÓäÔã ãUãÑãÖãëã‚ã‰ãÂå6åhåÄå°åƒåﬁå˛çç6çSçuçòç∏çπç‰éé.éKépéâé≠é◊éÿè<è=èIèrè∏èËêê?êVê¢ê≤ê◊êˇëëëë&ë4ëFëaë~ëßëÀë“ë÷ë◊ë„ííVíçí¿íÁìì;ì?ì@ìLì{ì}ì~ì îî^î~îÆî…î„î˙ïï7ïUïsïyïzïñï≥ï€ïÙññ'ñ(ñ4ñvñxñyñ’óóóDóvóüó¡óÈòòòò/òFòwòòòƒò◊òﬁô2ôZôuôïôƒôÀöörö»öÃöÕöŸöÏõõ,õLõkõÄõÑõÖõëõ∆õÏúúiú{úëú¶ú¨ú·ù9ù?ùtùìùºùÀùÙù¸ûûûûû:ûRûÄû∞ûÃû‚üüü:üSü~üóü üÔ††C†L†S†W†Y†Z†ú†€°°9°P°d°u°ä°†°π°…°›°Ú¢
¢¢¢/¢G¢c¢É¢†¢∑¢“¢Ò££££T£V£W£±£˘§2§c§d§å§ü§±§≤§ˇ•I•J•V•k•Ç•÷•Î¶	¶(¶E¶e¶k¶ó¶õ¶ú¶®¶ª¶÷¶Î¶Ô¶ß	ßßIßQßUßVßbßçß≠ßÆßŸ®®9®n®ñ®∆®©"©#©p©…™™A™ï™ñ™≥™‘™Ú´´J´j´â´»´Í¨	¨¨7¨?¨E¨I¨J¨d¨§¨∫¨—¨Ó≠9≠H≠e≠w≠ô≠¬≠ÌÆÆKÆZÆcÆjÆnÆoÆàÆ∆Æ‹ÆÛØØ.ØTØzØßØ≈ØÌØ˛∞∞0∞S∞}∞™∞€±±±'±0±7±;±<±H±o±í±ß±ø±Ë±˜≤≤%≤-≤3≤4≤W≤m≤Ñ≤´≤∫≤—≤Á≤Ô≤ı≤ˆ≥≥:≥@≥A≥i≥Ü≥å≥ç≥¢≥∂≥“≥Ï¥;¥W¥d¥}¥à¥ë¥ó¥ò¥Æ¥¬µ#µ,µ2µ3µEµIµKµLµÇµÜµîµòµÊ∂%∂p∂â∂¶∂Ô∂¯∂˘∑?∑G∑H∑}∑á∑â∑ä∑—∑Á∑Î∑˘∑˝∏M∏å∏€∏Í∏ıππaπbπûπ±π≤π˛∫∫O∫U∫°∫Ô∫ª6ªÑªÖªëª¥ªµª¡ª‰ººººKº_ºeº£ºßº®ºœºÁΩΩCΩÑΩãΩèΩêΩúΩ√Ω≈Ω∆æ æææ(æ1æ9æCæMæ[æiæxæÉæêæíæìæŒæŸæÌøø%øDøkøîøæøÿøı¿ @¿ @6¿ @Q¿ @r¿ @ñ¿ @•¿ @µ¿ @≈¿ @‘¿ @Â¿ @ˆ¿ A¿ A ¿ A6¿ AH¿ A\¿ Ab¿ Ac¿ Aë¿ A´¿ Aœ¿ Aı¿ B,¿ BH¿ Bk¿ Bå¿ B£¿ Bπ¿ Bﬁ¿ B˝¿ C¿ C*¿ CA¿ CW¿ Co¿ Cá¿ C£¿ Cø¿ C‹¿ Cı¿ D¿ D¿ D¿ D@¿ Db¿ Du¿ D{¿ Dß¿ Dª¿ D¡¿ D‰¿ E¿ EB¿ E~¿ Eæ¿ F ¿ F"¿ FJ¿ FÑ¿ F®¿ FÃ¿ F¸¿ G2¿ GP¿ Gp¿ Gê¿ GÆ¿ G–¿ GÚ¿ H¿ HF¿ Hr¿ Hñ¿ Hº¿ H¿¿ H¡¿ HÕ¿ H¿ I¿ I¿ I8¿ IT¿ I`¿ Io¿ Iá¿ Iî¿ I°¿ I¥¿ I ¿ I‘¿ Iﬂ¿ IÍ¿ IÙ¿ J ¿ J¿ J¿ J,¿ J^¿ Jc¿ Je¿ Jf¿ J≤¿ J˙¿ K2¿ KR¿ Kt¿ Kò¿ K¥¿ K◊¿ Kˆ¿ L¿ L¿ L¿ L>¿ LW¿ Lw¿ Lö¿ L≠¿ LØ¿ L∞¿ Lˆ¿ M ¿ Mi¿ M¿ M§¿ MŒ¿ Mˆ¿ N¿ N.¿ NK¿ Nu¿ Nñ¿ NΩ¿ N‚¿ O¿ O0¿ OK¿ Oj¿ Ok¿ Oæ¿ OÈ¿ P¿ PS¿ Pã¿ På¿ P…¿ Q¿ QG¿ QÑ¿ Q≈¿ R¿ RO¿ Rò¿ R„¿ S&¿ Sm¿ Sn¿ S°¿ S≠¿ S“¿ T ¿ T8¿ TW¿ Tx¿ T£¿ TŒ¿ TÒ¿ U¿ U5¿ UT¿ UÄ¿ U•¿ UŒ¿ U’¿ UŸ¿ U⁄¿ V¿ V"¿ VH¿ Vh¿ Vv¿ V|¿ Vï¿ V¨¿ V∞¿ V±¿ VÊ¿ W¿ W1¿ WT¿ Wb¿ Wh¿ WÑ¿ Wõ¿ Wü¿ W†¿ W“¿ W¿ X¿ X;¿ XI¿ XO¿ Xj¿ XÅ¿ XÖ¿ XÜ¿ Xª¿ Y¿ Ye¿ Yé¿ Y¬¿ YÈ¿ Y˜¿ Y˝¿ ZB¿ Zé¿ Z∞¿ Zæ¿ Zƒ¿ Z‰¿ Z˚¿ Zˇ¿ [ ¿ [$¿ [7¿ [U¿ [t¿ [Ç¿ [à¿ [†¿ [¿¿ [ƒ¿ [≈¿ [Â¿ [˛¿ \¿ \7¿ \E¿ \K¿ \a¿ \x¿ \|¿ \}¿ \°¿ \º¿ \⁄¿ \˘¿ ]¿ ]¿ ]%¿ ]<¿ ]@¿ ]A¿ ]ê¿ ]ù¿ ]º¿ ]ˇ¿ ^¿ ^¿ ^P¿ ^Q¿ ^]¿ ^ù¿ ^µ¿ ^À¿ ^—¿ ^Î¿ _¿ _	¿ _'¿ _C¿ _I¿ _J¿ _c¿ _z¿ _Ä¿ _ò¿ _Ø¿ _«¿ _È¿ `¿ `	¿ `¿ `¿ `)¿ `@¿ `F¿ `d¿ `Ä¿ `Ü¿ `†¿ `∏¿ `æ¿ `€¿ `ˆ¿ `¸¿ a¿ a1¿ aJ¿ aP¿ aT¿ aU¿ aë¿ a¡¿ a˝¿ b-¿ bi¿ bô¿ b€¿ c(¿ cÇ¿ cõ¿ cü¿ c†¿ c¿ dM¿ dì¿ dó¿ dò¿ dÚ¿ dÛ¿ e<¿ e=¿ ed¿ eç¿ eµ¿ e‰¿ eÎ¿ f3¿ fê¿ f∞¿ f∑¿ f∏¿ fˇ¿ g/¿ g6¿ gî¿ gï¿ g÷¿ gÈ¿ gÔ¿ g¿ hC¿ h§¿ hﬂ¿ h˘¿ iY¿ i≤¿ j¿ jh¿ jl¿ jm¿ j∫¿ k¿ kL¿ ko¿ kë¿ kπ¿ kË¿ kÔ¿ k˚¿ l)¿ lw¿ lö¿ lÁ¿ m6¿ mÑ¿ mÕ¿ mÚ¿ m˘¿ m˙¿ n:¿ n;¿ np¿ nó¿ nÚ¿ o:¿ ob¿ oi¿ oµ¿ oÌ¿ oÙ¿ oı¿ p>¿ pg¿ p£¿ p ¿ pÍ¿ q
¿ q¿ q¿ qE¿ qx¿ qò¿ q¿ r¿ rh¿ rì¿ ræ¿ s ¿ sÇ¿ sÉ¿ s€¿ sË¿ s˛¿ t¿ t|¿ tá¿ t§¿ u¿ u
¿ u¿ u3¿ u>¿ uÅ¿ uà¿ u±¿ uÕ¿ uÊ¿ v¿ v1¿ vä¿ v∞¿ v⁄¿ vÁ¿ w¿ wd¿ wm¿ wn¿ w∫¿ w‚¿ x8¿ x¿ x≤¿ xª¿ xÁ¿ xË¿ y)¿ y;¿ ya¿ y≥¿ y–¿ y›¿ yÙ¿ y˙¿ y˚¿ zK¿ zv¿ z∏¿ zÛ¿ {¿ { ¿ {y¿ {Ü¿ {ê¿ {µ¿ {∂¿ {ﬂ¿ |¿ |c¿ |}¿ |ﬁ¿ };¿ }[¿ }∂¿ }∑¿ }˙¿ ~#¿ ~t¿ ~å¿ ~ì¿ ~„¿ ~‰¿ F¿ ®¿ ©¿ ˜¿ Ä	¿ ÄP¿ Ä°¿ Äœ¿ Ä˘¿ Å#¿ Å*¿ Åv¿ Åú¿ Å”¿ Å˛¿ Ç¿ ÇG¿ ÇN¿ ÇO¿ Çà¿ Ç·¿ É¿ É!¿ É3¿ ÉR¿ Él¿ ÉÑ¿ Éû¿ É¿¿ É›¿ É‰¿ Ñ
¿ ÑK¿ Ñe¿ Ñç¿ ÑÎ¿ Ö¿ Ö¿ Ö?¿ Öò¿ Öô¿ ÖÂ¿ Ü¿ Ü<¿ Üõ¿ Üú¿ ÜÎ¿ á<¿ áÖ¿ á“¿ à ¿ àX¿ à¶¿ à˜¿ âF¿ âq¿ â—¿ â“¿ ä ¿ äD¿ äa¿ äu¿ äï¿ ä≤¿ ä“¿ äÛ¿ ã¿ ãj¿ ã∫¿ å¿ å¿ å¿ å<¿ åè¿ åò¿ å”¿ ç#¿ ç^¿ çû¿ çß¿ çÚ¿ éA¿ éÇ¿ é≠¿ è¿ èK¿ èú¿ è¿¿ è‹¿ è˚¿ ê¿ ê5¿ ê>¿ êK¿ ê•¿ ê‚¿ êË¿ êÈ¿ ë¿ ë7¿ ë_¿ ëy¿ ëô¿ ë¯¿ ëˇ¿ í¿ í¿ íR¿ í£¿ íÚ¿ ì<¿ ìå¿ ì›¿ ìÎ¿ î¿ î ¿ î3¿ îC¿ îl¿ îr¿ î¿¿ ï¿ ï¿ ïx¿ ï©¿ ï≠¿ ïÆ¿ ï∫¿ ïÌ¿ ñ¿ ñG¿ ñë¿ ñπ¿ ñﬁ¿ ó'¿ óO¿ ós¿ óä¿ óÆ¿ ó÷¿ ò¿ ò ¿ ò!¿ ò-¿ ò`¿ òÄ¿ ò∫¿ ô¿ ô,¿ ôQ¿ ôö¿ ô¬¿ ôÊ¿ ô˝¿ ö!¿ öI¿ öè¿ öì¿ öî¿ ö—¿ öÍ¿ õ¿ õ-¿ õ?¿ õG¿ õÄ¿ õÜ¿ õô¿ õÊ¿ ú¿ úR¿ úV¿ úW¿ úc¿ úñ¿ úÕ¿ ù¿ ù¿ ù6¿ ù7¿ ùz¿ ù∆¿ ù«¿ û
¿ ûV¿ ûW¿ ûï¿ ûñ¿ ûÍ¿ ü&¿ üc¿ ü¶¿ üß¿ ü˘¿ †R¿ †ô¿ †∏¿ †€¿ †·¿ †‚¿ °¿ °]¿ °^¿ °ô¿ °Ÿ¿ °⁄¿ ¢¿ ¢X¿ ¢c¿ ¢j¿ ¢∏¿ ¢≈¿ ¢È¿ ¢Ò¿ £¿ £0¿ £D¿ £X¿ £p¿ £q¿ £í¿ £Ø¿ £¿ §	¿ §)¿ §D¿ §q¿ §É¿ §ò¿ §∞¿ §»¿ §‡¿ •¿ •O¿ •P¿ •ö¿ •û¿ •ü¿ •´¿ •ﬁ¿ ¶¿ ¶¿ ¶¿ ¶¿ ¶Z¿ ¶É¿ ¶ú¿ ¶Æ¿ ¶¥¿ ¶·¿ ß-¿ ß1¿ ß2¿ ß\¿ ßx¿ ßy¿ ßÖ¿ ß·¿ ®
¿ ®#¿ ®5¿ ®;¿ ®o¿ ®Ç¿ ®∑¿ ®€¿ ®‚¿ ©¿ ©+¿ ©Q¿ ©©¿ ©Û¿ ™N¿ ™ó¿ ™£¿ ™º¿ ™¿¿ ™¡¿ ™Õ¿ ´¿ ´7¿ ´J¿ ´¿ ´£¿ ´™¿ ´Ÿ¿ ´›¿ ´ﬁ¿ ´Í¿ ¨¿ ¨<¿ ¨X¿ ¨å¿ ¨ü¿ ¨—¿ ¨Ú¿ ¨˘¿ ≠(¿ ≠q¿ ≠Ω¿ ≠æ¿ ≠Ò¿ ≠Ú¿ Æ#¿ Æ@¿ Æã¿ Æ≥¿ ÆÁ¿ Æ¿ Ø4¿ Ød¿ ØÜ¿ Øπ¿ Ø¬¿ Ø˚¿ ∞¿ ∞¿ ∞4¿ ∞g¿ ∞∑¿ ∞‘¿ ∞⁄¿ ∞€¿ ∞Û¿ ±#¿ ±a¿ ±É¿ ±å¿ ±™¿ ±∞¿ ±±¿ ≤¿ ≤?¿ ≤£¿ ≥¿ ≥¿ ≥¿ ≥<¿ ≥Z¿ ≥ó¿ ≥»¿ ¥+¿ ¥J¿ ¥}¿ ¥£¿ ¥“¿ ¥ﬂ¿ ¥È¿ µ¿ µS¿ µu¿ µ™¿ µ‘¿ ∂¿ ∂¿ ∂/¿ ∂ä¿ ∂î¿ ∂ö¿ ∂õ¿ ∂»¿ ∂˝¿ ∑(¿ ∑3¿ ∑{¿ ∑Ñ¿ ∑°¿ ∑ß¿ ∑®¿ ∑≈¿ ∑„¿ ∑Ì¿ ∏¿ ∏<¿ ∏å¿ ∏≥¿ ∏ø¿ ∏ﬁ¿ π¿ πP¿ πe¿ π§¿ π≤¿ πæ¿ πﬁ¿ ∫(¿ ∫4¿ ∫S¿ ∫í¿ ∫û¿ ∫º¿ ∫˘¿ ª¿ ª)¿ ªP¿ ªÉ¿ ª®¿ ª¥¿ ª‘¿ º¿ º¿ º"¿ º,¿ ºJ¿ ºT¿ ºx¿ º£¿ º⁄¿ Ω¿ Ω¿ Ω,¿ Ω]¿ Ωä¿ Ωü¿ Ω ¿ Ωÿ¿ Ω‰¿ æ¿ æ9¿ æE¿ æd¿ æè¿ æõ¿ æπ¿ æ„¿ æÔ¿ ø¿ ø:¿ øÜ¿ ø´¿ ø∑¿ ø◊¿ ¿¿ ¿)¿ ¿:¿ ¿D¿ ¿J¿ ¿K¿ ¿d¿ ¿¢¿ ¿‰¿ ¡.¿ ¡y¿ ¡∏¿ ¡˜¿ ¬¿ ¬6¿ ¬a¿ ¬ß¿ √	¿ √¿ √H¿ √â¿ √…¿ √·¿ √Ó¿ √Ô¿ ƒ¿ ƒ`¿ ƒ±¿ ≈¿ ≈0¿ ≈v¿ ≈ó¿ ≈Ì¿ ≈˘¿ ∆,¿ ∆l¿ ∆¨¿ ∆ƒ¿ ∆—¿ ∆Ÿ¿ «$¿ «1¿ «Z¿ «É¿ «â¿ «ç¿ «é¿ «À¿ «Û¿ «˜¿ «¯¿ »¿ »;¿ »`¿ »{¿ »≈¿ »Õ¿ »”¿ »‘¿ »Ï¿ »Ì¿ …¿ …F¿ …¿ …∂¿ …¯¿  B¿  Ç¿  »¿ À¿ ÀL¿ Àt¿ À¥¿ Ã¿ Ã?¿ Ãf¿ ÃØ¿ ÃŒ¿ Õ*¿ Õm¿ Õë¿ Õˆ¿ Œ¿ Œ+¿ ŒJ¿ ŒÑ¿ Œƒ¿ Œ‰¿ œ=¿ œõ¿ œß¿ œ›¿ – ¿ – ¿ –y¿ –⁄¿ –Ê¿ –Ó¿ —C¿ —~¿ —«¿ —ﬂ¿ —¸¿ “-¿ “I¿ “n¿ “à¿ “ò¿ “≤¿ “«¿ “Û¿ “¸¿ ”	¿ ”¿ ”#¿ ”$¿ ”7¿ ”L¿ ”a¿ ”z¿ ”ì¿ ”±¿ ”∆¿ ”Ã¿ ”‡¿ ”˙¿ ‘¿ ‘¿ ‘¿ ‘!¿ ‘e¿ ‘ö¿ ‘⁄¿ ‘Í¿ ’¿ ’F¿ ’L¿ ’}¿ ’Å¿ ’Ç¿ ’é¿ ’ª¿ ’º¿ ’»¿ ÷¿ ÷D¿ ÷ç¿ ÷«¿ ÷˚¿ ◊¿ ◊/¿ ◊p¿ ◊§¿ ◊„¿ ◊Ó¿ ◊˜¿ ÿ
¿ ÿ¿ ÿ'¿ ÿ-¿ ÿ?¿ ÿC¿ ÿD¿ ÿè¿ ÿæ¿ ÿƒ¿ Ÿ¿ Ÿ7¿ Ÿk¿ Ÿü¿ Ÿ‰¿ ⁄9¿ ⁄r¿ ⁄ù¿ ⁄˘¿ €2¿ €]¿ €l¿ €ò¿ €†¿ €¶¿ € ¿ ‹¿ ‹	¿ ‹-¿ ‹f¿ ‹l¿ ‹à¿ ‹å¿ ‹ç¿ ‹ô¿ ‹‡¿ ›/¿ ›3¿ ›5¿ ›6¿ ›ë¿ ›¶¿ ›À¿ ›È¿ ﬁ
¿ ﬁ*¿ ﬁG¿ ﬁb¿ ﬁh¿ ﬁi¿ ﬁâ¿ ﬁÆ¿ ﬁ—¿ ﬁˇ¿ ﬂ¿ ﬂ-¿ ﬂ.¿ ﬂ:¿ ﬂ{¿ ﬂ|¿ ﬂà¿ ﬂ∑¿ ﬂ“¿ ‡¿ ‡2¿ ‡c¿ ‡í¿ ‡≈¿ ‡¯¿ ·3¿ ·n¿ ·´¿ ·‡¿ ‚¿ ‚ ¿ ‚$¿ ‚%¿ ‚1¿ ‚p¿ ‚é¿ ‚¨¿ ‚–¿ ‚Ú¿ „¿ „:¿ „R¿ „É¿ „ä¿ „é¿ „è¿ „õ¿ „Ì¿ „˛¿ ‰¿ ‰8¿ ‰V¿ ‰Ñ¿ ‰®¿ ‰œ¿ ‰”¿ ‰’¿ ‰÷¿ Â¿ Â¿ Â9¿ ÂH¿ ÂX¿ Âh¿ ÂÉ¿ Â£¿ Â©¿ Â™¿ Â»¿ Âﬁ¿ Â¯¿ Ê¿ Ê;¿ Ê^¿ Ê_¿ Êk¿ Êí¿ Êµ¿ Ê…¿ ÊÂ¿ Á	¿ Á)¿ ÁS¿ Áw¿ Áß¿ Á√¿ ÁÍ¿ Ë¿ Ëc¿ Ëp¿ Ë{¿ ËÑ¿ Ëã¿ Ëè¿ Ëë¿ Ëí¿ ËŒ¿ Ë“¿ È¿ Èm¿ È∑¿ Í¿ Í¿ ÍN¿ ÍR¿ Í°¿ Í”¿ Í◊¿ Î(¿ Îs¿ Îè¿ Îì¿ Î°¿ Î•¿ ÎÌ¿ Ï(¿ Ïr¿ Ïè¿ ÏΩ¿ Ïˇ¿ Ì¿ Ì¿ Ìo¿ Ì~¿ Ìó¿ Ì¶¿ Ìƒ¿ Ìÿ¿ ÌÏ¿ Ó¿ Ó$¿ ÓA¿ Ó[¿ Óu¿ ÓÖ¿ Óã¿ Óå¿ Ó»¿ ÓŒ¿ Ô¿ ÔQ¿ Ôu¿ Ôv¿ Ô¬¿ Ô˛¿ ¿ L¿ ~¿ Ñ¿ œ¿ ˚¿ Ò¿ Ò¿ Ò_¿ Ò}¿ Ò~¿ Ò¬¿ ÒÛ¿ Ò˘¿ ÚF¿ Úó¿ ÚÂ¿ Û6¿ ÛÖ¿ Û–¿ Ù¿ Ù=¿ ÙR¿ ÙÄ¿ ÙÅ¿ Ù™¿ Ù∞¿ ı ¿ ı¿ ı¿ ı-¿ ı3¿ ıC¿ ıI¿ ıï¿ ıÊ¿ ıˆ¿ ˆ¿ ˆ¿ ˆW¿ ˆ]¿ ˆú¿ ˆÂ¿ ˜¿ ˜!¿ ˜:¿ ˜S¿ ˜T¿ ˜ü¿ ˜•¿ ˜Ù¿ ¯D¿ ¯P¿ ¯V¿ ¯¢¿ ¯Ò¿ ˘.¿ ˘4¿ ˘M¿ ˘c¿ ˘d¿ ˘å¿ ˘í¿ ˘‚¿ ˘Ó¿ ˘Ù¿ ˙¿ ˙#¿ ˙$¿ ˙T¿ ˙Z¿ ˙ù¿ ˙¥¿ ˙µ¿ ˚¿ ˚!¿ ˚'¿ ˚o¿ ˚™¿ ˚Õ¿ ˚ﬂ¿ ¸
¿ ¸R¿ ¸S¿ ¸_¿ ¸†¿ ¸°¿ ¸Î¿ ˝9¿ ˝Ö¿ ˝ ¿ ˝Ô¿ ˝ı¿ ˛2¿ ˛j¿ ˛Õ¿ ˛Î¿ ˛Ô¿ ˛¿ ˛¸¿ ˇA¿ ˇl¿ ˇ¿¿  ¿ g¿ ø¿¿¿¿	¿b¿ù¿”¿¿E¿ë¿¢¿Í¿Ò¿¿¿z¿¬¿…¿Ë¿Ì¿M¿≠¿Æ¿∫¿œ¿Ê¿Á¿¿c¿à¿â¿Ω¿„¿ˆ¿)¿0¿i¿ò¿¿¿‡¿¿¿¿w¿{¿|¿à¿©¿Ã¿Ì¿Ò¿Ú¿˛¿¿9¿`¿á¿°¿¬¿◊¿€¿‹¿ı¿	¿	B¿	J¿	N¿	O¿	x¿	ú¿	‹¿
¿
¿
¿
F¿
p¿
¬¿¿*¿M¿ô¿ù¿û¿™¿◊¿˜¿&¿I¿O¿P¿v¿œ¿–¿+¿m¿ô¿®¿‘¿‹¿‚¿„¿¿R¿S¿µ¿”¿È¿˛¿¿¿	¿A¿n¿∆¿Â¿
¿¿%¿O¿U¿j¿ñ¿ú¿∫¿‹¿‚¿4¿J¿i¿å¿√¿„¿.¿4¿M¿Q¿R¿û¿√¿Û¿¿¿B¿ñ¿ú¿Ï¿¿Ò¿¿r¿ì¿ô¿Ω¿Ú¿¿¿¿a¿¥¿¿e¿i¿j¿á¿∂¿ﬂ¿¿¿a¿¡¿¿^¿b¿c¿Ä¿Ø¿ÿ¿˚¿¿Z¿∫¿¿W¿[¿\¿ò¿·¿2¿C¿`¿ã¿œ¿”¿‘¿¿]¿^¿®¿Â¿<¿Ä¿ú¿±¿∏¿π¿÷¿'¿ä¿ã¿∑¿ÿ¿ı¿¿)¿-¿.¿w¿¥¿ 
¿ N¿ i¿ ~¿ Ö¿ Ü¿ £¿ Û¿!U¿!V¿!y¿!¶¿!÷¿!˜¿"¿"+¿"/¿"0¿"â¿"À¿"Ô¿#¿#¿#H¿#°¿#ß¿#÷¿$¿$¿$¿$9¿$í¿$ª¿$¯¿%¿%¿%¿%I¿%j¿%ã¿%°¿%ø¿%√¿%ƒ¿&¿&B¿&_¿&t¿&…¿&Õ¿&Œ¿'¿'K¿'g¿'|¿'†¿'§¿'•¿'‡¿(¿(?¿(j¿(í¿(ó¿(ò¿(Ó¿)¿)Z¿)Ä¿)Å¿)ƒ¿)Ÿ¿)ﬂ¿)‡¿*¿*%¿*+¿*,¿*N¿*n¿*é¿*≈¿*Ò¿+¿+¿+$¿+3¿+S¿+±¿+º¿+ƒ¿+—¿+Ô¿,¿,E¿,V¿,Ø¿,Ó¿-¿-1¿-O¿-g¿-Ä¿-ã¿-î¿-ö¿-û¿-ü¿-ƒ¿-≈¿.¿.E¿.h¿.ø¿.≈¿.∆¿/¿/¿/¿/¿/C¿/v¿/†¿/«¿/¯¿0*¿0Ä¿0Õ¿0Œ¿1¿1Z¿1[¿1•¿1◊¿2¿2(¿2_¿2¿2ú¿2¨¿2√¿2·¿3¿30¿3V¿3®¿3 ¿3˘¿4¿4?¿4L¿4g¿4à¿4∑¿5¿58¿5[¿5k¿5ç¿5‰¿6¿6a¿6r¿6x¿6y¿6í¿6±¿7 ¿7¿7q¿7~¿7Ã¿7“¿8	¿8
¿89¿8O¿8f¿8ì¿8»¿8ı¿9¿9¿9¿9.¿9l¿9å¿9∏¿9ﬁ¿:¿:3¿:V¿:|¿:â¿:∆¿:ı¿;>¿;I¿;i¿;ì¿;∑¿;Ë¿<¿<?¿<e¿<x¿<§¿<Ê¿=¿=¿=?¿=£¿=∞¿=ª¿=ƒ¿= ¿=À¿>"¿>y¿>z¿>ú¿>È¿>˜¿? ¿?G¿?ñ¿?ó¿?≤¿?ƒ¿?ﬁ¿@¿@E¿@Z¿@∂¿@”¿A/¿Aa¿Aâ¿Aó¿A´¿A¨¿A«¿AŸ¿AÛ¿B/¿BZ¿Bo¿BÀ¿BË¿CD¿Cv¿Cû¿C¨¿C¿¿C¡¿Cı¿D?¿DE¿DF¿DÜ¿D√¿Dƒ¿D›¿D˝¿E¿E+¿E[¿Ey¿Eø¿EÁ¿FI¿Ft¿Fá¿Fò¿Fß¿F®¿F«¿FÌ¿G ¿G¿G6¿GW¿Gy¿G´¿G“¿GÒ¿H+¿Ho¿Hù¿H€¿I¿I5¿IN¿Ix¿I°¿J¿J*¿JA¿Jm¿Jû¿J ¿K¿Kv¿Kì¿K·¿L¿L2¿Lx¿Lè¿L§¿L∑¿L»¿L◊¿Lÿ¿L˜¿M¿M0¿MF¿Mf¿Má¿M©¿M€¿N¿N!¿N[¿Nü¿NÕ¿O¿OJ¿Oe¿O~¿O®¿O—¿P4¿PZ¿Pq¿Pù¿PŒ¿P˙¿QD¿Q¶¿Q√¿R¿RI¿Rb¿R®¿Rø¿R‘¿RÁ¿R¯¿S¿S¿S5¿SQ¿Sr¿Sõ¿S‘¿T¿T$¿TK¿TÇ¿T±¿T∏¿Tπ¿TŒ¿TÙ¿U¿Ui¿UÑ¿Uù¿Uº¿U—¿UÙ¿V¿V-¿VC¿Vü¿V ¿W¿W¿W¿W¿W¿Wn¿Wñ¿W⁄¿X¿X5¿XV¿X]¿X∏¿XÙ¿Y¿Y'¿YU¿Y¢¿Y≈¿Z¿Z8¿ZG¿ZH¿Zx¿Zû¿Zü¿ZÔ¿[¿[_¿[É¿[÷¿\¿\¿\N¿\v¿\è¿\∑¿\„¿]¿]X¿]©¿]Õ¿^¿^k¿^z¿^«¿_¿_W¿_p¿_ò¿_ƒ¿_Ë¿`7¿`Ü¿`™¿`ı¿aD¿aL¿aY¿az¿aë¿a∑¿a·¿b¿bS¿b§¿b∆¿c¿cb¿ch¿ci¿cñ¿cµ¿c›¿d8¿dj¿dÆ¿dÏ¿e¿e#¿eg¿eå¿e¶¿e÷¿f¿f¿f,¿fB¿fV¿fn¿fÜ¿f¶¿f∆¿fË¿g¿g ¿g)¿gM¿go¿g¢¿gæ¿g›¿g‰¿gÂ¿h¿h[¿hz¿h√¿h…¿hﬂ¿h„¿hÂ¿hÊ¿i,¿iC¿iG¿iñ¿i€¿j(¿j,¿j@¿jê¿j‹¿k)¿kz¿k¿¿kƒ¿l ¿l$¿l|¿lå¿lê¿l§¿lÍ¿m6¿mz¿m~¿m‰¿mË¿n@¿nP¿nT¿nh¿n∑¿o¿oH¿oL¿oÆ¿o≤¿p
¿p¿p¿p2¿p{¿pÃ¿q¿q¿qq¿qu¿qÕ¿q›¿q·¿qı¿rK¿r¢¿r¶¿s¿s¿s¿s3¿sâ¿s€¿t¿t ¿tÖ¿tï¿tô¿tß¿t´¿tÈ¿u¿uN¿us¿uø¿u›¿uË¿v ¿vH¿vu¿v{¿v»¿w¿wf¿wÖ¿wã¿w…¿wœ¿x¿x2¿xA¿xU¿xe¿xy¿xé¿x´¿xº¿x—¿xÁ¿y ¿y¿y"¿y6¿yR¿yi¿yÑ¿yï¿yº¿y˘¿z5¿z;¿z_¿zÅ¿zë¿z•¿z∫¿z“¿zÚ¿{¿{)¿{;¿{T¿{i¿{â¿{ö¿{Ø¿{≈¿{ﬂ¿{Ù¿|¿|¿|0¿|J¿|j¿||¿|í¿|©¿|∫¿|Œ¿|„¿|¯¿}¿}&¿}C¿}\¿}t¿}Ö¿}û¿}º¿}Ÿ¿}Ô¿}˛¿~.¿~o¿~y¿~à¿~≥¿~Ú¿~¸¿¿=¿Ä¿ä¿ô¿À¿Ä¿Ä¿Ä'¿ÄY¿Äú¿Ä¶¿Äµ¿ÄÂ¿Å&¿Å0¿Å1¿Å}¿ÅÉ¿ÅÕ¿Å”¿Ç!¿ÇG¿ÇM¿Ç|¿Çª¿Çﬂ¿Ç˚¿É¿ÉT¿Éê¿Éñ¿É»¿ÉŸ¿Ñ!¿Ñ]¿Ñc¿Ñó¿Ñ´¿Ñ∫¿Ñ÷¿ÑÌ¿Ö¿Ö¿Ö@¿Ö}¿Öπ¿Öø¿Ö„¿Ü¿Ü¿Ü2¿ÜG¿Ü\¿ÜÄ¿Üô¿ÜØ¿Ü√¿Ü‹¿ÜÒ¿á
¿á$¿áF¿á\¿áv¿áë¿áØ¿áƒ¿á›¿á˜¿à¿à,¿àU¿àp¿àä¿à†¿à∫¿à’¿àÙ¿â¿â/¿âI¿âc¿â~¿âù¿â¬¿âŸ¿âÙ¿ä¿ä+¿äH¿äj¿äà¿ä•¿ä»¿ã4¿ãj¿ã÷¿å¿å1¿å2¿å¿åê¿åñ¿å‡¿ç,¿ç?¿çE¿ç}¿çÉ¿çœ¿é¿éQ¿éw¿é}¿éú¿é≤¿é≥¿é“¿éÿ¿è¿èY¿èÖ¿èü¿è†¿è÷¿è‹¿ê¿êb¿êØ¿ê¸¿ëO¿ëü¿ë∂¿ëÀ¿ë—¿í*¿í|¿íÇ¿íò¿íÈ¿ì9¿ì?¿ìü¿ì±¿ì∑¿ìÛ¿î
¿î¿î?¿îE¿î{¿îÅ¿îŒ¿ï
¿ï%¿ï&¿ïd¿ï¥¿ïŒ¿ï‘¿ñ¿ñ_¿ñã¿ñë¿ñ‰¿ó+¿ó1¿ó~¿ó©¿óØ¿óÓ¿ò4¿òu¿ò{¿òë¿òﬁ¿ô¿ô¿ô\¿ô®¿ôª¿ô¡¿ö-¿ö?¿öT¿ös¿öt¿ö∫¿õ¿õ?¿õE¿õí¿õº¿õ¬¿ú¿úU¿úÅ¿úá¿ú∞¿ú∂¿úı¿ù;¿ù|¿ùÇ¿ùŸ¿ùÛ¿ù˘¿û¿û\¿ûÉ¿ûâ¿ûÃ¿ü¿üA¿üG¿üº¿üŒ¿ü„¿†
¿†¿†P¿†V¿†®¿†˙¿°*¿°0¿°F¿°ò¿°„¿°È¿¢J¿¢\¿¢b¿¢†¿¢∏¿¢π¿£	¿£.¿£4¿£Ç¿£Õ¿§ ¿§¿§Z¿§`¿§û¿§∫¿§ª¿§Ë¿§Ó¿•5¿•z¿•¶¿•∆¿•«¿¶¿¶¿¶Z¿¶†¿¶¿ßA¿ßw¿ß}¿ßÃ¿®¿®O¿®U¿®ó¿®Œ¿®‘¿®‰¿®Í¿©,¿©I¿©J¿©â¿©è¿©‡¿™.¿™}¿™£¿™Ω¿™æ¿™Ú¿™¯¿´:¿´P¿´Q¿´|¿´Ç¿´«¿¨¿¨8¿¨>¿¨á¿¨‘¿≠¿≠¿≠a¿≠å¿≠™¿≠´¿≠⁄¿≠‡¿Æ)¿ÆT¿Æ~¿Æ¿Æº¿Æ¬¿Ø¿Ø¿ØI¿Øû¿Ø„¿Ø˛¿Øˇ¿∞E¿∞K¿∞è¿∞⁄¿∞˛¿∞ˇ¿±P¿±õ¿±°¿±È¿≤¿≤%¿≤=¿≤L¿≤q¿≤¨¿≤Ê¿≤Í¿≥¿≥¿≥[¿≥§¿≥™¿≥Ú¿¥(¿¥.¿¥F¿¥e¿¥f¿¥∫¿¥¿¿µ¿µ¿µ[¿µr¿µs¿µº¿µ¬¿∂¿∂!¿∂'¿∂q¿∂ß¿∂≠¿∂˙¿∑ ¿∑<¿∑W¿∑X¿∑ñ¿∑“¿∑ÿ¿∏%¿∏P¿∏V¿∏ó¿∏ﬂ¿π.¿πw¿πÖ¿πö¿ππ¿π∫¿π¯¿π˛¿∫K¿∫ë¿∫·¿ª2¿ªh¿ªn¿ªª¿º	¿º=¿ºC¿ºÖ¿ºª¿º¡¿º—¿º◊¿Ω¿Ω7¿Ω8¿ΩÅ¿Ωπ¿Ωø¿æ¿æ_¿æã¿æë¿æ‚¿ø¿ø¿ø`¿øÖ¿øö¿ø†¿øÍ¿ø¿¿ ¿¿¿¿S¿¿q¿¿ß¿¿®¿¿Ú¿¡2¿¡8¿¡á¿¡—¿¬¿¬0¿¬6¿¬á¿¬ü¿¬¥¿¬∫¿√¿√¿√¿√!¿√r¿√É¿√ª¿√º¿ƒ¿ƒ%¿ƒ+¿ƒD¿ƒ[¿ƒ\¿ƒî¿ƒö¿ƒ‡¿ƒÊ¿≈3¿≈C¿≈I¿≈î¿≈ö¿≈«¿≈Õ¿∆¿∆j¿∆π¿∆ø¿«¿«^¿«®¿«Æ¿«˘¿»;¿»Ñ¿»ä¿»∑¿»Ω¿…¿…Z¿…´¿…±¿ ¿ P¿ ú¿ ¢¿ Ì¿À0¿Ày¿À•¿À¶¿ÀË¿ÀÓ¿Ã<¿Ãb¿Ãh¿Ã∑¿Ã“¿Ã”¿Õ¿Õk¿Õq¿Õ¬¿Œ¿Œ!¿Œ'¿Œu¿Œø¿œ¿œ^¿œ©¿œº¿œ¬¿œ–¿œÎ¿–+¿–e¿–m¿–w¿–}¿–√¿–…¿—%¿—;¿—A¿—W¿—∞¿—‡¿—Ê¿“L¿“^¿“d¿“t¿“z¿“√¿”¿”A¿”Ñ¿”—¿‘¿‘¿‘¿‘J¿‘P¿‘†¿‘¶¿‘ı¿’@¿’ã¿’◊¿÷¿÷¿÷4¿÷Ç¿÷—¿÷◊¿◊¿◊C¿◊I¿◊î¿◊†¿◊¶¿ÿ¿ÿ*¿ÿY¿ÿZ¿ÿó¿ÿù¿ÿÈ¿Ÿ7¿ŸÇ¿Ÿí¿Ÿò¿Ÿ÷¿Ÿ‹¿⁄&¿⁄,¿⁄<¿⁄B¿⁄~¿⁄ñ¿⁄ó¿⁄Ÿ¿⁄ﬂ¿€0¿€s¿€y¿€»¿‹¿‹¿‹Z¿‹`¿‹p¿‹v¿‹∂¿‹“¿‹”¿› ¿›¿›M¿›í¿›æ¿›ƒ¿›¿›ˆ¿ﬁ¿ﬁ¿ﬁM¿ﬁm¿ﬁn¿ﬁï¿ﬁõ¿ﬁπ¿ﬁø¿ﬂ¿ﬂF¿ﬂr¿ﬂí¿ﬂì¿ﬂ‹¿‡)¿‡/¿‡Ä¿‡Ã¿‡ﬂ¿‡Â¿·3¿·}¿·Ã¿‚¿‚f¿‚}¿‚É¿‚ë¿‚¨¿‚Í¿„#¿„+¿„5¿„;¿„á¿„À¿‰	¿‰/¿‰5¿‰ë¿‰ß¿‰≠¿‰√¿Â¿ÂL¿ÂR¿Â∏¿Â ¿Â–¿Â‡¿ÂÊ¿Ê/¿Êx¿Ê≠¿ÊÔ¿Á<¿Ám¿Áâ¿Áä¿Á∆¿ÁÃ¿Ë¿Ëm¿Ëπ¿Ëø¿Ë˝¿È¿ÈN¿ÈT¿Èd¿Èj¿È•¿ÈΩ¿Èæ¿Èˇ¿Í¿ÍV¿Íô¿Íü¿ÍÓ¿Î,¿Î2¿ÎÅ¿Îá¿Îó¿Îù¿Î‹¿Î¯¿Î˘¿Ï&¿Ï,¿Ïx¿Ïø¿Ï‰¿ÏÍ¿Ì¿Ì¿Ì,¿Ì2¿Ìr¿Ìí¿Ìì¿ÌΩ¿Ì√¿Ì·¿ÌÁ¿Ó.¿Ón¿Óö¿Ó∫¿Óª¿ÓÊ¿ÓÏ¿Ô<¿ÔB¿Ôë¿Ô‹¿'¿s¿¥¿∫¿Ò¿Ò¿Ò¿Ò/¿Ò}¿ÒÃ¿Ò“¿Ú¿Ú>¿ÚD¿Úè¿Úõ¿Ú°¿Û¿Û%¿ÛT¿ÛU¿Ûó¿Ûù¿ÛÍ¿Ûˆ¿Û¸¿ÙK¿ÙQ¿Ùû¿ÙÀ¿ÙË¿ÙÈ¿ı7¿ıÄ¿ıè¿ı®¿ı©¿ı◊¿ı›¿ˆ%¿ˆj¿ˆñ¿ˆú¿ˆ ¿ˆÎ¿ˆÏ¿˜1¿˜7¿˜à¿˜©¿˜Ø¿¯ ¿¯¿¯O¿¯†¿¯¿˘=¿˘R¿˘X¿˘Å¿˘ó¿˘ò¿˘◊¿˘›¿˙.¿˙O¿˙U¿˙é¿˙∂¿˙º¿˚¿˚¿˚¿˚m¿˚s¿˚≠¿˚÷¿˚‹¿¸*¿¸r¿¸∂¿¸¿¸ˆ¿˝<¿˝W¿˝X¿˝£¿˝À¿˝—¿˛¿˛E¿˛K¿˛ö¿˛Õ¿˛”¿ˇ¿ˇ¿ˇb¿ˇ}¿ˇ~¿ˇ–¿ˇÎ¿ˇÒ¿ ¿ ¿ Z¿ r¿ Œ¿!¿v¿∂¿˛¿A¿{¿«¿˘¿J¿Ä¿Õ¿ˇ¿J¿|¿û¿ü¿Ó¿¿¿¿"¿u¿ç¿È¿<¿ë¿—¿¿\¿ñ¿·¿¿h¿û¿Î¿	¿	h¿	ö¿	æ¿	ø¿

¿
"¿
(¿
8¿
>¿
ë¿
©¿¿X¿≠¿Ì¿5¿x¿≤¿˝¿3¿¿±¿˛¿0¿{¿≠¿÷¿◊¿$¿<¿B¿R¿X¿∞¿¿_¿¥¿Ù¿<¿¿π¿¿:¿Ü¿∏¿	¿?¿ä¿º¿·¿‚¿.¿F¿L¿\¿b¿∫¿¿i¿æ¿˛¿F¿â¿√¿¿D¿ê¿¬¿¿I¿ñ¿»¿Ï¿Ì¿6¿<¿í¿±¿“¿¿¿0¿6¿ä¿€¿-¿{¿Ÿ¿ﬂ¿+¿o¿Ø¿Ù¿¿¿l¿â¿è¿€¿-¿x¿ª¿˘¿3¿9¿Ä¿À¿—¿·¿Á¿ !¿ g¿ õ¿ „¿!&¿!C¿!D¿!π¿!ø¿!Á¿!˝¿!˛¿",¿"2¿"J¿"P¿"ö¿"ø¿"¿¿#¿#[¿#§¿#™¿#√¿#Â¿#Ê¿$(¿$.¿$|¿$»¿%¿%Z¿%g¿%m¿%∞¿%Ô¿&3¿&^¿&É¿&Ñ¿&—¿&Í¿'¿'¿'/¿'B¿'Y¿'t¿'ó¿'´¿'√¿'ﬂ¿'¯¿(¿( ¿(:¿(`¿(Ä¿(ó¿(µ¿(—¿(‰¿(˚¿)¿).¿)`¿)î¿)´¿)æ¿)Ê¿)˛¿*¿**¿*U¿*q¿*ç¿*•¿*π¿*—¿*Ì¿+	¿+4¿+I¿+b¿+¿+ë¿+ß¿+æ¿+’¿+Û¿,¿,8¿,Y¿,y¿,í¿,•¿,∆¿,‰¿-¿-¿-(¿-G¿-u¿-ó¿-≈¿-ˆ¿.?¿.d¿.ï¿.…¿/¿/1¿/P¿/~¿/ƒ¿/˚¿0>¿0á¿0 ¿0Ï¿1¿1K¿1Ö¿1◊¿2,¿2`¿2à¿2≈¿2ˆ¿3¿3L¿3Ä¿3¿¿4¿4C¿4h¿4ô¿4Õ¿5¿5_¿5á¿5ª¿5Ú¿6¿6E¿6v¿6ß¿6€¿7¿7^¿7õ¿7’¿7˙¿8"¿8n¿8∑¿8Î¿8Ú¿8ˆ¿8˜¿9C¿9á¿9ç¿9ÿ¿:¿:F¿:[¿:ç¿:◊¿;¿;J¿;y¿;Ω¿;Ô¿<*¿<}¿<”¿<¸¿=:¿=o¿=û¿=”¿>¿>g¿>ú¿>›¿?0¿?h¿?é¿?Ω¿?Ô¿@!¿@V¿@ë¿@€¿A¿AT¿Az¿Aƒ¿A˘¿B ¿B¿B¿B¿B4¿BV¿Bi¿Bo¿Bõ¿BØ¿Bµ¿B‹¿B˙¿C"¿CB¿Cj¿Cî¿CŒ¿C¿D¿DF¿Dx¿Dû¿Dº¿D‰¿E¿EJ¿EÄ¿E∫¿E¿F¿F8¿Fb¿Fí¿F“¿G¿G8¿Gj¿Gñ¿G¿¿GÙ¿H¿H@¿Hl¿H¨¿H÷¿I
¿I,¿IV¿IÇ¿I¬¿IÊ¿J¿J@¿Jb¿Jä¿J¥¿Jﬁ¿K
¿K:¿Kt¿K¶¿K÷¿K¯¿L¿LX¿Lí¿Lº¿L¿¿L¡¿LÕ¿L‚¿M¿M¿M+¿M8¿MI¿Mc¿Mu¿MÉ¿Mï¿M®¿Mæ¿MŒ¿M⁄¿MÎ¿N¿N¿N0¿NJ¿Nb¿No¿NÄ¿Ní¿Nß¿Nƒ¿N‚¿NÒ¿O¿O¿O(¿O9¿OK¿O]¿Oo¿OÜ¿Oî¿O¶¿Oπ¿O÷¿OË¿Oˇ¿P¿P¿P2¿PO¿P^¿Pq¿PÖ¿Pò¿P≠¿P«¿P›¿PÚ¿Q ¿Q¿Q*¿QD¿QW¿Q^¿QÅ¿QÖ¿QÜ¿Qí¿Q®¿Q◊¿Q˛¿R4¿R^¿Rñ¿RÈ¿S¿SS¿Sö¿Sœ¿Sˆ¿T7¿TÑ¿T¿¿T¯¿U$¿U\¿Uó¿U€¿V5¿Ví¿V√¿W¿WE¿W~¿W∆¿WÛ¿X,¿Xh¿X¬¿X˚¿YC¿Yp¿Y©¿YÂ¿Z?¿Zo¿Z´¿ZÍ¿[¿[K¿[Ñ¿[Ω¿[˘¿\;¿\å¿\—¿]¿]@¿]f¿]∫¿^¿^G¿^N¿^á¿^ã¿^ç¿^é¿^«¿^À¿_¿_b¿_Æ¿_æ¿_¬¿`¿`D¿`O¿`Ä¿`¿¿`Û¿a¿a'¿aD¿aZ¿as¿aá¿a¢¿a∑¿aœ¿b¿bL¿bf¿b¿bù¿b±¿b«¿b·¿c¿c¿c1¿cQ¿ch¿cÅ¿cï¿cµ¿cÕ¿c‚¿c˜¿d¿d%¿dB¿d[¿ds¿dÑ¿d©¿dø¿d≈¿d∆¿e¿e ¿e!¿ed¿eã¿eå¿e≈¿eÀ¿f¿fW¿fÉ¿f£¿f§¿fÛ¿f˘¿gH¿gà¿gé¿g–¿h¿h¿h¿h#¿hu¿hí¿hì¿hŒ¿h‘¿i¿i^¿iä¿iê¿iÕ¿j¿jm¿j{¿jÅ¿jŒ¿j˘¿k¿k¿kn¿kí¿kì¿kŒ¿kÌ¿kÓ¿l<¿lB¿lì¿l–¿l÷¿m¿mN¿mT¿md¿mj¿mæ¿m⁄¿m€¿n!¿n'¿nW¿nå¿nç¿n‘¿n⁄¿o¿oC¿oD¿oí¿oÆ¿o¥¿oÕ¿o„¿o‰¿p¿p"¿pb¿p®¿pÌ¿q-¿qr¿qó¿qù¿qÍ¿r,¿rE¿rq¿rr¿r¥¿r∫¿s ¿sA¿s[¿s\¿sì¿sô¿s⁄¿t¿tF¿tL¿tÇ¿tú¿tù¿t⁄¿t‡¿u'¿ul¿uò¿uû¿u ¿uÍ¿uÎ¿v(¿v.¿vu¿vµ¿v·¿vÁ¿w¿w=¿w>¿wà¿wé¿w–¿wÙ¿w˙¿xI¿xî¿xﬂ¿y+¿yl¿yr¿yΩ¿y…¿y¯¿y˘¿z6¿z<¿zÉ¿z√¿zÔ¿zı¿{!¿{A¿{B¿{¿{Ö¿{Ã¿|¿|8¿|>¿|t¿|î¿|ï¿|ﬂ¿|Â¿}'¿}K¿}Q¿}†¿}Î¿~6¿~Ç¿~√¿~…¿¿ ¿O¿P¿é¿î¿‹¿Ä!¿ÄM¿ÄS¿ÄÅ¿Ä¢¿Ä£¿ÄË¿ÄÓ¿Å'¿ÅE¿ÅK¿Åë¿Å“¿Å¸¿Ç¿Ç+¿Ç@¿ÇA¿Çè¿Çï¿Ç’¿Ç€¿É!¿Éb¿Éå¿É¶¿Éß¿ÉÒ¿Ñ¿Ñ¿Ña¿Ñå¿Ñç¿Ñ›¿Ö¿Ö¿ÖX¿Ö^¿Ö§¿ÖÂ¿Ü¿Ü*¿Ü+¿Üs¿ÜÆ¿Ü¥¿Ü˜¿Ü˝¿áC¿áÑ¿áÆ¿á¥¿à¿à¿à ¿àr¿àç¿àì¿à£¿à©¿à¸¿â¿âp¿â√¿ä¿äX¿ä†¿ä„¿ã¿ãi¿ãõ¿ãÏ¿å"¿åo¿å°¿åÏ¿ç¿ç@¿çA¿çê¿ç®¿çÆ¿çæ¿çƒ¿é¿é/¿éã¿éﬁ¿è3¿ès¿èª¿è˛¿ê8¿êÉ¿êπ¿ë
¿ë@¿ëç¿ëø¿í
¿í<¿í`¿ía¿í¨¿íƒ¿í ¿í⁄¿í‡¿ì3¿ìK¿ìß¿ì˙¿îO¿îè¿î◊¿ï¿ïT¿ïü¿ï’¿ñ!¿ñS¿ñ†¿ñ“¿ó¿óO¿óx¿óy¿ó∆¿óﬁ¿ó‰¿óÙ¿ó˙¿òR¿òÆ¿ô¿ôV¿ôñ¿ôﬁ¿ö!¿ö[¿ö¶¿ö‹¿õ(¿õZ¿õ´¿õ·¿ú,¿ú^¿úÉ¿úÑ¿ú–¿úË¿úÓ¿ú˛¿ù¿ù\¿ù∏¿û¿û`¿û†¿ûË¿ü+¿üe¿ü∞¿üÊ¿†2¿†d¿†µ¿†Î¿°8¿°j¿°é¿°è¿°ÿ¿°ﬁ¿¢¿¢m¿¢ø¿¢≈¿£¿£U¿£ï¿£⁄¿£ˇ¿§¿§R¿§o¿§u¿§¡¿•¿•^¿•°¿•ﬂ¿¶¿¶¿¶f¿¶±¿¶∑¿¶«¿¶Õ¿ß¿ßM¿ßÅ¿ß…¿®¿®)¿®*¿®u¿®≈¿©¿©/¿©0¿©r¿©x¿©∆¿™¿™Y¿™§¿™±¿™∑¿™¸¿´'¿´-¿´=¿´C¿´ë¿´´¿´–¿´—¿¨!¿¨3¿¨U¿¨p¿¨ì¿¨Ø¿¨»¿¨‚¿≠¿≠¿≠5¿≠g¿≠õ¿≠Æ¿≠÷¿≠Ì¿Æ¿Æ¿Æ;¿Æf¿ÆÇ¿Æû¿Æ…¿ÆÊ¿Æ¯¿Ø¿Ø5¿ØT¿Øk¿ØÇ¿Ø†¿Ø¿¿ØÂ¿∞¿∞&¿∞?¿∞]¿∞~¿∞Ö¿∞¶¿∞◊¿± ¿±T¿±ë¿±ø¿≤¿≤3¿≤m¿≤ø¿≥¿≥<¿≥y¿≥ß¿≥€¿¥¿¥O¿¥°¿¥’¿µ¿µg¿µû¿µ√¿µÒ¿∂C¿∂}¿∂Æ¿∂ﬂ¿∑¿∑M¿∑ñ¿∑”¿∏¿∏2¿∏{¿∏Ø¿∏∂¿∏∫¿∏ª¿π
¿πZ¿π~¿πÑ¿π‹¿∫5¿∫;¿∫è¿∫ﬂ¿ª*¿ªR¿ªe¿ªk¿ªÄ¿ª¡¿º¿º^¿º´¿ºÈ¿Ω<¿Ω}¿Ω«¿æ¿æR¿æñ¿æÊ¿øH¿øå¿ø‹¿¿>¿¿Ö¿¿√¿¡%¿¡o¿¡∞¿¡Ò¿¬5¿¬¿¬ÿ¿√%¿√o¿√§¿√Ë¿√Ô¿√Û¿√Ù¿ƒ ¿ƒ#¿ƒ3¿ƒK¿ƒ\¿ƒp¿ƒ¿ƒè¿ƒ¢¿ƒΩ¿ƒŸ¿ƒÊ¿ƒ˙¿≈¿≈¿≈+¿≈@¿≈[¿≈l¿≈Å¿≈ú¿≈≠¿≈¡¿≈œ¿≈‡¿≈˝¿∆¿∆$¿∆6¿∆I¿∆^¿∆x¿∆é¿∆£¿∆±¿∆À¿∆ﬁ¿∆ˆ¿∆˝¿«¿«¿«¿«2¿«T¿«g¿«m¿«ô¿«≠¿«≥¿«ﬂ¿»	¿»C¿»o¿»°¿»…¿»ˇ¿…)¿…Y¿…}¿…Ø¿…€¿ ¿ /¿ c¿ £¿ œ¿À¿ÀC¿Àq¿À±¿ÀÛ¿Ã¿Ã=¿Ã}¿Ã≠¿Ã◊¿Õ¿Õ-¿Õ]¿Õó¿Õ…¿Õ˘¿Œ¿ŒU¿ŒÅ¿Œ±¿Œµ¿Œ∂¿Œ¬¿œ¿œ2¿œx¿œå¿œ≤¿œ»¿œ‹¿–¿–¿–¿–/¿–U¿–s¿–è¿–∆¿–œ¿–÷¿–Í¿—¿—'¿—<¿—l¿—u¿—|¿—ê¿—¿—˜¿“¿“o¿“v¿“ä¿“Ø¿“À¿“Â¿”¿”#¿”*¿”>¿”d¿”z¿”é¿”Ω¿”∆¿”Õ¿”·¿‘>¿‘E¿‘Y¿‘ã¿‘¨¿‘À¿’¿’¿’¿’)¿’\¿’~¿’û¿’Ÿ¿’‚¿’È¿’˝¿÷V¿÷]¿÷q¿÷†¿÷∫¿÷“¿◊¿◊¿◊¿◊)¿◊é¿◊ï¿◊©¿ÿ	¿ÿ¿ÿ$¿ÿF¿ÿa¿ÿz¿ÿÆ¿ÿ∑¿ÿæ¿ÿ“¿ÿ˝¿Ÿ¿Ÿ=¿Ÿw¿ŸÄ¿Ÿá¿Ÿõ¿Ÿ¡¿Ÿÿ¿ŸÌ¿⁄¿⁄&¿⁄-¿⁄A¿⁄c¿⁄~¿⁄ó¿⁄À¿⁄‘¿⁄€¿⁄Ô¿€¿€;¿€Z¿€î¿€ù¿€§¿€∏¿€ﬁ¿€ı¿‹
¿‹:¿‹C¿‹J¿‹^¿‹Ñ¿‹ú¿‹≤¿‹„¿‹Ï¿‹Û¿›W¿›∏¿›Ã¿›Û¿ﬁ¿ﬁ3¿ﬁm¿ﬁv¿ﬁ}¿ﬁë¿ﬁ∏¿ﬁ—¿ﬁË¿ﬂ¿ﬂ#¿ﬂ*¿ﬂé¿ﬂÚ¿‡¿‡.¿‡E¿‡Z¿‡ä¿‡ì¿‡ö¿‡Æ¿‡÷¿‡Ô¿·¿·=¿·F¿·M¿·a¿·â¿·ß¿·√¿·˙¿‚¿‚
¿‚¿‚F¿‚`¿‚x¿‚´¿‚¥¿‚ª¿‚œ¿‚˜¿„¿„'¿„Y¿„b¿„i¿„}¿„⁄¿„·¿„ı¿‰¿‰4¿‰P¿‰á¿‰ê¿‰ó¿‰´¿‰÷¿‰Ì¿Â¿Â2¿Â;¿ÂB¿ÂF¿ÂH¿ÂI¿Âà¿Â√¿Âƒ¿Â‚¿Â„¿ÂÔ¿ÊN¿ÊÅ¿Ê¡¿Ê«¿Á¿Á¿Á¿Á¿Át¿Áß¿ÁÁ¿ÁÌ¿Ë'¿Ë-¿Ë.¿Ë:¿Ëa¿Ë®¿Ëﬂ¿È#¿È-¿Èa¿È©¿È≥¿ÈÈ¿Í3¿Í=¿Í{¿ÍÖ¿ÍÜ¿Íí¿ÍÛ¿Î&¿ÎY¿Î™¿Î∞¿Î±¿Ï¿Ï¿Ï¿Ï¿Ït¿Ïß¿Ï⁄¿Ì+¿Ì1¿Ìâ¿Ìè¿Ìê¿Ìú¿ÌÛ¿ÓP¿Óó¿Óﬂ¿Ô'¿Ôp¿Ôw¿Ô}¿Ô~¿Ôä¿Ô·¿?¿m¿s¿•¿Ÿ¿ﬂ¿Ò¿Ò:¿Òd¿Òk¿Òq¿Òr¿Ò~¿Ò€¿Ú9¿Úg¿Úm¿Úü¿Ú”¿ÚŸ¿Û¿Û4¿Û^¿Ûe¿Ûk¿Ûl¿Ûx¿Û’¿Ù3¿Ùa¿Ùg¿Ùó¿Ù…¿Ùœ¿ı¿ı5¿ı;¿ım¿ıñ¿ı¿¿ı«¿ıÕ¿ıœ¿ı–¿ˆ¿ˆ¿ˆI¿ˆç¿ˆµ¿ˆË¿ˆÈ¿ˆ¸¿˜;¿˜f¿˜u¿˜v¿˜î¿˜ï¿˜◊¿¯¿¯¿¯k¿¯¿¿˘¿˘o¿˘«¿˘˘¿˙O¿˙É¿˙º¿˙Ω¿˙…¿˚(¿˚[¿˚ü¿˚•¿˚‹¿˚‚¿˚„¿˚Ô¿¸F¿¸y¿¸´¿¸±¿¸›¿¸„¿¸‰¿¸¿˝]¿˝ê¿˝’¿˝€¿˛¿˛?¿˛|¿˛Ñ¿˛∏¿˛Ù¿˛¸¿ˇ+¿ˇ1¿ˇc¿ˇ†¿ˇ¶¿ˇÿ¿ ¿ ¿ I¿ Q¿ R¿ ^¿ √¿ ˆ¿;¿A¿q¿•¿‚¿Í¿¿Z¿b¿ë¿ó¿…¿¿¿>¿q¿w¿¶¿¨¿≠¿π¿Ì¿Ó¿˙¿W¿ä¿º¿¬¿Á¿Ì¿Ó¿˙¿W¿ä¿º¿¬¿Ú¿&¿O¿W¿s¿y¿û¿§¿•¿±¿¿\¿è¿‹¿‚¿¿F¿¿á¿ª¿ˇ¿	¿	>¿	D¿	v¿	Ø¿	µ¿	Á¿
)¿
/¿
o¿
u¿
v¿
Ç¿
Í¿5¿h¿µ¿ª¿Î¿¿X¿`¿î¿ÿ¿‡¿¿¿O¿à¿é¿¿¿¿¿H¿N¿O¿[¿º¿¿:¿á¿ç¿Õ¿”¿‘¿‡¿@¿ã¿¿¿∆¿»¿⁄¿€¿   Äª/// @docImport 'package:flutter/widgets.dart';
///
/// @docImport 'dropdown.dart';
/// @docImport 'ink_well.dart';
/// @docImport 'text_field.dart';
/// @docImport 'text_form_field.dart';ÅkÅÇÅÅ Åá  ÅòÅßÅ™   Å‘   Å˝   Ç%   ÇA   Ç]   Çs   Çå   Ç≠   Ç…   Ç·   Çˇ   É   É.     á&É«á,á,   áWá_á_  á˙àà àáiáuáu    áànáåáå  áíáõáö   ààà    à2pà6à6  à=àEàD   äÄúäàäà   ääà¶Åiâ!â!  â$â,â+  à¶àßä≥8ä∆ä∆   ä≥ä¥ ã Ä√ã&ã&  ãW,ãW ãWãh  ãjãqãp  ãw	ã~ã}     ãáZãüãü  ã§ã¨ã´  ãáãà å6áFå<å<  åjÅMåj åjå}  	åÑåôåò  å•å¥å≥  å»å◊å÷  å‚åÒå  ççç  çç(ç'  ç:çIçH  çWçfçe  çyçàçá  çüç§çµç¨ç•çÆçª'ç”ç”  çÊç˛ç˛  é$é é   é0éFéF  éM!éaéa  éré~é~  éã éúéú  éØ&é«é«  é⁄aé‰é‰    è?ÇñèPèP  èVè^è]  èe	èkèj  è?è@ëŸÅeëÍëÍ  ë¯íí  ëŸë⁄ìB8ìUìU   ìBìC î~Å˘îÑîÑ  î∞Ä»î∂ î∂î∆  îÕî‹î€  îÁîˆîı  î˛ïï  ïï-ï,  ï;ïJïI  ïYïhïg   ï|ïéïé  ïòïÆïÆ  ïµ$ïÕïÕ  ï›ïÈïÈ  ïˆññ  ñññ   ñ*KñLñL   ñ*ñ+ ñyâﬂññ   ñ◊BñÌñÌ ñˇóóóóóó$ó7ó7  óF.ó_ó_  óx%óçóç  ó°ó∏ó∏  ó√$óÿóÿ  óÎ ó˚ó˚   òÇªò!ò!   òòöœÄ¥ö‡ö‡   öœö–õáÇ~õòõò  õ®õ∫õπ  õáõàû	ÇMûû  û"û0û/  û	û
 °ÇH°°  °;Ä‘°A °A°M  	°T°Z°Y  °h°n°m  °y°°~  °é°î°ì  °§°™°©  °Ω
°√°¬  °Õ°”°“  °·°Á°Ê  °ˆ°¸°˚   	¢¢$¢$  ¢1¢?¢?  ¢I¢W¢W  ¢e¢v¢v  ¢Ö¢ê¢ê  ¢¢¢∞¢∞  ¢π¢«¢«  ¢‘¢Â¢Â  ¢Û¢˛¢˛   £C£.£.   ££ £WëÛ£]£]   §4-§H§H §P§X§Y§_§`§f$§§  §é§ñ§ñ  §°§©§©  §¥J§Ω§Ω    •G•
•
    •LÅN•]•]   •L•M¶ûP¶Ø¶Ø   ¶û¶ü¶Úb¶˜¶˜    ßXÑßißi  ßyßáßÜ  ßXßY¨LÇ!¨S¨S    ÆqÇ…ÆxÆx    ±>Ñ
±Q±Q  ±W±e±d  ±>±? ∑äÜ:∏˚∏˚Å_/// Defines **where** the floating label should be displayed within an
/// [InputDecorator].
///
/// See also:
///
///  * [InputDecoration.floatingLabelAlignment] which defines the alignment for
///    [InputDecoration.label] or [InputDecoration.labelText].
///  * [FloatingLabelBehavior] which defines **how** the floating label should
///    behave. πJππ2π3π4π3 π5π;π:  π@πFπ^πRπJπGπMπNπXπUπ[π†π≠π≠  π¥Å9∫«∫«Ä‰/// Align the floating label on the leading edge of the [InputDecorator].
///
/// For left-to-right text ([TextDirection.ltr]), this is the left edge.
///
/// For right-to-left text ([TextDirection.rtl]), this is the right edge.∫œ∫Â∫Ê∫Á∫Ï∫Ë∫È∫ÚÄêª\ª\C/// Aligns the floating label to the center of an [InputDecorator].ªeª{ª|ª}ªÅª~ªá,ªõªõ   ªáªàª∑ÄÔª—ª—  ª‘ª‹ª€  ª∑ª∏º™Ä‰º∏º∏  º√ºÀº    Ωí0Ω•Ω•   ΩíΩì∏Í∏ÎæŒãñæﬂæﬂ  æÔÇræı æıø   øøø  ø)ø8ø7  øH!øWøV  øo#ø~ø}  øò$øßø¶  ø¬ø—ø–  ø‹øÎøÍ  ø˘ ¿ @¿ @  ¿ @¿ @.¿ @-  ¿ @:¿ @I¿ @H  ¿ @U¿ @d¿ @c  ¿ @v¿ @Ö¿ @Ñ  ¿ @ö	¿ @†¿ @ü  ¿ @©
¿ @Ø¿ @Æ  ¿ @π
¿ @ø¿ @æ  ¿ @…	¿ @œ¿ @Œ  ¿ @ÿ¿ @ﬁ¿ @›  ¿ @È¿ @Ô¿ @Ó  ¿ @˙¿ A ¿ @ˇ  ¿ A¿ A¿ A  ¿ A$¿ A*¿ A)  ¿ A:¿ A@¿ A?  ¿ AL¿ AR¿ AQ   ¿ Ae*¿ AÅ¿ AÅ  ¿ Aì¿ Aû¿ Aû  ¿ A≠ ¿ A∫¿ A∫  ¿ A—"¿ Aﬁ¿ Aﬁ  ¿ A˜3¿ B¿ B  ¿ B.¿ B@¿ B@  ¿ BJ¿ B`¿ B`  ¿ Bm¿ Bx¿ Bx  ¿ Bé¿ Bö¿ Bö  ¿ B•¿ B∞¿ B∞  ¿ Bª!¿ Bœ¿ Bœ  ¿ B‡¿ BÎ¿ BÎ  ¿ Bˇ¿ C¿ C  ¿ C¿ C#¿ C#  ¿ C,¿ C:¿ C:  ¿ CC¿ CQ¿ CQ  ¿ CY¿ Cg¿ Cg  ¿ Cq¿ C¿ C  ¿ Câ¿ Có¿ Có  ¿ C•¿ C≥¿ C≥  ¿ C¡¿ Cœ¿ Cœ  ¿ Cﬁ¿ CÏ¿ CÏ  ¿ C˜¿ D¿ D  ¿ H√Åü¿ H◊¿ H◊   ¿ H√¿ Hƒ¿ DÑ¨¿ D-¿ D-  ¿ D0¿ D8¿ D7  ¿ D¿ DæŒæœ¿ K2Å|¿ K8¿ K8  ¿ KTÄø¿ KZ ¿ KZ¿ Kq  ¿ Kx¿ Ká¿ KÜ  ¿ Kú¿ K´¿ K™  ¿ K∏¿ K«¿ K∆  ¿ K€¿ KÍ¿ KÈ  ¿ K˙¿ L	¿ L   ¿ L%¿ L,¿ L,  ¿ L@¿ LM¿ LM  ¿ LY¿ Lf¿ Lf  ¿ Ly¿ Lç¿ Lç  ¿ Lú¿ Lß¿ Lß     ¿ Lˆ¿ ê>¿ L¸¿ L¸  ¿ MkÅ˛¿ Mk ¿ Mk¿ M|  ¿ MÉ¿ Mô¿ Mò  ¿ M®$¿ M¿¿ Mø  ¿ M“"¿ MÈ¿ MË  ¿ M˙¿ N	¿ N  ¿ N¿ N&¿ N%  ¿ N2¿ NA¿ N@  ¿ NO$¿ Nc¿ Nb  ¿ Nà¿ N|¿ Nä¿ N¨¿ Nù¿ NÆ¿ N“¿ Nƒ¿ N‘¿ N¸¿ NÈ¿ N˛¿ O#¿ O¿ O%¿ O@¿ O7¿ OB¿ O]¿ OR¿ O_¿ V	¿ V¿ V  ¿ VË¿ Vˆ¿ Vˆ  ¿ W‘¿ W·¿ W·  ¿ Yg%¿ Yz¿ Yz  ¿ [&¿ [+¿ [+  ¿ [Á¿ [Ï¿ [Ï ¿ [˜¿ \£¿ \®¿ \® ¿ \µ¿ ß^¿ ßg¿ ßg  !¿ OÎ/¿ Oˆ¿ Oˆ    ¿ P5¿ P(¿ P(    ¿ PU5¿ P`¿ P`    ¿ Pé:¿ Pù¿ Pù    ¿ PÀ<¿ P⁄¿ P⁄    ¿ Q
<¿ Q¿ Q    ¿ QI:¿ QX¿ QX    ¿ QÜ>¿ Qï¿ Qï    ¿ Q«>¿ Q÷¿ Q÷    ¿ RF¿ R¿ R    ¿ RQF¿ R`¿ R`    ¿ RöH¿ R®¿ R®    ¿ RÂ@¿ RÙ¿ RÙ    ¿ S(D¿ S7¿ S7    ¿ S£Ç5¿ S«¿ S«   ¿ S£¿ S§¿ U‹*¿ UÏ¿ UÏ    ¿ V$Äã¿ V(¿ V(  ¿ V3¿ V@¿ V?   ¿ V≥2¿ V≈¿ V≈    ¿ WÄñ¿ W¿ W  ¿ W¿ W)¿ W(   ¿ W¢/¿ W≥¿ W≥    ¿ WÚÄí¿ Wˆ¿ Wˆ  ¿ X¿ X¿ X   ¿ Xà~¿ Xû¿ Xû    ¿ Y	[¿ Y¿ Y    ¿ YêÅn¿ Yî¿ Yî  ¿ Y¶¿ Y∫¿ Yπ   ¿ [!¿ [¿ [    ¿ [9Ää¿ [=¿ [=  ¿ [G
¿ [M¿ [L   ¿ [«¿ [–¿ [–    ¿ \ {¿ \¿ \  ¿ \
¿ \¿ \   ¿ \!¿ \à¿ \à    ¿ \æÄÅ¿ \¬¿ \¬  ¿ \Ã
¿ \“¿ \—   ¿ ]üc¿ ]®¿ ]®    ¿ ^I¿ ^¿ ^    ¿ dıF¿ e¿ e    ¿ ^SÉ ¿ ^d¿ ^d  ¿ ^~¿ ^ì¿ ^í  ¿ ^S¿ ^T¿ aWi¿ ae¿ ae  ¿ ao¿ a{¿ az  ¿ a¿ aá¿ aÜ   ¿ a√i¿ a—¿ a—  ¿ a€¿ aÁ¿ aÊ  ¿ aÎ¿ aÛ¿ aÚ   ¿ b/i¿ b=¿ b=  ¿ bH¿ bT¿ bS  ¿ bX¿ b`¿ b_   ¿ bõ?¿ bß¿ bß  ¿ b∞¿ bº¿ bª   ¿ b›Ä¡¿ bÎ¿ bÎ  ¿ b¯¿ c¿ c  ¿ c¿ c¿ c   ¿ c¢ÄÙ¿ c∞¿ c∞  ¿ c¿¿ cÀ¿ c   ¿ cœ¿ cﬂ¿ cﬁ   ¿ döW¿ dØ¿ dØ  ¿ dæ¿ d…¿ d»   ¿ e?Ö,¿ eM¿ eM  ¿ eh#¿ eÅ¿ eÄ  ¿ eë"¿ e©¿ e®  ¿ eπ)¿ eÿ¿ e◊   ¿ kN¶¥¿ kf¿ kf  ¿ ks¿ kÉ¿ kÇ  ¿ kï"¿ k≠¿ k¨  ¿ kΩ)¿ k‹¿ k€   ¿ ìÌÅø¿ ì˚¿ ì˚  ¿ î¿ î¿ î  ¿ î$¿ î,¿ î+  ¿ î7
¿ î?¿ î>  ¿ îG#¿ îZ¿ îY   ¿ ï∞Ço¿ ï√¿ ï√  ¿ ï‹¿ ï‰¿ ï„  ¿ ï∞¿ ï±¿ ò#Ço¿ ò6¿ ò6  ¿ òO¿ òW¿ òV  ¿ ò#¿ ò$¿ öñÅø¿ öù¿ öù  ¿ ö©¿ ö±¿ ö∞  ¿ ö∑¿ ö…¿ ö»   ¿ úYâD¿ úl¿ úl  ¿ úÜ¿ úé¿ úç  ¿ úY¿ úZ¿ •°i¿ •¥¿ •¥  ¿ •Œ¿ •÷¿ •’  ¿ •°¿ •¢¿ ¶Å"¿ ¶!¿ ¶!  ¿ ¶A¿ ¶O¿ ¶N  ¿ ¶¿ ¶¿ ß{ÉD¿ ßè¿ ßè  ¿ ß¢$¿ ßº¿ ßª  ¿ ß»¿ ß÷¿ ß’  ¿ ß{¿ ß|¿ ™√Å¿ ™‘¿ ™‘  ¿ ™Â¿ ™ı¿ ™Ù  ¿ ™√¿ ™ƒ¿ ´‡õ¨¿ ´Ò¿ ´Ò   ¿ ´‡¿ ´·¿ «êf¿ «ï¿ «ï  ¿ «°¿ «≤¿ «±  ¿ «∫¿ «¬¿ «¡   ¿ «˙å¿ »¿ »  ¿ »¿ »"¿ »!  ¿ »*¿ »2¿ »1  ¿ «˙¿ «˚¿ ‘Åi¿ ‘(¿ ‘(  ¿ ‘<¿ ‘J¿ ‘I  ¿ ‘P¿ ‘Y¿ ‘X  ¿ ‘¿ ‘¿ ’Ñ6¿ ’ï¿ ’ï  ¿ ’°¿ ’©¿ ’®  ¿ ’Ñ¿ ’Ö¿ ’æÇÑ¿ ’œ¿ ’œ  ¿ ’ﬂ¿ ’Ò¿ ’  ¿ ’˘¿ ÷
¿ ÷	  ¿ ’æ¿ ’ø¿ ÿFÑE¿ ÿi¿ ÿi  ¿ ÿì)¿ ÿ±¿ ÿ∞   ¿ ‹èÄ£¿ ‹†¿ ‹†  ¿ ‹ø¿ ‹◊¿ ‹÷  ¿ ‹è¿ ‹ê ¿ ›6áû¿ ›<¿ ›<  ¿ ›ìÄ‘¿ ›ô ¿ ›ô¿ ›£  ¿ ›™¿ ›π¿ ›∏  ¿ ›œ¿ ›ﬁ¿ ››  ¿ ›Ì¿ ›¸¿ ›˚  ¿ ﬁ¿ ﬁ¿ ﬁ  ¿ ﬁ.¿ ﬁ=¿ ﬁ<  ¿ ﬁK¿ ﬁZ¿ ﬁY   ¿ ﬁk¿ ﬁ}¿ ﬁ}  ¿ ﬁã!¿ ﬁü¿ ﬁü  ¿ ﬁ∞¿ ﬁ√¿ ﬁ√  ¿ ﬁ”*¿ ﬁÏ¿ ﬁÏ  ¿ ﬂ¿ ﬂ¿ ﬂ  ¿ ﬂ¿ ﬂ$¿ ﬂ$  ¿ ﬂ0J¿ ﬂZ¿ ﬂZ   ¿ ﬂ0¿ ﬂ1¿ ﬂ~Ç•¿ ﬂí¿ ﬂí  ¿ ﬂü¿ ﬂ∞¿ ﬂØ  ¿ ﬂ~¿ ﬂ¿ ‚'Åf¿ ‚E¿ ‚E  ¿ ‚X¿ ‚f¿ ‚e  ¿ ‚'¿ ‚(¿ „ëÅA¿ „¢¿ „¢  ¿ „µ¿ „√¿ „¬  ¿ „À¿ „ﬁ¿ „›  ¿ „ë¿ „í ¿ ‰÷É∫¿ ‰‹¿ ‰‹  ¿ ÂÄ•¿ Â	 ¿ Â	¿ Â  ¿ Â¿ Â)¿ Â(  ¿ Â=	¿ ÂC¿ ÂB  ¿ ÂL
¿ ÂR¿ ÂQ  ¿ Â\
¿ Âb¿ Âa  ¿ Âl¿ Âr¿ Âq  ¿ Âá¿ Âñ¿ Âï   ¿ Â¨¿ Â∑¿ Â∑  ¿ Â ¿ Âÿ¿ Âÿ  ¿ Â‡¿ ÂÒ¿ ÂÒ  ¿ Â˙¿ Ê¿ Ê  ¿ Ê(¿ Ê)¿ Ê)  ¿ Ê=¿ ÊP¿ ÊP   ¿ ÊaÇ-¿ Êt¿ Êt  ¿ Êz¿ Êà¿ Êá  ¿ Êa¿ Êb ¿ Ëíòu¿ Ïï¿ ÏïÉ¸/// Defines the appearance of a Material Design text field.
///
/// [InputDecorator] displays the visual elements of a Material Design text
/// field around its input [child]. The visual elements themselves are defined
/// by an [InputDecoration] object and their layout and appearance depend
/// on the `baseStyle`, `textAlign`, `isFocused`, and `isEmpty` parameters.
///
/// [TextField] uses this widget to decorate its [EditableText] child.
///
/// [InputDecorator] can be used to create widgets that look and behave like a
/// [TextField] but support other kinds of input.
///
/// Requires one of its ancestors to be a [Material] widget. The [child] widget,
/// as well as the decorative widgets specified in [decoration], must have
/// non-negative baselines.
///
/// See also:
///
///  * [TextField], which uses an [InputDecorator] to display a border,
///    labels, and icons, around its [EditableText] child.
///  * [Decoration] and [DecoratedBox], for drawing arbitrary decorations
///    around other widgets. ¿ ÏøÅÀ¿ ÌÜ ¿ ÌÜ¿ Ìî Ä∂/// Creates a widget that displays a border, labels, and icons,
/// for a [TextField].
///
/// The [isFocused], [isHovering], [expands], and [isEmpty] arguments must not
/// be null.
¿ Ìõ	¿ Ì¢¿ Ì°  ¿ Ì™¿ Ìπ¿ Ì∏  ¿ Ì»¿ ÌŒ¿ ÌÕ  ¿ Ì‹¿ Ì‚¿ Ì·  ¿ Ì¿ Ìˆ¿ Ìı  ¿ Ó¿ Ó¿ Ó  ¿ Ó(¿ Ó.¿ Ó-  ¿ ÓE¿ ÓK¿ ÓJ  ¿ Ó_¿ Óe¿ Ód  ¿ Óy
¿ Ó¿ Ó~  ¿ Ó¿ Ó:¿ ÓT¿ Ón	¿ ÓéÄÂ¿ Ôi¿ ÔiÄº/// The text and styles to use when decorating the child.
///
/// Null [InputDecoration] properties are initialized with the corresponding
/// values from [ThemeData.inputDecorationTheme]. ¿ ÔxÅü¿ Ò¿ ÒÅt/// The style on which to base the label, hint, counter, and error styles
/// if the [decoration] does not provide explicit styles.
///
/// If null, [baseStyle] defaults to the `titleMedium` style from the
/// current [Theme], see [ThemeData.textTheme].
///
/// The [TextStyle.textBaseline] of the [baseStyle] is used to determine
/// the baseline used for text alignment. ¿ Ò_¿ Òr¿ ÒrB/// How the text in the decoration should be aligned horizontally. ¿ ÒÄÇ˛¿ Ùm¿ ÙmÇª/// {@template flutter.material.InputDecorator.textAlignVertical}
/// How the text should be aligned vertically.
///
/// Determines the alignment of the baseline within the available space of
/// the input (typically a TextField). For example, TextAlignVertical.top will
/// place the baseline such that the text, and any attached decoration like
/// prefix and suffix, is as close to the top of the input as possible without
/// overflowing. The heights of the prefix and suffix are similarly included
/// for other alignment values. If the height is greater than the height
/// available, then the prefix and suffix will be allowed to overflow first
/// before the text scrolls.
/// {@endtemplate} ¿ ÙÉÅâ¿ ˆ¿ ˆÅ\/// Whether the input field has focus.
///
/// Determines the position of the label text and the color and weight of the
/// border.
///
/// Defaults to false.
///
/// See also:
///
///  * [InputDecoration.hoverColor], which is also blended into the focus
///    color and fill color when the [isHovering] is true to produce the final
///    color. ¿ ˆÅ@¿ ˜G¿ ˜GÅ/// Whether the input field is being hovered over by a mouse pointer.
///
/// Determines the container fill color, which is a blend of
/// [InputDecoration.hoverColor] with [InputDecoration.fillColor] when
/// true, and [InputDecoration.fillColor] when not.
///
/// Defaults to false. ¿ ˜VÇ¿ ˘Z¿ ˘ZÅ‚/// If true, the height of the input field will be as large as possible.
///
/// If wrapped in a widget that constrains its child's height, like Expanded
/// or SizedBox, the input field will only be affected if [expands] is set to
/// true.
///
/// See [TextField.minLines] and [TextField.maxLines] for related ways to
/// affect the height of an input. When [expands] is true, both must be null
/// in order to avoid ambiguity in determining the height.
///
/// Defaults to false. ¿ ˘fÄª¿ ˙¿ ˙Äú/// Whether the input field is empty.
///
/// Determines the position of the label text and whether to display the hint
/// text.
///
/// Defaults to false. ¿ ˙&Äå¿ ˙≠¿ ˙≠r/// The widget below this widget in the tree.
///
/// Typically an [EditableText], [DropdownButton], or [InkWell]. ¿ ˙∑Åö¿ ˚µ¿ ˚µÄÍ/// Whether the label needs to get out of the way of the input, either by
/// floating or disappearing.
///
/// Will withdraw when not empty, when focused while enabled, or when
/// floating behavior is [FloatingLabelBehavior.always].   ¿ ¸UJ¿ ¸w¿ ¸w   ¿ ¸U¿ ¸V¿ ¸£ÇK¿ ˛F¿ ˛FÅÇ/// The RenderBox that defines this decorator's "container". That's the
/// area which is filled if [InputDecoration.filled] is true. It's the area
/// adjacent to [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// [TextField] renders ink splashes within the container. ¿ ˛R¿ ˛`¿ ˛_   ¿ ˛ÚÇ¿ ˇ¿ ˇ  ¿ ˇ&¿ ˇ4¿ ˇ3  ¿ ˛Ú¿ ˛Û ¿	¿ g€¿¿   ¿d7¿É¿É  ¿ü2¿∫¿∫  ¿’6¿Ù¿Ù  ¿4¿%¿% ¿2¿A¿B¿§o¿æ¿æ ¿⁄¿Ë¿¿Ó¿˘¿ı¿˚¿¿¿¿¿a¿1¿1 ¿L¿Z¿w¿[¿b¿^¿d¿l¿m¿u¿v¿|o¿ñ¿ñ ¿≤¿¿¿Í¿∆¿—¿Õ¿”¿€¿‹¿‰¿Â¿Ô\¿	¿	 ¿ ¿,¿J¿-¿O\¿i¿i ¿Ä¿å¿™¿ç¿	Q%¿	b¿	b  ¿-°!¿-≤¿-≤  
¿	zÄö¿	é¿	é    ¿
-¿
'¿
'    ¿
H'¿
Q¿
Q    ¿
rO¿
{¿
{    ¿
ƒ?¿
Õ¿
Õ    ¿#¿¿    ¿,p¿5¿5    ¿EÄç¿N¿N    ¿F¿¿    ¿'ßÄÔ¿'æ¿'æ    ¿∞Ç ¿¡¿¡   ¿∞¿±¿~r¿è¿è   ¿~¿¿ÙÄÊ¿¿   ¿Ù¿ı¿ﬁo¿„¿„    ¿†Ég¿±¿±  ¿¡¿—¿–  ¿†¿°¿ÉE¿¿  ¿*¿5¿4   ¿TÅõ¿Z¿Z  ¿h¿s¿r  ¿}¿ì¿í   ¿ÛÅ ¿˘¿˘  ¿¿¿   ¿ÅQ¿¿  ¿+¿6¿5  ¿@¿V¿U   ¿lÅı¿r¿r  ¿ã)¿°¿†  ¿∫#¿œ¿Œ  ¿„¿˘¿¯   ¿eÅı¿k¿k  ¿Ñ)¿ö¿ô  ¿≥#¿»¿«  ¿‹¿Ú¿Ò   ¿ÁÇE¿Ò¿Ò  ¿¿¿  ¿¿1¿0   ¿∂Çx¿¿¿¿  ¿‘¿ﬂ¿ﬁ  ¿È¿ˇ¿˛   ¿"2Éê¿"<¿"<  ¿"S¿"^¿"]  ¿"h¿"~¿"}   ¿%∆Å¿%–¿%–  ¿%‡¿%Î¿%Í  ¿%ı¿&¿&
   ¿&–Ä”¿&⁄¿&⁄  ¿&È¿&Ù¿&Û  ¿&˛¿'¿'   ¿(öÖ¿(¶¿(¶  ¿(∏¿(√¿(¬  ¿(Õ¿(„¿(‚   ¿-«ÅG¿-÷¿-÷  ¿-Á¿-Ô¿-Ó  ¿-ı¿.¿.   ¿/π–¿/%¿/%  ¿/+¿/9¿/8  ¿/¿/ ¿hÊ¿ ı¶¿uÓ¿uÓåˆ/// The border, labels, icons, and styles used to decorate a Material
/// Design text field.
///
/// The [TextField] and [InputDecorator] classes use [InputDecoration] objects
/// to describe their decoration. (In fact, this class is merely the
/// configuration of an [InputDecorator], which does all the heavy lifting.)
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` using an `InputDecorator`. The
/// TextField displays a "send message" icon to the left of the input area,
/// which is surrounded by a border an all sides. It displays the `hintText`
/// inside the input area to help the user understand what input is required. It
/// displays the `helperText` and `counterText` below the input area.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a "collapsed" `TextField` using an
/// `InputDecorator`. The collapsed `TextField` surrounds the hint text and
/// input area with a border, but does not add padding around them.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_collapsed.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.1.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to create a `TextField` with hint text, a red border
/// on all sides, and an error message. To display a red border and error
/// message, provide `errorText` to the [InputDecoration] constructor.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_error.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.2.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` with a round border and
/// additional text before and after the input area. It displays "Prefix" before
/// the input area, and "Suffix" after the input area.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_prefix_suffix.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.3.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` with a prefixIcon that changes color
/// based on the `WidgetState`. The color defaults to gray and is green while focused.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.widget_state.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` with a prefixIcon that changes color
/// based on the `WidgetState` through the use of `ThemeData`. The color defaults
/// to gray, be blue while focused and red if in an error state.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.widget_state.1.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TextField], which is a text input widget that uses an
///    [InputDecoration].
///  * [InputDecorator], which is a widget that draws an [InputDecoration]
///    around an input child widget.
///  * [Decoration] and [DecoratedBox], for drawing borders and backgrounds
///    around a child widget. ¿vã-¿x  ¿x ¿x/ Ç/// Creates a bundle of the border, labels, icons, and styles used to
/// decorate a Material Design text field.
///
/// Unless specified by [ThemeData.inputDecorationTheme], [InputDecorator]
/// defaults [isDense] to false and [filled] to false. The default border is
/// an instance of [UnderlineInputBorder]. If [border] is [InputBorder.none]
/// then no border is drawn.
///
/// Only one of [prefix] and [prefixText] can be specified.
///
/// Similarly, only one of [suffix] and [suffixText] can be specified.8¿x6	¿x<¿x;  ¿xE¿xK¿xJ  ¿xY
¿x_¿x^  ¿xi¿xo¿xn  ¿x}¿xÉ¿xÇ  ¿xí¿xò¿xó  ¿xØ¿xµ¿x¥  ¿x¿¿x∆¿x≈  ¿x’¿x€¿x⁄  ¿xÎ¿xÒ¿x  ¿y¿y
¿y	  ¿y	¿y¿y  ¿y&¿y,¿y+  ¿y:¿y@¿y?  ¿yV¿y\¿y[  ¿ym¿ys¿yr  ¿yàÄ’¿zE¿zD  ¿zc¿zi¿zh  ¿zÖ
¿zã¿zä  ¿zï¿zõ¿zö  ¿z©¿zØ¿zÆ  ¿zæ¿zƒ¿z√  ¿z÷¿z‹¿z€  ¿zˆ¿z¸¿z˚  ¿{¿{¿{  ¿{-¿{3¿{2  ¿{?¿{E¿{D  ¿{X¿{^¿{]  ¿{m¿{s¿{r  ¿{ç¿{ì¿{í  ¿{û¿{§¿{£  ¿{≥¿{π¿{∏  ¿{…¿{œ¿{Œ  ¿{„¿{È¿{Ë  ¿{¯¿{˛¿{˝  ¿|	¿|¿|  ¿|¿|$¿|#  ¿|4¿|:¿|9  ¿|N¿|T¿|S  ¿|n¿|t¿|s  ¿|Ä¿|Ü¿|Ö  ¿|ñ¿|ú¿|õ  ¿|≠¿|≥¿|≤  ¿|æ¿|ƒ¿|√  ¿|“¿|ÿ¿|◊  ¿|Á¿|Ì¿|Ï  ¿|¸¿}¿}  ¿}¿}¿}  ¿}*¿}0¿}/  ¿}G¿}M¿}L  ¿}`¿}f¿}e  ¿}x¿}~¿}}  ¿}â¿}è¿}é  ¿}¢¿}®¿}ß  ¿}¿¿}∆¿}≈  ¿}›¿}„¿}‚  a¿yà¿yâ¿yì¿z9¿yõ¿y¬¿yˇ¿zY¿z{¿}ò¿}ˆ¿}¸¿~,¿~v¿~¿~¿~+¿~¿~¿~	¿~¿~$¿~¿~'¿~7¿~Ä¿~Ü¿~±¿~˘¿~û¿~ñ¿~ë¿~ô¿~™¿~°¿~≠¿~º¿¿	¿;¿á¿¿¿:¿%¿¿¿ ¿3¿(¿6¿F¿ë¿ó¿…¿Ä¿¢¿£¿»¿≥¿´¿§¿Æ¿¡¿∂¿ƒ¿‘¿Ä¿Ä%¿ÄW¿Ä£¿Ä0¿Ä1¿ÄV¿ÄA¿Ä9¿Ä2¿Ä<¿ÄO¿ÄD¿ÄR¿Äb¿Ä≠¿Ä≥¿Ä„¿Å-¿Äæ¿Äø¿Ä‚¿ÄŒ¿Ä∆¿Ä¿¿Ä…¿Ä€¿Ä—¿Äﬁ¿ÄÓ¿Å3ä˝¿Ç√¿Ç“¿Ç”¿Ç‹¿Ç”Åw/// Defines an [InputDecorator] that is the same size as the input field.
///
/// This type of input decoration does not include a border by default.
///
/// A collapsed decoration cannot have [labelText], [errorText], [counter],
/// [icon], prefixes, and suffixes.
///
/// Sets the [isCollapsed] property to true.
/// Sets the [contentPadding] property to [EdgeInsets.zero].¿Ç„¿ÇÚ¿ÇÒ  ¿ÇˇÄ«¿É≤¿É±  ¿ÉÃÄ…¿ÑÄ¿Ñ  ¿Ñõ¿Ñ°¿Ñ†  ¿ÑØ	¿Ñµ¿Ñ¥  ¿Ñæ¿Ñƒ¿Ñ√  ¿Ñ⁄¿Ñ‡¿Ñﬂ  ¿ÑÒ¿Ñ˜¿Ñˆ  ¿ÖÄ’¿Ö…¿Ö»  ¿ÖÁ¿ÖÌ¿ÖÏ  ¿Ü	¿Ü¿Ü  ¿Ü"¿Ü(¿Ü'  ¿Ü6¿Ü<¿Ü;  ¿ÜK¿ÜQ¿ÜP  ¿Ü`¿Üf¿Üe  ¿ÜÑ¿Üä¿Üâ  ¿Üù¿Ü£¿Ü¢  Äó¿Çˇ¿É ¿É
¿Éî¿É¿ÉZ¿ÉÃ¿ÉÕ¿É◊¿Ña¿Éﬂ¿Ñ'¿Ö¿Ö¿Ö¿ÖΩ¿Ö¿ÖF¿ÖÉ¿Ö›¿Öˇ¿Ü¿Ün¿Üy¿Üz¿Üì¿Üª¿Ü∂¿ÜΩ¿Ü‘¿Ü ¿Ü÷¿ÜÈ¿Ü„¿ÜÎ¿á¿Ü¯¿á¿á¿á¿á¿á>¿á+¿á@¿áT¿áM¿áV¿án¿ác¿áp¿áâ¿á}¿áã¿áß¿áò¿á©¿áº¿á∂¿áæ¿á’¿áÀ¿á◊¿áÔ¿á‰¿áÒ¿à¿á˛¿à¿à#¿à¿à%¿àB¿à3¿àD¿àN¿àO¿àh¿à\¿àj¿àÇ¿àw¿àÑ¿àò¿àë¿àö¿à≤¿àß¿à¥¿àÕ¿à¡¿àœ¿àÏ¿à‹¿àÓ¿â¿à˚¿â¿â'¿â ¿â)¿âA¿â6¿âC¿â[¿âP¿â]¿âv¿âj¿âx¿âï¿âÖ¿âó¿â∫¿â§¿âº¿â—¿â…¿â”¿âÏ¿â‡¿âÓ¿ä¿â˚¿ä
¿ä#¿ä¿ä%¿ä@¿ä2¿äB¿äb¿äO¿äd¿äÄ¿äq¿äÇ¿äù¿äè¿äü¿ä¿¿ä¨¿ä¬¿ãQ¿ã;¿ãS¿ãÙ¿ã›¿ãˆ¿å(¿å¿å*8¿å4Ç|¿é¨¿é¨ÇK/// An icon to show before the input field and outside of the decoration's
/// container.
///
/// The size and color of the icon is configured automatically using an
/// [IconTheme] and therefore does not need to be explicitly given in the
/// icon widget.
///
/// The trailing edge of the icon is padded by 16dps.
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [icon] and above the widgets that contain [helperText],
/// [errorText], and [counterText].
///
/// See [Icon], [ImageIcon]. ¿éµÄË¿èî¿èîÄ«/// The color of the [icon].
///
/// If [iconColor] is a [WidgetStateColor], then the effective
/// color can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿è¢Ñf¿î¿îÑ&/// Optional widget that describes the input field.
///
/// {@template flutter.material.inputDecoration.label}
/// When the input field is empty and unfocused, the label is displayed on
/// top of the input field (i.e., at the same location on the screen where
/// text may be entered in the input field). When the input field receives
/// focus (or if the field is non-empty), depending on [floatingLabelAlignment],
/// the label moves above, either vertically adjacent to, or to the center of
/// the input field.
/// {@endtemplate}
///
/// This can be used, for example, to add multiple [TextStyle]'s to a label that would
/// otherwise be specified using [labelText], which only takes one [TextStyle].
///
/// {@tool dartpad}
/// This example shows a `TextField` with a [Text.rich] widget as the [label].
/// The widget contains multiple [Text] widgets with different [TextStyle]'s.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.label.0.dart **
/// {@end-tool}
///
/// Only one of [label] and [labelText] can be specified. ¿îÅ¿ï¿ïÄÚ/// Optional text that describes the input field.
///
/// {@macro flutter.material.inputDecoration.label}
///
/// If a more elaborate label is required, consider using [label] instead.
/// Only one of [label] and [labelText] can be specified. ¿ï(ÖI¿ög¿ögÑÛ/// {@template flutter.material.inputDecoration.labelStyle}
/// The style to use for [InputDecoration.labelText] when the label is on top
/// of the input field.
///
/// If [labelStyle] is a [WidgetStateTextStyle], then the effective
/// text style can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// When the [InputDecoration.labelText] is above (i.e., vertically adjacent to)
/// the input field, the text uses the [floatingLabelStyle] instead.
///
/// If null, defaults to a value derived from the base [TextStyle] for the
/// input field and the current [Theme].
///
/// Specifying this style will override the default behavior
/// of [InputDecoration] that changes the color of the label to the
/// [InputDecoration.errorStyle] color or [ColorScheme.error].
///
/// {@tool dartpad}
/// It's possible to override the label style for just the error state, or
/// just the default state, or both.
///
/// In this example the [labelStyle] is specified with a [WidgetStateProperty]
/// which resolves to a text style whose color depends on the decorator's
/// error state.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.label_style_error.0.dart **
/// {@end-tool}
/// {@endtemplate} ¿övÖí¿üˆ¿üˆÖ0/// {@template flutter.material.inputDecoration.floatingLabelStyle}
/// The style to use for [InputDecoration.labelText] when the label is
/// above (i.e., vertically adjacent to) the input field.
///
/// When the [InputDecoration.labelText] is on top of the input field, the
/// text uses the [labelStyle] instead.
///
/// If [floatingLabelStyle] is a [WidgetStateTextStyle], then the effective
/// text style can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to [labelStyle].
///
/// Specifying this style will override the default behavior
/// of [InputDecoration] that changes the color of the label to the
/// [InputDecoration.errorStyle] color or [ColorScheme.error].
///
/// When the input field receives focus, the font size of [InputDecoration.label] is
/// scaled down by 75%.
///
/// {@tool dartpad}
/// It's possible to override the label style for just the error state, or
/// just the default state, or both.
///
/// In this example the [floatingLabelStyle] is specified with a
/// [WidgetStateProperty] which resolves to a text style whose color depends
/// on the decorator's error state.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.floating_label_style_error.0.dart **
/// {@end-tool}
/// {@endtemplate} ¿†Ç©¿¢∞¿¢∞Çx/// Optional widget that appears below the [InputDecorator.child].
///
/// If non-null, the [helper] is displayed below the [InputDecorator.child], in
/// the same location as [error]. If a non-null [error] or [errorText] value is
/// specified then the [helper] is not shown.
///
/// {@tool dartpad}
/// This example shows a `TextField` with a [Text.rich] widget as the [helper].
/// The widget contains [Text] and [Icon] widgets with different styles.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.helper.0.dart **
/// {@end-tool}
///
/// Only one of [helper] and [helperText] can be specified. ¿¢ªÅ˝¿§Æ¿§ÆÅ–/// Text that provides context about the [InputDecorator.child]'s value, such
/// as how the value will be used.
///
/// If non-null, the text is displayed below the [InputDecorator.child], in
/// the same location as [errorText]. If a non-null [errorText] value is
/// specified then the helper text is not shown.
///
/// If a more elaborate helper text is required, consider using [helper] instead.
///
/// Only one of [helper] and [helperText] can be specified. ¿§ΩÅ¿•π¿•πÄ‡/// The style to use for the [helperText].
///
/// If [helperStyle] is a [WidgetStateTextStyle], then the effective
/// text style can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿•…É~¿©9¿©9É@/// The maximum number of lines the [helperText] can occupy.
///
/// Defaults to null, which means that soft line breaks in [helperText] are
/// truncated with an ellipse while hard line breaks are respected.
/// For example, a [helperText] that overflows the width of the field will be
/// truncated with an ellipse. However, a [helperText] with explicit linebreak
/// characters (\n) will display on multiple lines.
///
/// To cause a long [helperText] to wrap, either set [helperMaxLines] or use
/// [helper] which offers more flexibility. For instance, it can be set to a
/// [Text] widget with a specific overflow value.
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the helper.
///
/// See also:
///
///  * [errorMaxLines], the equivalent but for the [errorText]. ¿©LÅo¿™≥¿™≥ÅL/// Text that suggests what sort of input the field accepts.
///
/// Displayed on top of the [InputDecorator.child] (i.e., at the same location
/// on the screen where text may be entered in the [InputDecorator.child]),
/// when [InputDecorator.isEmpty] is true and either (a) [labelText] is null
/// or (b) the input has the focus. ¿™¿Äé¿´J¿´Ju/// The widget to use in place of the [hintText].
///
/// Either [hintText] or [hint] can be specified, but not both. ¿´SÇU¿≠ü¿≠üÇ"/// The style to use for the [hintText].
///
/// If [hintStyle] is a [WidgetStateTextStyle], then the effective
/// text style can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// Also used for the [labelText] when the [labelText] is displayed on
/// top of the input field (i.e., at the same location on the screen where
/// text may be entered in the [InputDecorator.child]).
///
/// If null, defaults to a value derived from the base [TextStyle] for the
/// input field and the current [Theme]. ¿≠≠Äœ¿Æk¿ÆkÄ†/// The direction to use for the [hintText].
///
/// If null, defaults to a value derived from [Directionality] for the
/// input field and the current context. ¿ÆÅÅ{¿Ø¿ØÅU/// The maximum number of lines the [hintText] can occupy.
///
/// Defaults to the value of [TextField.maxLines] attribute.
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the hint text. [TextOverflow.ellipsis] is
/// used to handle the overflow when it is limited to single line. ¿∞Ä˚¿∞Ï¿∞ÏÄ“/// The duration of the [hintText] fade in and fade out animations.
///
/// If null, defaults to [InputDecorationTheme.hintFadeDuration].
/// If [InputDecorationTheme.hintFadeDuration] is null defaults to 20ms. ¿±Ç¿≤˜¿≤˜Å//// Whether the input field's height should always be greater than or equal to
/// the height of the [hintText], even if the [hintText] is not visible.
///
/// The [InputDecorator] widget ignores [hintText] during layout when
/// it's not visible, if this flag is set to false.
///
/// Defaults to true.¿≤?¿≤@¿≤J¿≤Ë¿≤P¿≤u¿≤∞¿≥ÅU¿¥S¿¥SÅ+/// Whether the input field's size should always be greater than or equal to
/// the size of the [hintText], even if the [hintText] is not visible.
///
/// The [InputDecorator] widget ignores [hintText] during layout when
/// it's not visible, if this flag is set to false.
///
/// Defaults to true. ¿¥hÅ¿µk¿µkÄÍ/// Optional widget that appears below the [InputDecorator.child] and the border.
///
/// If non-null, the border's color animates to red and the [helperText] is not shown.
///
/// Only one of [error] and [errorText] can be specified. ¿µuÅ‡¿∑L¿∑LÅ≤/// Text that appears below the [InputDecorator.child] and the border.
///
/// If non-null, the border's color animates to red and the [helperText] is
/// not shown.
///
/// In a [TextFormField], this is overridden by the value returned from
/// [TextFormField.validator], if that is not null.
///
/// If a more elaborate error is required, consider using [error] instead.
///
/// Only one of [error] and [errorText] can be specified. ¿∑ZÇ]¿π≠¿π≠Ç)/// {@template flutter.material.inputDecoration.errorStyle}
/// The style to use for the [InputDecoration.errorText].
///
/// If null, defaults of a value derived from the base [TextStyle] for the
/// input field and the current [Theme].
///
/// By default the color of style will be used by the label of
/// [InputDecoration] if [InputDecoration.errorText] is not null. See
/// [InputDecoration.labelStyle] or [InputDecoration.floatingLabelStyle] for
/// an example of how to replicate this behavior when specifying those
/// styles.
/// {@endtemplate} ¿πºÉy¿Ω(¿Ω(É</// The maximum number of lines the [errorText] can occupy.
///
/// Defaults to null, which means that soft line breaks in [errorText] are
/// truncated with an ellipse while hard line breaks are respected.
/// For example, an [errorText] that overflows the width of the field will be
/// truncated with an ellipse. However, an [errorText] with explicit linebreak
/// characters (\n) will display on multiple lines.
///
/// To cause a long [errorText] to wrap, either set [errorMaxLines] or use
/// [error] which offers more flexibility. For instance, it can be set to a
/// [Text] widget with a specific overflow value.
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the error.
///
/// See also:
///
///  * [helperMaxLines], the equivalent but for the [helperText]. ¿Ω:Ék¿¿ê¿¿êÉ/// {@template flutter.material.inputDecoration.floatingLabelBehavior}
/// Defines **how** the floating label should behave.
///
/// When [FloatingLabelBehavior.auto] the label will float to the top only when
/// the field is focused or has some text content, otherwise it will appear
/// in the field in place of the content.
///
/// When [FloatingLabelBehavior.always] the label will always float at the top
/// of the field above the content.
///
/// When [FloatingLabelBehavior.never] the label will always appear in an empty
/// field in place of the content.
/// {@endtemplate}
///
/// If null, [InputDecorationTheme.floatingLabelBehavior] will be used.
///
/// See also:
///
///  * [floatingLabelAlignment] which defines **where** the floating label
///    should be displayed. ¿¿™É¿√£¿√£Ç∂/// {@template flutter.material.inputDecoration.floatingLabelAlignment}
/// Defines **where** the floating label should be displayed.
///
/// [FloatingLabelAlignment.start] aligns the floating label to the leftmost
/// (when [TextDirection.ltr]) or rightmost (when [TextDirection.rtl]),
/// possible position, which is vertically adjacent to the label, on top of
/// the field.
///
/// [FloatingLabelAlignment.center] aligns the floating label to the center on
/// top of the field.
/// {@endtemplate}
///
/// If null, [InputDecorationTheme.floatingLabelAlignment] will be used.
///
/// See also:
///
///  * [floatingLabelBehavior] which defines **how** the floating label should
///    behave. ¿√æÄõ¿ƒR¿ƒR/// Whether the [InputDecorator.child] is part of a dense form (i.e., uses less vertical
/// space).
///
/// Defaults to false. ¿ƒ^áE¿Àï¿ÀïÜ‘/// The padding for the input decoration's container.
///
/// {@macro flutter.material.input_decorator.container_description}
///
/// By default the [contentPadding] reflects [isDense] and the type of the
/// [border].
///
/// If [isCollapsed] is true then [contentPadding] is [EdgeInsets.zero].
///
/// ### Material 3 default content padding
///
/// If `isOutline` property of [border] is false and if [filled] is true then
/// [contentPadding] is `EdgeInsets.fromLTRB(12, 4, 12, 4)` when [isDense]
/// is true and `EdgeInsets.fromLTRB(12, 8, 12, 8)` when [isDense] is false.
///
/// If `isOutline` property of [border] is false and if [filled] is false then
/// [contentPadding] is `EdgeInsets.fromLTRB(0, 4, 0, 4)` when [isDense] is
/// true and `EdgeInsets.fromLTRB(0, 8, 0, 8)` when [isDense] is false.
///
/// If `isOutline` property of [border] is true then [contentPadding] is
/// `EdgeInsets.fromLTRB(12, 16, 12, 8)` when [isDense] is true
/// and `EdgeInsets.fromLTRB(12, 20, 12, 12)` when [isDense] is false.
///
/// ### Material 2 default content padding
///
/// If `isOutline` property of [border] is false and if [filled] is true then
/// [contentPadding] is `EdgeInsets.fromLTRB(12, 8, 12, 8)` when [isDense]
/// is true and `EdgeInsets.fromLTRB(12, 12, 12, 12)` when [isDense] is false.
///
/// If `isOutline` property of [border] is false and if [filled] is false then
/// [contentPadding] is `EdgeInsets.fromLTRB(0, 8, 0, 8)` when [isDense] is
/// true and `EdgeInsets.fromLTRB(0, 12, 0, 12)` when [isDense] is false.
///
/// If `isOutline` property of [border] is true then [contentPadding] is
/// `EdgeInsets.fromLTRB(12, 20, 12, 12)` when [isDense] is true
/// and `EdgeInsets.fromLTRB(12, 24, 12, 16)` when [isDense] is false. ¿À®Å(¿Ã≈¿Ã≈Å/// Whether the decoration is the same size as the input field.
///
/// A collapsed decoration cannot have [labelText], [errorText], [counter],
/// [icon], prefixes, and suffixes.
///
/// To create a collapsed input decoration, use [InputDecoration.collapsed]. ¿Ã’áG¿‘¿‘Ü‹/// An icon that appears before the [prefix] or [prefixText] and before
/// the editable part of the text field, within the decoration's container.
///
/// The size and color of the prefix icon is configured automatically using an
/// [IconTheme] and therefore does not need to be explicitly given in the
/// icon widget.
///
/// The prefix icon is constrained with a minimum size of 48px by 48px, but
/// can be expanded beyond that. Anything larger than 24px will require
/// additional padding to ensure it matches the Material Design spec of 12px
/// padding between the left edge of the input and leading edge of the prefix
/// icon. The following snippet shows how to pad the leading edge of the
/// prefix icon:
///
/// ```dart
/// prefixIcon: Padding(
///   padding: const EdgeInsetsDirectional.only(start: 12.0),
///   child: _myIcon, // _myIcon is a 48px-wide widget.
/// )
/// ```
///
/// {@macro flutter.material.input_decorator.container_description}
///
/// The prefix icon alignment can be changed using [Align] with a fixed `widthFactor` and
/// `heightFactor`.
///
/// {@tool dartpad}
/// This example shows how the prefix icon alignment can be changed using [Align] with
/// a fixed `widthFactor` and `heightFactor`.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.prefix_icon.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [Icon] and [ImageIcon], which are typically used to show icons.
///  * [prefix] and [prefixText], which are other ways to show content
///    before the text field (but after the icon).
///  * [suffixIcon], which is the same but on the trailing edge.
///  * [Align] A widget that aligns its child within itself and optionally
///    sizes itself based on the child's size. ¿‘!Ñ6¿ÿB¿ÿBÉﬁ/// The constraints for the prefix icon.
///
/// This can be used to modify the [BoxConstraints] surrounding [prefixIcon].
///
/// This property is particularly useful for getting the decoration's height
/// less than the minimum tappable height (which is 48px when the visual
/// density is set to [VisualDensity.standard]). This can be achieved by
/// setting [isDense] to true and setting the constraints' minimum height
/// and width to a value lower than the minimum tappable size.
///
/// {@tool dartpad}
/// This example shows the differences between two `TextField` widgets when
/// [prefixIconConstraints] is set to the default value and when one is not.
///
/// The [isDense] property must be set to true to be able to
/// set the constraints smaller than 48px.
///
/// If null, [BoxConstraints] with a minimum width and height of 48px is
/// used.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.prefix_icon_constraints.0.dart **
/// {@end-tool} ¿ÿ\Ç8¿⁄é¿⁄éÇ/// Optional widget to place on the line before the input.
///
/// This can be used, for example, to add some padding to text that would
/// otherwise be specified using [prefixText], or to add a custom widget in
/// front of the input. The widget's baseline is lined up with the input
/// baseline.
///
/// Only one of [prefix] and [prefixText] can be specified.
///
/// The [prefix] appears after the [prefixIcon], if both are specified.
///
/// See also:
///
///  * [suffix], the equivalent but on the trailing edge. ¿⁄ôÇ7¿‹∆¿‹∆Ç/// Optional text prefix to place on the line before the input.
///
/// Uses the [prefixStyle]. Uses [hintStyle] if [prefixStyle] isn't specified.
/// The prefix text is not returned as part of the user's input.
///
/// If a more elaborate prefix is required, consider using [prefix] instead.
/// Only one of [prefix] and [prefixText] can be specified.
///
/// The [prefixText] appears after the [prefixIcon], if both are specified.
///
/// See also:
///
///  * [suffixText], the equivalent but on the trailing edge. ¿‹’Åñ¿ﬁ`¿ﬁ`Åc/// The style to use for the [prefixText].
///
/// If [prefixStyle] is a [WidgetStateTextStyle], then the effective
/// text style can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle].
///
/// See also:
///
///  * [suffixStyle], the equivalent but on the trailing edge. ¿ﬁpÅ ¿ﬂÅ¿ﬂÅÄı/// Optional color of the prefixIcon
///
/// Defaults to [iconColor]
///
/// If [prefixIconColor] is a [WidgetStateColor], then the effective
/// color can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿ﬂïáÚ¿Á}¿Á}áÅ/// An icon that appears after the editable part of the text field and
/// after the [suffix] or [suffixText], within the decoration's container.
///
/// The size and color of the suffix icon is configured automatically using an
/// [IconTheme] and therefore does not need to be explicitly given in the
/// icon widget.
///
/// The suffix icon is constrained with a minimum size of 48px by 48px, but
/// can be expanded beyond that. Anything larger than 24px will require
/// additional padding to ensure it matches the Material Design spec of 12px
/// padding between the right edge of the input and trailing edge of the
/// prefix icon. The following snippet shows how to pad the trailing edge of
/// the suffix icon:
///
/// ```dart
/// suffixIcon: Padding(
///   padding: const EdgeInsetsDirectional.only(end: 12.0),
///   child: _myIcon, // myIcon is a 48px-wide widget.
/// )
/// ```
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [icon] and above the widgets that contain [helperText],
/// [errorText], and [counterText].
///
/// The suffix icon alignment can be changed using [Align] with a fixed `widthFactor` and
/// `heightFactor`.
///
/// {@tool dartpad}
/// This example shows how the suffix icon alignment can be changed using [Align] with
/// a fixed `widthFactor` and `heightFactor`.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.suffix_icon.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [Icon] and [ImageIcon], which are typically used to show icons.
///  * [suffix] and [suffixText], which are other ways to show content
///    after the text field (but before the icon).
///  * [prefixIcon], which is the same but on the leading edge.
///  * [Align] A widget that aligns its child within itself and optionally
///    sizes itself based on the child's size. ¿ÁåÇ/¿Èµ¿ÈµÇ /// Optional widget to place on the line after the input.
///
/// This can be used, for example, to add some padding to the text that would
/// otherwise be specified using [suffixText], or to add a custom widget after
/// the input. The widget's baseline is lined up with the input baseline.
///
/// Only one of [suffix] and [suffixText] can be specified.
///
/// The [suffix] appears before the [suffixIcon], if both are specified.
///
/// See also:
///
///  * [prefix], the equivalent but on the leading edge. ¿È¿Ç6¿ÎÏ¿ÎÏÇ/// Optional text suffix to place on the line after the input.
///
/// Uses the [suffixStyle]. Uses [hintStyle] if [suffixStyle] isn't specified.
/// The suffix text is not returned as part of the user's input.
///
/// If a more elaborate suffix is required, consider using [suffix] instead.
/// Only one of [suffix] and [suffixText] can be specified.
///
/// The [suffixText] appears before the [suffixIcon], if both are specified.
///
/// See also:
///
///  * [prefixText], the equivalent but on the leading edge. ¿Î˚Åï¿ÌÖ¿ÌÖÅb/// The style to use for the [suffixText].
///
/// If [suffixStyle] is a [WidgetStateTextStyle], then the effective text
/// style can depend on the [WidgetState.focused] state, i.e. if the
/// [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle].
///
/// See also:
///
///  * [prefixStyle], the equivalent but on the leading edge. ¿ÌïÅ#¿Ó©¿Ó©Ä¯/// Optional color of the [suffixIcon].
///
/// Defaults to [iconColor]
///
/// If [suffixIconColor] is a [WidgetStateColor], then the effective
/// color can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿ÓΩÑï¿Û=¿Û=Ñ7/// The constraints for the suffix icon.
///
/// This can be used to modify the [BoxConstraints] surrounding [suffixIcon].
///
/// This property is particularly useful for getting the decoration's height
/// less than the minimum tappable height (which is 48px when the visual
/// density is set to [VisualDensity.standard]). This can be achieved by
/// setting [isDense] to true and setting the constraints' minimum height
/// and width to a value lower than the minimum tappable size.
///
/// If null, a [BoxConstraints] with a minimum width and height of 48px is
/// used.
///
/// {@tool dartpad}
/// This example shows the differences between two `TextField` widgets when
/// [suffixIconConstraints] is set to the default value and when one is not.
///
/// The [isDense] property must be set to true to be able to
/// set the constraints smaller than 48px.
///
/// If null, [BoxConstraints] with a minimum width and height of 48px is
/// used.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.suffix_icon_constraints.0.dart **
/// {@end-tool} ¿ÛWÅè¿Ù€¿Ù€Åc/// Optional text to place below the line as a character count.
///
/// Rendered using [counterStyle]. Uses [helperStyle] if [counterStyle] is
/// null.
///
/// The semantic label can be replaced by providing a [semanticCounterText].
///
/// If null or an empty string and [counter] isn't specified, then nothing
/// will appear in the counter's location. ¿ÙÎÄª¿ıü¿ıüÄü/// Optional custom counter widget to go in the place otherwise occupied by
/// [counterText]. If this property is non null, then [counterText] is
/// ignored. ¿ı´Å>¿ˆ›¿ˆ›Å/// The style to use for the [counterText].
///
/// If [counterStyle] is a [WidgetStateTextStyle], then the effective
/// text style can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [helperStyle]. ¿ˆÓÇß¿˘è¿˘èÇx/// If true the decoration's container is filled with [fillColor].
///
/// When [InputDecorator.isHovering] is true, the [hoverColor] is also blended
/// into the final fill color.
///
/// Typically this field set to true if [border] is an [UnderlineInputBorder].
///
/// {@template flutter.material.input_decorator.container_description}
/// The decoration's container is the area which is filled if [filled] is true
/// and bordered per the [border]. It's the area adjacent to [icon] and above
/// the widgets that contain [helperText], [errorText], and [counterText].
/// {@endtemplate}
///
/// This property is false by default. ¿˘öÅÄ¿˚¿˚ÅW/// The base fill color of the decoration's container color.
///
/// When [InputDecorator.isHovering] is true, the [hoverColor] is also blended
/// into the final fill color.
///
/// By default the [fillColor] is based on the current
/// [InputDecorationTheme.fillColor].
///
/// {@macro flutter.material.input_decorator.container_description} ¿˚Ç6¿˝K¿˝KÇ/// The fill color of the decoration's container when it has the input focus.
///
/// By default the [focusColor] is based on the current
/// [InputDecorationTheme.focusColor].
///
/// This [focusColor] is ignored by [TextField] and [TextFormField] because
/// they don't respond to focus changes by changing their decorator's
/// container color, they respond by changing their border to the
/// [focusedBorder], which you can change the color of.
///
/// {@macro flutter.material.input_decorator.container_description} ¿˝ZÇ!¿ˇq¿ˇqÅÒ/// The color of the highlight for the decoration shown if the container
/// is being hovered over by a mouse.
///
/// If [filled] is true, the [hoverColor] is blended with [fillColor] and
/// fills the decoration's container.
///
/// If [filled] is false, and [InputDecorator.isFocused] is false, the color
/// is blended over the [enabledBorder]'s color.
///
/// By default the [hoverColor] is based on the current [Theme].
///
/// {@macro flutter.material.input_decorator.container_description} ¿ˇÄÖ¿ë¿ëÑ—/// The border to display when the [InputDecorator] does not have the focus and
/// is showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿°Ö¿	Ø¿	ØÑŒ/// The border to display when the [InputDecorator] has the focus and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿	¡Ö¿¬¿¬Ñ¡/// The border to display when the [InputDecorator] has the focus and is
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿ŸÖ¿—¿—Ñ∫/// The border to display when the [InputDecorator] is disabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿‰Ö¿›¿›Ñª/// The border to display when the [InputDecorator] is enabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null. ¿ÔàR¿!;¿!;áÍ/// The shape of the border to draw around the decoration's container.
///
/// If [border] is a [WidgetStateInputBorder] then the effective border is resolved
/// in the following states:
///  * [WidgetState.disabled].
///  * [WidgetState.error].
///  * [WidgetState.focused].
///  * [WidgetState.hovered].
///
/// If [border] derives from [InputBorder] the border's [InputBorder.borderSide],
/// i.e. the border's color and width, will be overridden to reflect the input
/// decorator's state. Only the border's shape is used. If custom  [BorderSide]
/// values are desired for a given state, all five borders ‚Äì [errorBorder],
/// [focusedBorder], [enabledBorder], [disabledBorder], [focusedErrorBorder] ‚Äì must be set.
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// The border's bounds, i.e. the value of `border.getOuterPath()`, define
/// the area to be filled.
///
/// This property is only used when the appropriate one of [errorBorder],
/// [focusedBorder], [focusedErrorBorder], [disabledBorder], or [enabledBorder]
/// is not specified. This border's [InputBorder.borderSide] property is
/// configured by the InputDecorator, depending on the values of
/// [InputDecoration.errorText], [InputDecoration.enabled],
/// [InputDecorator.isFocused] and the current [Theme].
///
/// Typically one of [UnderlineInputBorder] or [OutlineInputBorder].
/// If null, InputDecorator's default is `const UnderlineInputBorder()`.
///
/// See also:
///
///  * [InputBorder.none], which doesn't draw a border.
///  * [UnderlineInputBorder], which draws a horizontal line at the
///    bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container. ¿!FÄµ¿!Ù¿!ÙÄú/// If false the opacity of the visual elements is reduced, including [helperText],[errorText], and [counterText].
///
/// This property is true by default. ¿" ÄΩ¿"™¿"™Äë/// A semantic label for the [counterText].
///
/// Defaults to null.
///
/// If provided, this replaces the semantic label of the [counterText]. ¿"¬Å!¿#—¿#—Ä¯/// Typically set to true when the [InputDecorator] contains a multiline
/// [TextField] ([TextField.maxLines] is null or > 1) to override the default
/// behavior of aligning the label with the center of the [TextField].
///
/// Defaults to false. ¿#ËÇô¿&v¿&vÇ_/// Defines minimum and maximum sizes for the [InputDecorator].
///
/// Typically the decorator will fill the horizontal space it is given. For
/// larger screens, it may be useful to have the maximum width clamped to
/// a given value so it doesn't fill the whole screen. This property
/// allows you to control how big the decorator will be in its available
/// space.
///
/// If null, then the ambient [ThemeData.inputDecorationTheme]'s
/// [InputDecorationTheme.constraints] will be used. If that
/// is null then the decorator will fill the available width with
/// a default height based on text size. ¿L√Ñ¡¿L◊¿L◊   ¿L√¿Lƒ¿&Üío¿&¸¿&¸a/// Creates a copy of this input decoration with the given fields replaced
/// by the new values. 8¿'¿'¿'  ¿'¿'%¿'$  ¿'3¿'<¿';  ¿'F¿'O¿'N  ¿']¿'i¿'h  ¿'x¿'Ñ¿'É  ¿'õ¿'§¿'£  ¿'Ø¿'∏¿'∑  ¿'«¿'”¿'“  ¿'„¿'È¿'Ë  ¿'¸¿(¿(  ¿(¿(¿(  ¿($¿(0¿(/  ¿(> ¿(N¿(M  ¿(d¿(o¿(n  ¿(Ñ¿(ä¿(â  ¿(õ¿(¢¿(°  ¿(π¿(¿¿(ø  ¿(’¿(ﬁ¿(›  ¿(Ë¿(Ò¿(  ¿(ˇ¿)¿)
  ¿)¿) ¿)  ¿)2,¿)J¿)I  ¿)d.¿)}¿)|  ¿)ò¿)ü¿)û  ¿)Ø¿)∂¿)µ  ¿)¬"¿)◊¿)÷  ¿)Í¿)Û¿)Ú  ¿*¿*¿*
  ¿*¿*¿*  ¿*.%¿*?¿*>  ¿*Y¿*e¿*d  ¿*u¿*}¿*|  ¿*ë¿*ö¿*ô  ¿*©¿*≤¿*±  ¿*Ω¿*∆¿*≈  ¿*’¿*·¿*‡  ¿*Ò¿*˘¿*¯  ¿+%¿+¿+  ¿+8¿+A¿+@  ¿+M¿+V¿+U  ¿+f¿+r¿+q  ¿+É¿+ä¿+â  ¿+ï¿+ù¿+ú  ¿+´¿+≥¿+≤  ¿+¬¿+ ¿+…  ¿+Ÿ¿+Á¿+Ê  ¿+˜¿,¿,  ¿,¿,%¿,$  ¿,<¿,J¿,I  ¿,]¿,k¿,j  ¿,}¿,ã¿,ä  ¿,ñ¿,ù¿,ú  ¿,©¿,≤¿,±  ¿, ¿,—¿,–  ¿,Ë¿,˘¿,¯   ¿8˘â
¿:¿:Å/// Used by widgets like [TextField] and [InputDecorator] to create a new
/// [InputDecoration] with default values taken from the [theme].
///
/// Only null valued properties from this [InputDecoration] are replaced
/// by the corresponding values from [theme]. ¿:(¿:>¿:=   ¿Bä∏¿B!¿B!  ¿B$¿B,¿B+  ¿B¿B¿Qàç¿Qõ¿Qõ   ¿Qà¿Qâ¿u›¿uﬁ¿^é¿ Üπ¿`U¿`UÅµ/// Defines the default appearance of [InputDecorator]s.
///
/// This class is used to define the value of [ThemeData.inputDecorationTheme].
/// The [InputDecorator], [TextField], and [TextFormField] widgets use
/// the current input decoration theme to initialize null [InputDecoration]
/// properties.
///
/// The [InputDecoration.applyDefaults] method is used to combine an input
/// decoration theme with an [InputDecoration] object. ¿`ÇÑB¿`˚ ¿`˚¿a n/// Creates a value for [ThemeData.inputDecorationTheme] that
/// defines default values for [InputDecorator].#¿a¿a¿a  ¿a+¿a1¿a0  ¿aH¿aN¿aM  ¿a^¿ad¿ac  ¿aw¿a}¿a|  ¿aã¿aë¿aê  ¿a¶¿a¨¿a´  ¿aª¿a¡¿a¿  ¿a”7¿aŸ¿aÿ  ¿b:¿b¿b  ¿bP¿bV¿bU  ¿bj¿bp¿bo  ¿bÉ¿bâ¿bà  ¿b°¿bß¿b¶  ¿bµ¿bª¿b∫  ¿bÀ¿b—¿b–  ¿bÂ¿bÎ¿bÍ  ¿c¿c¿c
  ¿c¿c!¿c   ¿c5¿c;¿c:  ¿cU¿c[¿cZ  ¿cl¿cr¿cq  ¿cÖ¿cã¿cä  ¿cô¿cü¿cû  ¿cπ¿cø¿cæ  ¿c—¿c◊¿c÷  ¿cÊ¿cÏ¿cÎ  ¿c˚¿d¿d   ¿d¿d¿d  ¿d)¿d/¿d.  ¿dF¿dL¿dK  ¿d_¿de¿dd  ¿dw¿d}¿d|  ¿dà¿dé¿dç  ¿d≠¿d≥¿d≤  
¿a¿b¿b¿b.¿bD¿bE¿b_¿bñ¿cz¿d¢#¿d»V¿e¿e8/// {@macro flutter.material.inputDecoration.labelStyle} ¿e#f¿ew¿ew@/// {@macro flutter.material.inputDecoration.floatingLabelStyle} ¿eéÅ¿fñ¿fñÄÏ/// The style to use for [InputDecoration.helperText].
///
/// If [helperStyle] is a [WidgetStateTextStyle], then the effective
/// text style can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿f¶ÅÍ¿hÇ¿hÇÅ∫/// The maximum number of lines the [InputDecoration.helperText] can occupy.
///
/// Defaults to null, which means that the [InputDecoration.helperText] will
/// be limited to a single line with [TextOverflow.ellipsis].
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the helper.
///
/// See also:
///
///  * [errorMaxLines], the equivalent but for the [InputDecoration.errorText]. ¿hïÇÄ¿k¿kÇK/// The style to use for the [InputDecoration.hintText].
///
/// If [hintStyle] is a [WidgetStateTextStyle], then the effective
/// text style can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// Also used for the [InputDecoration.labelText] when the
/// [InputDecoration.labelText] is displayed on top of the input field (i.e.,
/// at the same location on the screen where text may be entered in the input
/// field).
///
/// If null, defaults to a value derived from the base [TextStyle] for the
/// input field and the current [Theme]. ¿kv¿kÄ¿kÄS/// The duration of the [InputDecoration.hintText] fade in and fade out animations. ¿kïV¿k·¿k·8/// {@macro flutter.material.inputDecoration.errorStyle} ¿kÅË¿mÀ¿mÀÅπ/// The maximum number of lines the [InputDecoration.errorText] can occupy.
///
/// Defaults to null, which means that the [InputDecoration.errorText] will be
/// limited to a single line with [TextOverflow.ellipsis].
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the error.
///
/// See also:
///
///  * [helperMaxLines], the equivalent but for the [InputDecoration.helperText]. ¿m›Ä≠¿nu¿nuu/// {@macro flutter.material.inputDecoration.floatingLabelBehavior}
///
/// Defaults to [FloatingLabelBehavior.auto]. ¿nèÄ≤¿o+¿o+x/// {@macro flutter.material.inputDecoration.floatingLabelAlignment}
///
/// Defaults to [FloatingLabelAlignment.start]. ¿oFÄõ¿o⁄¿o⁄ÄÄ/// Whether the input decorator's child is part of a dense form (i.e., uses
/// less vertical space).
///
/// Defaults to false. ¿oÊÇâ¿ra¿raÇH/// The padding for the input decoration's container.
///
/// The decoration's container is the area which is filled if
/// [InputDecoration.filled] is true and bordered per the [border].
/// It's the area adjacent to [InputDecoration.icon] and above the
/// [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// By default the [contentPadding] reflects [isDense] and the type of the
/// [border]. If [isCollapsed] is true then [contentPadding] is
/// [EdgeInsets.zero]. ¿rtÄÂ¿sN¿sNÄ∆/// Whether the decoration is the same size as the input field.
///
/// A collapsed decoration cannot have [InputDecoration.labelText],
/// [InputDecoration.errorText], or an [InputDecoration.icon]. ¿s^Å<¿të¿tëÅ/// The Color to use for the [InputDecoration.icon].
///
/// If [iconColor] is a [WidgetStateColor], then the effective
/// color can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [ColorScheme.primary]. ¿tüÅI¿u›¿u›Å/// The style to use for the [InputDecoration.prefixText].
///
/// If [prefixStyle] is a [WidgetStateTextStyle], then the effective
/// text style can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle]. ¿uÌÅN¿w,¿w,Å#/// The Color to use for the [InputDecoration.prefixIcon].
///
/// If [prefixIconColor] is a [WidgetStateColor], then the effective
/// color can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [ColorScheme.primary]. ¿w@Ç∂¿y·¿y·Çp/// The constraints to use for [InputDecoration.prefixIconConstraints].
///
/// This can be used to modify the [BoxConstraints] surrounding
/// [InputDecoration.prefixIcon].
///
/// This property is particularly useful for getting the decoration's height
/// less than the minimum tappable height (which is 48px when the visual
/// density is set to [VisualDensity.standard]). This can be achieved by
/// setting [isDense] to true and setting the constraints' minimum height
/// and width to a value lower than the minimum tappable size.
///
/// If null, [BoxConstraints] with a minimum width and height of 48px is
/// used. ¿y˚ÅD¿{4¿{4Å/// The style to use for the [InputDecoration.suffixText].
///
/// If [suffixStyle] is a [WidgetStateTextStyle], then the effective
/// color can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle]. ¿{DÅN¿|É¿|ÉÅ#/// The Color to use for the [InputDecoration.suffixIcon].
///
/// If [suffixIconColor] is a [WidgetStateColor], then the effective
/// color can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [ColorScheme.primary]. ¿|óÇ∂¿8¿8Çp/// The constraints to use for [InputDecoration.suffixIconConstraints].
///
/// This can be used to modify the [BoxConstraints] surrounding
/// [InputDecoration.suffixIcon].
///
/// This property is particularly useful for getting the decoration's height
/// less than the minimum tappable height (which is 48px when the visual
/// density is set to [VisualDensity.standard]). This can be achieved by
/// setting [isDense] to true and setting the constraints' minimum height
/// and width to a value lower than the minimum tappable size.
///
/// If null, [BoxConstraints] with a minimum width and height of 48px is
/// used. ¿RÅN¿Äî¿ÄîÅ"/// The style to use for the [InputDecoration.counterText].
///
/// If [counterStyle] is a [WidgetStateTextStyle], then the effective
/// text style can depend on the [WidgetState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [helperStyle]. ¿Ä•Åô¿Ç8¿Ç8Ås/// If true the decoration's container is filled with [fillColor].
///
/// Typically this field set to true if [border] is an
/// [UnderlineInputBorder].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border].
///
/// This property is false by default. ¿ÇCÅa¿Éõ¿ÉõÅ</// The color to fill the decoration's container with, if [filled] is true.
///
/// By default the fillColor is based on the current [Theme].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border]. ¿É©i¿Ñ¿ÑG/// The borderSide of the OutlineInputBorder with `color` and `weight`. ¿Ñs¿Ñu¿ÑuI/// The borderSide of the UnderlineInputBorder with `color` and `weight`. ¿ÑèÅô¿Ü¿ÜÅq/// The color to blend with the decoration's [fillColor] with, if [filled] is
/// true and the container has the input focus.
///
/// By default the [focusColor] is based on the current [Theme].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border]. ¿Ü-Å¿à¿àÅƒ/// The color to blend with the decoration's [fillColor] with, if the
/// decoration is being hovered over by a mouse pointer.
///
/// By default the [hoverColor] is based on the current [Theme].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border].
///
/// The container will be filled when hovered over even if [filled] is false. ¿à"Ö¿ç3¿ç3Ñ—/// The border to display when the [InputDecorator] does not have the focus and
/// is showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿çCÖ¿íQ¿íQÑŒ/// The border to display when the [InputDecorator] has the focus and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿ícÖ¿ód¿ódÑ¡/// The border to display when the [InputDecorator] has the focus and is
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿ó{Ö¿ús¿úsÑ∫/// The border to display when the [InputDecorator] is disabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿úÜÖ¿°¿°Ñª/// The border to display when the [InputDecorator] is enabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null. ¿°ëÜñ¿®!¿®!Ü</// The shape of the border to draw around the decoration's container.
///
/// If [border] is a [MaterialStateUnderlineInputBorder]
/// or [MaterialStateOutlineInputBorder], then the effective border can depend on
/// the [WidgetState.focused] state, i.e. if the [TextField] is focused or not.
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// The border's bounds, i.e. the value of `border.getOuterPath()`, define
/// the area to be filled.
///
/// This property is only used when the appropriate one of [errorBorder],
/// [focusedBorder], [focusedErrorBorder], [disabledBorder], or [enabledBorder]
/// is not specified. This border's [InputBorder.borderSide] property is
/// configured by the InputDecorator, depending on the values of
/// [InputDecoration.errorText], [InputDecoration.enabled],
/// [InputDecorator.isFocused] and the current [Theme].
///
/// Typically one of [UnderlineInputBorder] or [OutlineInputBorder].
/// If null, InputDecorator's default is `const UnderlineInputBorder()`.
///
/// See also:
///
///  * [InputBorder.none], which doesn't draw a border.
///  * [UnderlineInputBorder], which draws a horizontal line at the
///    bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container. ¿®,Å¿©¿©Ä›/// Typically set to true when the [InputDecorator] contains a multiline
/// [TextField] ([TextField.maxLines] is null or > 1) to override the default
/// behavior of aligning the label with the center of the [TextField]. ¿©2Çú¿´√¿´√Ç\/// Defines minimum and maximum sizes for the [InputDecorator].
///
/// Typically the decorator will fill the horizontal space it is given. For
/// larger screens, it may be useful to have the maximum width clamped to
/// a given value so it doesn't fill the whole screen. This property
/// allows you to control how big the decorator will be in its available
/// space.
///
/// If null, then the decorator will fill the available width with
/// a default height based on text size.
///
/// See also:
///
///  * [InputDecoration.constraints], which can override this setting for a
///    given decorator. ¿√ˆÉ¿ƒ
¿ƒ
   ¿√ˆ¿√˜¿´”åÊ¿¨J¿¨J]/// Creates a copy of this object but with the given fields replaced with the
/// new values. #¿¨Y¿¨e¿¨d  ¿¨t¿¨Ä¿¨  ¿¨ó¿¨£¿¨¢  ¿¨≥¿¨π¿¨∏  ¿¨Ã¿¨ÿ¿¨◊  ¿¨Ê¿¨Ò¿¨  ¿≠¿≠¿≠  ¿≠!¿≠'¿≠&  ¿≠9,¿≠Q¿≠P  ¿≠k.¿≠Ñ¿≠É  ¿≠ü¿≠¶¿≠•  ¿≠≤"¿≠«¿≠∆  ¿≠⁄¿≠·¿≠‡  ¿≠Ò¿≠˘¿≠¯  ¿Æ¿Æ¿Æ  ¿Æ#¿Æ+¿Æ*  ¿Æ?%¿ÆP¿ÆO  ¿Æj¿Æv¿Æu  ¿ÆÜ¿Æé¿Æç  ¿Æ¢%¿Æ≥¿Æ≤  ¿ÆÕ¿ÆŸ¿Æÿ  ¿ÆÍ¿ÆÒ¿Æ  ¿Æ¸¿Ø¿Ø  ¿Ø!¿Ø¿Ø  ¿Ø9¿ØF¿ØE  ¿ØX¿Ø`¿Ø_  ¿Øo¿Øw¿Øv  ¿ØÜ¿Øî¿Øì  ¿Ø§¿Ø≤¿Ø±  ¿Øƒ¿Ø“¿Ø—  ¿ØÈ¿Ø˜¿Øˆ  ¿∞
¿∞¿∞  ¿∞*¿∞8¿∞7  ¿∞C¿∞J¿∞I  ¿∞a¿∞r¿∞q   ¿∏Ωã5¿∫ˆ¿∫ˆÇ/// Returns a copy of this InputDecorationTheme where the non-null fields in
/// the given InputDecorationTheme override the corresponding nullable fields
/// in this InputDecorationTheme.
///
/// The non-nullable fields of InputDecorationTheme, such as [floatingLabelBehavior],
/// [isDense], [isCollapsed], [filled], and [alignLabelWithHint] cannot be overridden.
///
/// In other words, the fields of the provided [InputDecorationTheme] are used to
/// fill in the unspecified and nullable fields of this InputDecorationTheme. ¿∫¸*¿ª¿ª   ¿«áØ¿«¿«  ¿«"¿«*¿«)  ¿«¿«¿Œ∏ñç¿Œ…¿Œ…  ¿Œ›&¿Œ˙¿Œ˘  ¿Œ∏¿Œπ¿`D¿`E¿ÂIêÖ¿ÂO¿ÂO  ¿Âä8¿Âê ¿Âê¿Â©  ¿Â™¿Â∞¿ÂØ  ¿Â∫¿Âø¿Â¿¿Â∆¿ÂŸ¿ÂŸ  	¿ÂÂÅ!¿Ê ¿Ê    ¿ÂÂ¿ÂÊ¿Á
Å"¿Á%¿Á%   ¿Á
¿Á¿Ë0ÇT¿ËK¿ËK   ¿Ë0¿Ë1¿ÍàÅ~¿Í£¿Í£   ¿Íà¿Íâ¿Ï
ÅÑ¿Ï%¿Ï%   ¿Ï
¿Ï¿ÌíÅÍ¿Ì©¿Ì©   ¿Ìí¿Ìì¿ÔÄÅ¿Ôó¿Ôó   ¿ÔÄ¿ÔÅ¿ÒtÅˆ¿Òã¿Òã   ¿Òt¿Òu¿ÛnÇ^¿ÛÖ¿ÛÖ   ¿Ûn¿Ûo  ¿ˆ¸ôÀ¿˜¿˜  ¿˜>6¿˜> ¿˜>¿˜W  ¿˜X¿˜^¿˜]  ¿˜l¿˜q¿˜r¿˜x¿˜ã¿˜ã  ¿˜ó>¿˜Æ¿˜Æ ¿˜∏¿˜Ω¿˜æ¿˜¿¿˜»¿˜¡¿˜…¿˜ ¿˜Ÿ=¿˜Ó¿˜Ó ¿˜˚¿¯ ¿¯¿¯¿¯¿¯¿¯¿¯¿˙øÅ"¿˙⁄¿˙⁄   ¿˙ø¿˙¿¿˚ÂÄ˝¿˚¸¿˚¸   ¿˚Â¿˚Ê¿¸ÊÉj¿˝¿˝   ¿¸Ê¿¸Á¿ TÉW¿ p¿ p   ¿ T¿ U¿Ø=¿∆¿∆   ¿Ø¿∞¿Ä¸¿¿   ¿¿Ò¿Å≥¿¿   ¿¿Ò¿ßÉÕ¿¬¿¬   ¿ß¿®¿
xÉ’¿
ì¿
ì   ¿
x¿
y¿QÅÅ¿l¿l   ¿Q¿R¿÷ÄÔ¿Ò¿Ò   ¿÷¿◊   µLÇ<∂é∂éÅ</// Defines **how** the floating label should behave.
///
/// See also:
///
///  * [InputDecoration.floatingLabelBehavior] which defines the behavior for
///    [InputDecoration.label] or [InputDecoration.labelText].
///  * [FloatingLabelAlignment] which defines **where** the floating label
///    should displayed.  ∂®N∂Ò∂ÒF/// The label will always be positioned within the content, or hidden. ∂˚J∑A∑AC/// The label will float when the input is focused, or has content. ∑J;∑∑2/// The label will always float above the content.    æ Äëææ   æææ  æ!æ!æ!  æ*æ*æ*  æ3æ3æ3  æ;æ;æ;  æEæEæE  æO
æOæO  æ]
æ]æ]  ækækæk  æzæzæz  æÖ	æÖæÖ          Ñ◊TÑﬂÑﬂ     Ö,\Ö4Ö4   Ö[ÖfÖe  ÖlÖ|Ö{    Ñ6AÑEÑE Ñ\ÑdÑvÑqÑeÑsÑy4ÑÖÑÖ ÑôÑüÑ†ÑØ%ÑºÑº Ñ–ÜxHÜáÜá Ü¶ÜÆÜøÜªÜØÜΩ   ÄÆ  package:flutter/widgets.dart  Ä·  dropdown.dart  Å  ink_well.dart  Å!  text_field.dart  ÅC  text_form_field.dart îª <ÄÜÄ§Ä•Ä‘ÄÿÄ¯ÅÅ:ÅaÅjÅkÅáÅ©Å™Å‘Å˝Ç$Ç%ÇAÇ]ÇsÇåÇ≠Ç…Ç·ÇˇÉÉ.ÉHÉIÉaÉyÉzÉ†Ñ6ÑyÑØÑ÷Ñ◊Ö,ÖâÖäÖƒÖ«Ü	ÜRÜxÜ¬Ü√áá&áUágáÜá£áæá‘áÌáÛá˜á¯àà0àMàiàÄàôàüà£à§à∞ââ4âVâiâoâõâØâµäääää~ä∞ä±äΩäÏäÓäÔã ãUãÑãÖãëã‚ã‰ãÂå6åhåÄå°åƒåﬁå˛çç6çSçuçòç∏çπç‰éé.éKépéâé≠é◊éÿè<è=èIèrè∏èËêê?êVê¢ê≤ê◊êˇëëëë&ë4ëFëaë~ëßëÀë“ë÷ë◊ë„ííVíçí¿íÁìì;ì?ì@ìLì{ì}ì~ì îî^î~îÆî…î„î˙ïï7ïUïsïyïzïñï≥ï€ïÙññ'ñ(ñ4ñvñxñyñ’óóóDóvóüó¡óÈòòòò/òFòwòòòƒò◊òﬁô2ôZôuôïôƒôÀöörö»öÃöÕöŸöÏõõ,õLõkõÄõÑõÖõëõ∆õÏúúiú{úëú¶ú¨ú·ù9ù?ùtùìùºùÀùÙù¸ûûûûû:ûRûÄû∞ûÃû‚üüü:üSü~üóü üÔ††C†L†S†W†Y†Z†ú†€°°9°P°d°u°ä°†°π°…°›°Ú¢
¢¢¢/¢G¢c¢É¢†¢∑¢“¢Ò££££T£V£W£±£˘§2§c§d§å§ü§±§≤§ˇ•I•J•V•k•Ç•÷•Î¶	¶(¶E¶e¶k¶ó¶õ¶ú¶®¶ª¶÷¶Î¶Ô¶ß	ßßIßQßUßVßbßçß≠ßÆßŸ®®9®n®ñ®∆®©"©#©p©…™™A™ï™ñ™≥™‘™Ú´´J´j´â´»´Í¨	¨¨7¨?¨E¨I¨J¨d¨§¨∫¨—¨Ó≠9≠H≠e≠w≠ô≠¬≠ÌÆÆKÆZÆcÆjÆnÆoÆàÆ∆Æ‹ÆÛØØ.ØTØzØßØ≈ØÌØ˛∞∞0∞S∞}∞™∞€±±±'±0±7±;±<±H±o±í±ß±ø±Ë±˜≤≤%≤-≤3≤4≤W≤m≤Ñ≤´≤∫≤—≤Á≤Ô≤ı≤ˆ≥≥:≥@≥A≥i≥Ü≥å≥ç≥¢≥∂≥“≥Ï¥;¥W¥d¥}¥à¥ë¥ó¥ò¥Æ¥¬µ#µ,µ2µ3µEµIµKµLµÇµÜµîµòµÊ∂%∂p∂â∂¶∂Ô∂¯∂˘∑?∑G∑H∑}∑á∑â∑ä∑—∑Á∑Î∑˘∑˝∏M∏å∏€∏Í∏ıππaπbπûπ±π≤π˛∫∫O∫U∫°∫Ô∫ª6ªÑªÖªëª¥ªµª¡ª‰ººººKº_ºeº£ºßº®ºœºÁΩΩCΩÑΩãΩèΩêΩúΩ√Ω≈Ω∆æ æææ(æ1æ9æCæMæ[æiæxæÉæêæíæìæŒæŸæÌøø%øDøkøîøæøÿøı¿ @¿ @6¿ @Q¿ @r¿ @ñ¿ @•¿ @µ¿ @≈¿ @‘¿ @Â¿ @ˆ¿ A¿ A ¿ A6¿ AH¿ A\¿ Ab¿ Ac¿ Aë¿ A´¿ Aœ¿ Aı¿ B,¿ BH¿ Bk¿ Bå¿ B£¿ Bπ¿ Bﬁ¿ B˝¿ C¿ C*¿ CA¿ CW¿ Co¿ Cá¿ C£¿ Cø¿ C‹¿ Cı¿ D¿ D¿ D¿ D@¿ Db¿ Du¿ D{¿ Dß¿ Dª¿ D¡¿ D‰¿ E¿ EB¿ E~¿ Eæ¿ F ¿ F"¿ FJ¿ FÑ¿ F®¿ FÃ¿ F¸¿ G2¿ GP¿ Gp¿ Gê¿ GÆ¿ G–¿ GÚ¿ H¿ HF¿ Hr¿ Hñ¿ Hº¿ H¿¿ H¡¿ HÕ¿ H¿ I¿ I¿ I8¿ IT¿ I`¿ Io¿ Iá¿ Iî¿ I°¿ I¥¿ I ¿ I‘¿ Iﬂ¿ IÍ¿ IÙ¿ J ¿ J¿ J¿ J,¿ J^¿ Jc¿ Je¿ Jf¿ J≤¿ J˙¿ K2¿ KR¿ Kt¿ Kò¿ K¥¿ K◊¿ Kˆ¿ L¿ L¿ L¿ L>¿ LW¿ Lw¿ Lö¿ L≠¿ LØ¿ L∞¿ Lˆ¿ M ¿ Mi¿ M¿ M§¿ MŒ¿ Mˆ¿ N¿ N.¿ NK¿ Nu¿ Nñ¿ NΩ¿ N‚¿ O¿ O0¿ OK¿ Oj¿ Ok¿ Oæ¿ OÈ¿ P¿ PS¿ Pã¿ På¿ P…¿ Q¿ QG¿ QÑ¿ Q≈¿ R¿ RO¿ Rò¿ R„¿ S&¿ Sm¿ Sn¿ S°¿ S≠¿ S“¿ T ¿ T8¿ TW¿ Tx¿ T£¿ TŒ¿ TÒ¿ U¿ U5¿ UT¿ UÄ¿ U•¿ UŒ¿ U’¿ UŸ¿ U⁄¿ V¿ V"¿ VH¿ Vh¿ Vv¿ V|¿ Vï¿ V¨¿ V∞¿ V±¿ VÊ¿ W¿ W1¿ WT¿ Wb¿ Wh¿ WÑ¿ Wõ¿ Wü¿ W†¿ W“¿ W¿ X¿ X;¿ XI¿ XO¿ Xj¿ XÅ¿ XÖ¿ XÜ¿ Xª¿ Y¿ Ye¿ Yé¿ Y¬¿ YÈ¿ Y˜¿ Y˝¿ ZB¿ Zé¿ Z∞¿ Zæ¿ Zƒ¿ Z‰¿ Z˚¿ Zˇ¿ [ ¿ [$¿ [7¿ [U¿ [t¿ [Ç¿ [à¿ [†¿ [¿¿ [ƒ¿ [≈¿ [Â¿ [˛¿ \¿ \7¿ \E¿ \K¿ \a¿ \x¿ \|¿ \}¿ \°¿ \º¿ \⁄¿ \˘¿ ]¿ ]¿ ]%¿ ]<¿ ]@¿ ]A¿ ]ê¿ ]ù¿ ]º¿ ]ˇ¿ ^¿ ^¿ ^P¿ ^Q¿ ^]¿ ^ù¿ ^µ¿ ^À¿ ^—¿ ^Î¿ _¿ _	¿ _'¿ _C¿ _I¿ _J¿ _c¿ _z¿ _Ä¿ _ò¿ _Ø¿ _«¿ _È¿ `¿ `	¿ `¿ `¿ `)¿ `@¿ `F¿ `d¿ `Ä¿ `Ü¿ `†¿ `∏¿ `æ¿ `€¿ `ˆ¿ `¸¿ a¿ a1¿ aJ¿ aP¿ aT¿ aU¿ aë¿ a¡¿ a˝¿ b-¿ bi¿ bô¿ b€¿ c(¿ cÇ¿ cõ¿ cü¿ c†¿ c¿ dM¿ dì¿ dó¿ dò¿ dÚ¿ dÛ¿ e<¿ e=¿ ed¿ eç¿ eµ¿ e‰¿ eÎ¿ f3¿ fê¿ f∞¿ f∑¿ f∏¿ fˇ¿ g/¿ g6¿ gî¿ gï¿ g÷¿ gÈ¿ gÔ¿ g¿ hC¿ h§¿ hﬂ¿ h˘¿ iY¿ i≤¿ j¿ jh¿ jl¿ jm¿ j∫¿ k¿ kL¿ ko¿ kë¿ kπ¿ kË¿ kÔ¿ k˚¿ l)¿ lw¿ lö¿ lÁ¿ m6¿ mÑ¿ mÕ¿ mÚ¿ m˘¿ m˙¿ n:¿ n;¿ np¿ nó¿ nÚ¿ o:¿ ob¿ oi¿ oµ¿ oÌ¿ oÙ¿ oı¿ p>¿ pg¿ p£¿ p ¿ pÍ¿ q
¿ q¿ q¿ qE¿ qx¿ qò¿ q¿ r¿ rh¿ rì¿ ræ¿ s ¿ sÇ¿ sÉ¿ s€¿ sË¿ s˛¿ t¿ t|¿ tá¿ t§¿ u¿ u
¿ u¿ u3¿ u>¿ uÅ¿ uà¿ u±¿ uÕ¿ uÊ¿ v¿ v1¿ vä¿ v∞¿ v⁄¿ vÁ¿ w¿ wd¿ wm¿ wn¿ w∫¿ w‚¿ x8¿ x¿ x≤¿ xª¿ xÁ¿ xË¿ y)¿ y;¿ ya¿ y≥¿ y–¿ y›¿ yÙ¿ y˙¿ y˚¿ zK¿ zv¿ z∏¿ zÛ¿ {¿ { ¿ {y¿ {Ü¿ {ê¿ {µ¿ {∂¿ {ﬂ¿ |¿ |c¿ |}¿ |ﬁ¿ };¿ }[¿ }∂¿ }∑¿ }˙¿ ~#¿ ~t¿ ~å¿ ~ì¿ ~„¿ ~‰¿ F¿ ®¿ ©¿ ˜¿ Ä	¿ ÄP¿ Ä°¿ Äœ¿ Ä˘¿ Å#¿ Å*¿ Åv¿ Åú¿ Å”¿ Å˛¿ Ç¿ ÇG¿ ÇN¿ ÇO¿ Çà¿ Ç·¿ É¿ É!¿ É3¿ ÉR¿ Él¿ ÉÑ¿ Éû¿ É¿¿ É›¿ É‰¿ Ñ
¿ ÑK¿ Ñe¿ Ñç¿ ÑÎ¿ Ö¿ Ö¿ Ö?¿ Öò¿ Öô¿ ÖÂ¿ Ü¿ Ü<¿ Üõ¿ Üú¿ ÜÎ¿ á<¿ áÖ¿ á“¿ à ¿ àX¿ à¶¿ à˜¿ âF¿ âq¿ â—¿ â“¿ ä ¿ äD¿ äa¿ äu¿ äï¿ ä≤¿ ä“¿ äÛ¿ ã¿ ãj¿ ã∫¿ å¿ å¿ å¿ å<¿ åè¿ åò¿ å”¿ ç#¿ ç^¿ çû¿ çß¿ çÚ¿ éA¿ éÇ¿ é≠¿ è¿ èK¿ èú¿ è¿¿ è‹¿ è˚¿ ê¿ ê5¿ ê>¿ êK¿ ê•¿ ê‚¿ êË¿ êÈ¿ ë¿ ë7¿ ë_¿ ëy¿ ëô¿ ë¯¿ ëˇ¿ í¿ í¿ íR¿ í£¿ íÚ¿ ì<¿ ìå¿ ì›¿ ìÎ¿ î¿ î ¿ î3¿ îC¿ îl¿ îr¿ î¿¿ ï¿ ï¿ ïx¿ ï©¿ ï≠¿ ïÆ¿ ï∫¿ ïÌ¿ ñ¿ ñG¿ ñë¿ ñπ¿ ñﬁ¿ ó'¿ óO¿ ós¿ óä¿ óÆ¿ ó÷¿ ò¿ ò ¿ ò!¿ ò-¿ ò`¿ òÄ¿ ò∫¿ ô¿ ô,¿ ôQ¿ ôö¿ ô¬¿ ôÊ¿ ô˝¿ ö!¿ öI¿ öè¿ öì¿ öî¿ ö—¿ öÍ¿ õ¿ õ-¿ õ?¿ õG¿ õÄ¿ õÜ¿ õô¿ õÊ¿ ú¿ úR¿ úV¿ úW¿ úc¿ úñ¿ úÕ¿ ù¿ ù¿ ù6¿ ù7¿ ùz¿ ù∆¿ ù«¿ û
¿ ûV¿ ûW¿ ûï¿ ûñ¿ ûÍ¿ ü&¿ üc¿ ü¶¿ üß¿ ü˘¿ †R¿ †ô¿ †∏¿ †€¿ †·¿ †‚¿ °¿ °]¿ °^¿ °ô¿ °Ÿ¿ °⁄¿ ¢¿ ¢X¿ ¢c¿ ¢j¿ ¢∏¿ ¢≈¿ ¢È¿ ¢Ò¿ £¿ £0¿ £D¿ £X¿ £p¿ £q¿ £í¿ £Ø¿ £¿ §	¿ §)¿ §D¿ §q¿ §É¿ §ò¿ §∞¿ §»¿ §‡¿ •¿ •O¿ •P¿ •ö¿ •û¿ •ü¿ •´¿ •ﬁ¿ ¶¿ ¶¿ ¶¿ ¶¿ ¶Z¿ ¶É¿ ¶ú¿ ¶Æ¿ ¶¥¿ ¶·¿ ß-¿ ß1¿ ß2¿ ß\¿ ßx¿ ßy¿ ßÖ¿ ß·¿ ®
¿ ®#¿ ®5¿ ®;¿ ®o¿ ®Ç¿ ®∑¿ ®€¿ ®‚¿ ©¿ ©+¿ ©Q¿ ©©¿ ©Û¿ ™N¿ ™ó¿ ™£¿ ™º¿ ™¿¿ ™¡¿ ™Õ¿ ´¿ ´7¿ ´J¿ ´¿ ´£¿ ´™¿ ´Ÿ¿ ´›¿ ´ﬁ¿ ´Í¿ ¨¿ ¨<¿ ¨X¿ ¨å¿ ¨ü¿ ¨—¿ ¨Ú¿ ¨˘¿ ≠(¿ ≠q¿ ≠Ω¿ ≠æ¿ ≠Ò¿ ≠Ú¿ Æ#¿ Æ@¿ Æã¿ Æ≥¿ ÆÁ¿ Æ¿ Ø4¿ Ød¿ ØÜ¿ Øπ¿ Ø¬¿ Ø˚¿ ∞¿ ∞¿ ∞4¿ ∞g¿ ∞∑¿ ∞‘¿ ∞⁄¿ ∞€¿ ∞Û¿ ±#¿ ±a¿ ±É¿ ±å¿ ±™¿ ±∞¿ ±±¿ ≤¿ ≤?¿ ≤£¿ ≥¿ ≥¿ ≥¿ ≥<¿ ≥Z¿ ≥ó¿ ≥»¿ ¥+¿ ¥J¿ ¥}¿ ¥£¿ ¥“¿ ¥ﬂ¿ ¥È¿ µ¿ µS¿ µu¿ µ™¿ µ‘¿ ∂¿ ∂¿ ∂/¿ ∂ä¿ ∂î¿ ∂ö¿ ∂õ¿ ∂»¿ ∂˝¿ ∑(¿ ∑3¿ ∑{¿ ∑Ñ¿ ∑°¿ ∑ß¿ ∑®¿ ∑≈¿ ∑„¿ ∑Ì¿ ∏¿ ∏<¿ ∏å¿ ∏≥¿ ∏ø¿ ∏ﬁ¿ π¿ πP¿ πe¿ π§¿ π≤¿ πæ¿ πﬁ¿ ∫(¿ ∫4¿ ∫S¿ ∫í¿ ∫û¿ ∫º¿ ∫˘¿ ª¿ ª)¿ ªP¿ ªÉ¿ ª®¿ ª¥¿ ª‘¿ º¿ º¿ º"¿ º,¿ ºJ¿ ºT¿ ºx¿ º£¿ º⁄¿ Ω¿ Ω¿ Ω,¿ Ω]¿ Ωä¿ Ωü¿ Ω ¿ Ωÿ¿ Ω‰¿ æ¿ æ9¿ æE¿ æd¿ æè¿ æõ¿ æπ¿ æ„¿ æÔ¿ ø¿ ø:¿ øÜ¿ ø´¿ ø∑¿ ø◊¿ ¿¿ ¿)¿ ¿:¿ ¿D¿ ¿J¿ ¿K¿ ¿d¿ ¿¢¿ ¿‰¿ ¡.¿ ¡y¿ ¡∏¿ ¡˜¿ ¬¿ ¬6¿ ¬a¿ ¬ß¿ √	¿ √¿ √H¿ √â¿ √…¿ √·¿ √Ó¿ √Ô¿ ƒ¿ ƒ`¿ ƒ±¿ ≈¿ ≈0¿ ≈v¿ ≈ó¿ ≈Ì¿ ≈˘¿ ∆,¿ ∆l¿ ∆¨¿ ∆ƒ¿ ∆—¿ ∆Ÿ¿ «$¿ «1¿ «Z¿ «É¿ «â¿ «ç¿ «é¿ «À¿ «Û¿ «˜¿ «¯¿ »¿ »;¿ »`¿ »{¿ »≈¿ »Õ¿ »”¿ »‘¿ »Ï¿ »Ì¿ …¿ …F¿ …¿ …∂¿ …¯¿  B¿  Ç¿  »¿ À¿ ÀL¿ Àt¿ À¥¿ Ã¿ Ã?¿ Ãf¿ ÃØ¿ ÃŒ¿ Õ*¿ Õm¿ Õë¿ Õˆ¿ Œ¿ Œ+¿ ŒJ¿ ŒÑ¿ Œƒ¿ Œ‰¿ œ=¿ œõ¿ œß¿ œ›¿ – ¿ – ¿ –y¿ –⁄¿ –Ê¿ –Ó¿ —C¿ —~¿ —«¿ —ﬂ¿ —¸¿ “-¿ “I¿ “n¿ “à¿ “ò¿ “≤¿ “«¿ “Û¿ “¸¿ ”	¿ ”¿ ”#¿ ”$¿ ”7¿ ”L¿ ”a¿ ”z¿ ”ì¿ ”±¿ ”∆¿ ”Ã¿ ”‡¿ ”˙¿ ‘¿ ‘¿ ‘¿ ‘!¿ ‘e¿ ‘ö¿ ‘⁄¿ ‘Í¿ ’¿ ’F¿ ’L¿ ’}¿ ’Å¿ ’Ç¿ ’é¿ ’ª¿ ’º¿ ’»¿ ÷¿ ÷D¿ ÷ç¿ ÷«¿ ÷˚¿ ◊¿ ◊/¿ ◊p¿ ◊§¿ ◊„¿ ◊Ó¿ ◊˜¿ ÿ
¿ ÿ¿ ÿ'¿ ÿ-¿ ÿ?¿ ÿC¿ ÿD¿ ÿè¿ ÿæ¿ ÿƒ¿ Ÿ¿ Ÿ7¿ Ÿk¿ Ÿü¿ Ÿ‰¿ ⁄9¿ ⁄r¿ ⁄ù¿ ⁄˘¿ €2¿ €]¿ €l¿ €ò¿ €†¿ €¶¿ € ¿ ‹¿ ‹	¿ ‹-¿ ‹f¿ ‹l¿ ‹à¿ ‹å¿ ‹ç¿ ‹ô¿ ‹‡¿ ›/¿ ›3¿ ›5¿ ›6¿ ›ë¿ ›¶¿ ›À¿ ›È¿ ﬁ
¿ ﬁ*¿ ﬁG¿ ﬁb¿ ﬁh¿ ﬁi¿ ﬁâ¿ ﬁÆ¿ ﬁ—¿ ﬁˇ¿ ﬂ¿ ﬂ-¿ ﬂ.¿ ﬂ:¿ ﬂ{¿ ﬂ|¿ ﬂà¿ ﬂ∑¿ ﬂ“¿ ‡¿ ‡2¿ ‡c¿ ‡í¿ ‡≈¿ ‡¯¿ ·3¿ ·n¿ ·´¿ ·‡¿ ‚¿ ‚ ¿ ‚$¿ ‚%¿ ‚1¿ ‚p¿ ‚é¿ ‚¨¿ ‚–¿ ‚Ú¿ „¿ „:¿ „R¿ „É¿ „ä¿ „é¿ „è¿ „õ¿ „Ì¿ „˛¿ ‰¿ ‰8¿ ‰V¿ ‰Ñ¿ ‰®¿ ‰œ¿ ‰”¿ ‰’¿ ‰÷¿ Â¿ Â¿ Â9¿ ÂH¿ ÂX¿ Âh¿ ÂÉ¿ Â£¿ Â©¿ Â™¿ Â»¿ Âﬁ¿ Â¯¿ Ê¿ Ê;¿ Ê^¿ Ê_¿ Êk¿ Êí¿ Êµ¿ Ê…¿ ÊÂ¿ Á	¿ Á)¿ ÁS¿ Áw¿ Áß¿ Á√¿ ÁÍ¿ Ë¿ Ëc¿ Ëp¿ Ë{¿ ËÑ¿ Ëã¿ Ëè¿ Ëë¿ Ëí¿ ËŒ¿ Ë“¿ È¿ Èm¿ È∑¿ Í¿ Í¿ ÍN¿ ÍR¿ Í°¿ Í”¿ Í◊¿ Î(¿ Îs¿ Îè¿ Îì¿ Î°¿ Î•¿ ÎÌ¿ Ï(¿ Ïr¿ Ïè¿ ÏΩ¿ Ïˇ¿ Ì¿ Ì¿ Ìo¿ Ì~¿ Ìó¿ Ì¶¿ Ìƒ¿ Ìÿ¿ ÌÏ¿ Ó¿ Ó$¿ ÓA¿ Ó[¿ Óu¿ ÓÖ¿ Óã¿ Óå¿ Ó»¿ ÓŒ¿ Ô¿ ÔQ¿ Ôu¿ Ôv¿ Ô¬¿ Ô˛¿ ¿ L¿ ~¿ Ñ¿ œ¿ ˚¿ Ò¿ Ò¿ Ò_¿ Ò}¿ Ò~¿ Ò¬¿ ÒÛ¿ Ò˘¿ ÚF¿ Úó¿ ÚÂ¿ Û6¿ ÛÖ¿ Û–¿ Ù¿ Ù=¿ ÙR¿ ÙÄ¿ ÙÅ¿ Ù™¿ Ù∞¿ ı ¿ ı¿ ı¿ ı-¿ ı3¿ ıC¿ ıI¿ ıï¿ ıÊ¿ ıˆ¿ ˆ¿ ˆ¿ ˆW¿ ˆ]¿ ˆú¿ ˆÂ¿ ˜¿ ˜!¿ ˜:¿ ˜S¿ ˜T¿ ˜ü¿ ˜•¿ ˜Ù¿ ¯D¿ ¯P¿ ¯V¿ ¯¢¿ ¯Ò¿ ˘.¿ ˘4¿ ˘M¿ ˘c¿ ˘d¿ ˘å¿ ˘í¿ ˘‚¿ ˘Ó¿ ˘Ù¿ ˙¿ ˙#¿ ˙$¿ ˙T¿ ˙Z¿ ˙ù¿ ˙¥¿ ˙µ¿ ˚¿ ˚!¿ ˚'¿ ˚o¿ ˚™¿ ˚Õ¿ ˚ﬂ¿ ¸
¿ ¸R¿ ¸S¿ ¸_¿ ¸†¿ ¸°¿ ¸Î¿ ˝9¿ ˝Ö¿ ˝ ¿ ˝Ô¿ ˝ı¿ ˛2¿ ˛j¿ ˛Õ¿ ˛Î¿ ˛Ô¿ ˛¿ ˛¸¿ ˇA¿ ˇl¿ ˇ¿¿  ¿ g¿ ø¿¿¿¿	¿b¿ù¿”¿¿E¿ë¿¢¿Í¿Ò¿¿¿z¿¬¿…¿Ë¿Ì¿M¿≠¿Æ¿∫¿œ¿Ê¿Á¿¿c¿à¿â¿Ω¿„¿ˆ¿)¿0¿i¿ò¿¿¿‡¿¿¿¿w¿{¿|¿à¿©¿Ã¿Ì¿Ò¿Ú¿˛¿¿9¿`¿á¿°¿¬¿◊¿€¿‹¿ı¿	¿	B¿	J¿	N¿	O¿	x¿	ú¿	‹¿
¿
¿
¿
F¿
p¿
¬¿¿*¿M¿ô¿ù¿û¿™¿◊¿˜¿&¿I¿O¿P¿v¿œ¿–¿+¿m¿ô¿®¿‘¿‹¿‚¿„¿¿R¿S¿µ¿”¿È¿˛¿¿¿	¿A¿n¿∆¿Â¿
¿¿%¿O¿U¿j¿ñ¿ú¿∫¿‹¿‚¿4¿J¿i¿å¿√¿„¿.¿4¿M¿Q¿R¿û¿√¿Û¿¿¿B¿ñ¿ú¿Ï¿¿Ò¿¿r¿ì¿ô¿Ω¿Ú¿¿¿¿a¿¥¿¿e¿i¿j¿á¿∂¿ﬂ¿¿¿a¿¡¿¿^¿b¿c¿Ä¿Ø¿ÿ¿˚¿¿Z¿∫¿¿W¿[¿\¿ò¿·¿2¿C¿`¿ã¿œ¿”¿‘¿¿]¿^¿®¿Â¿<¿Ä¿ú¿±¿∏¿π¿÷¿'¿ä¿ã¿∑¿ÿ¿ı¿¿)¿-¿.¿w¿¥¿ 
¿ N¿ i¿ ~¿ Ö¿ Ü¿ £¿ Û¿!U¿!V¿!y¿!¶¿!÷¿!˜¿"¿"+¿"/¿"0¿"â¿"À¿"Ô¿#¿#¿#H¿#°¿#ß¿#÷¿$¿$¿$¿$9¿$í¿$ª¿$¯¿%¿%¿%¿%I¿%j¿%ã¿%°¿%ø¿%√¿%ƒ¿&¿&B¿&_¿&t¿&…¿&Õ¿&Œ¿'¿'K¿'g¿'|¿'†¿'§¿'•¿'‡¿(¿(?¿(j¿(í¿(ó¿(ò¿(Ó¿)¿)Z¿)Ä¿)Å¿)ƒ¿)Ÿ¿)ﬂ¿)‡¿*¿*%¿*+¿*,¿*N¿*n¿*é¿*≈¿*Ò¿+¿+¿+$¿+3¿+S¿+±¿+º¿+ƒ¿+—¿+Ô¿,¿,E¿,V¿,Ø¿,Ó¿-¿-1¿-O¿-g¿-Ä¿-ã¿-î¿-ö¿-û¿-ü¿-ƒ¿-≈¿.¿.E¿.h¿.ø¿.≈¿.∆¿/¿/¿/¿/¿/C¿/v¿/†¿/«¿/¯¿0*¿0Ä¿0Õ¿0Œ¿1¿1Z¿1[¿1•¿1◊¿2¿2(¿2_¿2¿2ú¿2¨¿2√¿2·¿3¿30¿3V¿3®¿3 ¿3˘¿4¿4?¿4L¿4g¿4à¿4∑¿5¿58¿5[¿5k¿5ç¿5‰¿6¿6a¿6r¿6x¿6y¿6í¿6±¿7 ¿7¿7q¿7~¿7Ã¿7“¿8	¿8
¿89¿8O¿8f¿8ì¿8»¿8ı¿9¿9¿9¿9.¿9l¿9å¿9∏¿9ﬁ¿:¿:3¿:V¿:|¿:â¿:∆¿:ı¿;>¿;I¿;i¿;ì¿;∑¿;Ë¿<¿<?¿<e¿<x¿<§¿<Ê¿=¿=¿=?¿=£¿=∞¿=ª¿=ƒ¿= ¿=À¿>"¿>y¿>z¿>ú¿>È¿>˜¿? ¿?G¿?ñ¿?ó¿?≤¿?ƒ¿?ﬁ¿@¿@E¿@Z¿@∂¿@”¿A/¿Aa¿Aâ¿Aó¿A´¿A¨¿A«¿AŸ¿AÛ¿B/¿BZ¿Bo¿BÀ¿BË¿CD¿Cv¿Cû¿C¨¿C¿¿C¡¿Cı¿D?¿DE¿DF¿DÜ¿D√¿Dƒ¿D›¿D˝¿E¿E+¿E[¿Ey¿Eø¿EÁ¿FI¿Ft¿Fá¿Fò¿Fß¿F®¿F«¿FÌ¿G ¿G¿G6¿GW¿Gy¿G´¿G“¿GÒ¿H+¿Ho¿Hù¿H€¿I¿I5¿IN¿Ix¿I°¿J¿J*¿JA¿Jm¿Jû¿J ¿K¿Kv¿Kì¿K·¿L¿L2¿Lx¿Lè¿L§¿L∑¿L»¿L◊¿Lÿ¿L˜¿M¿M0¿MF¿Mf¿Má¿M©¿M€¿N¿N!¿N[¿Nü¿NÕ¿O¿OJ¿Oe¿O~¿O®¿O—¿P4¿PZ¿Pq¿Pù¿PŒ¿P˙¿QD¿Q¶¿Q√¿R¿RI¿Rb¿R®¿Rø¿R‘¿RÁ¿R¯¿S¿S¿S5¿SQ¿Sr¿Sõ¿S‘¿T¿T$¿TK¿TÇ¿T±¿T∏¿Tπ¿TŒ¿TÙ¿U¿Ui¿UÑ¿Uù¿Uº¿U—¿UÙ¿V¿V-¿VC¿Vü¿V ¿W¿W¿W¿W¿W¿Wn¿Wñ¿W⁄¿X¿X5¿XV¿X]¿X∏¿XÙ¿Y¿Y'¿YU¿Y¢¿Y≈¿Z¿Z8¿ZG¿ZH¿Zx¿Zû¿Zü¿ZÔ¿[¿[_¿[É¿[÷¿\¿\¿\N¿\v¿\è¿\∑¿\„¿]¿]X¿]©¿]Õ¿^¿^k¿^z¿^«¿_¿_W¿_p¿_ò¿_ƒ¿_Ë¿`7¿`Ü¿`™¿`ı¿aD¿aL¿aY¿az¿aë¿a∑¿a·¿b¿bS¿b§¿b∆¿c¿cb¿ch¿ci¿cñ¿cµ¿c›¿d8¿dj¿dÆ¿dÏ¿e¿e#¿eg¿eå¿e¶¿e÷¿f¿f¿f,¿fB¿fV¿fn¿fÜ¿f¶¿f∆¿fË¿g¿g ¿g)¿gM¿go¿g¢¿gæ¿g›¿g‰¿gÂ¿h¿h[¿hz¿h√¿h…¿hﬂ¿h„¿hÂ¿hÊ¿i,¿iC¿iG¿iñ¿i€¿j(¿j,¿j@¿jê¿j‹¿k)¿kz¿k¿¿kƒ¿l ¿l$¿l|¿lå¿lê¿l§¿lÍ¿m6¿mz¿m~¿m‰¿mË¿n@¿nP¿nT¿nh¿n∑¿o¿oH¿oL¿oÆ¿o≤¿p
¿p¿p¿p2¿p{¿pÃ¿q¿q¿qq¿qu¿qÕ¿q›¿q·¿qı¿rK¿r¢¿r¶¿s¿s¿s¿s3¿sâ¿s€¿t¿t ¿tÖ¿tï¿tô¿tß¿t´¿tÈ¿u¿uN¿us¿uø¿u›¿uË¿v ¿vH¿vu¿v{¿v»¿w¿wf¿wÖ¿wã¿w…¿wœ¿x¿x2¿xA¿xU¿xe¿xy¿xé¿x´¿xº¿x—¿xÁ¿y ¿y¿y"¿y6¿yR¿yi¿yÑ¿yï¿yº¿y˘¿z5¿z;¿z_¿zÅ¿zë¿z•¿z∫¿z“¿zÚ¿{¿{)¿{;¿{T¿{i¿{â¿{ö¿{Ø¿{≈¿{ﬂ¿{Ù¿|¿|¿|0¿|J¿|j¿||¿|í¿|©¿|∫¿|Œ¿|„¿|¯¿}¿}&¿}C¿}\¿}t¿}Ö¿}û¿}º¿}Ÿ¿}Ô¿}˛¿~.¿~o¿~y¿~à¿~≥¿~Ú¿~¸¿¿=¿Ä¿ä¿ô¿À¿Ä¿Ä¿Ä'¿ÄY¿Äú¿Ä¶¿Äµ¿ÄÂ¿Å&¿Å0¿Å1¿Å}¿ÅÉ¿ÅÕ¿Å”¿Ç!¿ÇG¿ÇM¿Ç|¿Çª¿Çﬂ¿Ç˚¿É¿ÉT¿Éê¿Éñ¿É»¿ÉŸ¿Ñ!¿Ñ]¿Ñc¿Ñó¿Ñ´¿Ñ∫¿Ñ÷¿ÑÌ¿Ö¿Ö¿Ö@¿Ö}¿Öπ¿Öø¿Ö„¿Ü¿Ü¿Ü2¿ÜG¿Ü\¿ÜÄ¿Üô¿ÜØ¿Ü√¿Ü‹¿ÜÒ¿á
¿á$¿áF¿á\¿áv¿áë¿áØ¿áƒ¿á›¿á˜¿à¿à,¿àU¿àp¿àä¿à†¿à∫¿à’¿àÙ¿â¿â/¿âI¿âc¿â~¿âù¿â¬¿âŸ¿âÙ¿ä¿ä+¿äH¿äj¿äà¿ä•¿ä»¿ã4¿ãj¿ã÷¿å¿å1¿å2¿å¿åê¿åñ¿å‡¿ç,¿ç?¿çE¿ç}¿çÉ¿çœ¿é¿éQ¿éw¿é}¿éú¿é≤¿é≥¿é“¿éÿ¿è¿èY¿èÖ¿èü¿è†¿è÷¿è‹¿ê¿êb¿êØ¿ê¸¿ëO¿ëü¿ë∂¿ëÀ¿ë—¿í*¿í|¿íÇ¿íò¿íÈ¿ì9¿ì?¿ìü¿ì±¿ì∑¿ìÛ¿î
¿î¿î?¿îE¿î{¿îÅ¿îŒ¿ï
¿ï%¿ï&¿ïd¿ï¥¿ïŒ¿ï‘¿ñ¿ñ_¿ñã¿ñë¿ñ‰¿ó+¿ó1¿ó~¿ó©¿óØ¿óÓ¿ò4¿òu¿ò{¿òë¿òﬁ¿ô¿ô¿ô\¿ô®¿ôª¿ô¡¿ö-¿ö?¿öT¿ös¿öt¿ö∫¿õ¿õ?¿õE¿õí¿õº¿õ¬¿ú¿úU¿úÅ¿úá¿ú∞¿ú∂¿úı¿ù;¿ù|¿ùÇ¿ùŸ¿ùÛ¿ù˘¿û¿û\¿ûÉ¿ûâ¿ûÃ¿ü¿üA¿üG¿üº¿üŒ¿ü„¿†
¿†¿†P¿†V¿†®¿†˙¿°*¿°0¿°F¿°ò¿°„¿°È¿¢J¿¢\¿¢b¿¢†¿¢∏¿¢π¿£	¿£.¿£4¿£Ç¿£Õ¿§ ¿§¿§Z¿§`¿§û¿§∫¿§ª¿§Ë¿§Ó¿•5¿•z¿•¶¿•∆¿•«¿¶¿¶¿¶Z¿¶†¿¶¿ßA¿ßw¿ß}¿ßÃ¿®¿®O¿®U¿®ó¿®Œ¿®‘¿®‰¿®Í¿©,¿©I¿©J¿©â¿©è¿©‡¿™.¿™}¿™£¿™Ω¿™æ¿™Ú¿™¯¿´:¿´P¿´Q¿´|¿´Ç¿´«¿¨¿¨8¿¨>¿¨á¿¨‘¿≠¿≠¿≠a¿≠å¿≠™¿≠´¿≠⁄¿≠‡¿Æ)¿ÆT¿Æ~¿Æ¿Æº¿Æ¬¿Ø¿Ø¿ØI¿Øû¿Ø„¿Ø˛¿Øˇ¿∞E¿∞K¿∞è¿∞⁄¿∞˛¿∞ˇ¿±P¿±õ¿±°¿±È¿≤¿≤%¿≤=¿≤L¿≤q¿≤¨¿≤Ê¿≤Í¿≥¿≥¿≥[¿≥§¿≥™¿≥Ú¿¥(¿¥.¿¥F¿¥e¿¥f¿¥∫¿¥¿¿µ¿µ¿µ[¿µr¿µs¿µº¿µ¬¿∂¿∂!¿∂'¿∂q¿∂ß¿∂≠¿∂˙¿∑ ¿∑<¿∑W¿∑X¿∑ñ¿∑“¿∑ÿ¿∏%¿∏P¿∏V¿∏ó¿∏ﬂ¿π.¿πw¿πÖ¿πö¿ππ¿π∫¿π¯¿π˛¿∫K¿∫ë¿∫·¿ª2¿ªh¿ªn¿ªª¿º	¿º=¿ºC¿ºÖ¿ºª¿º¡¿º—¿º◊¿Ω¿Ω7¿Ω8¿ΩÅ¿Ωπ¿Ωø¿æ¿æ_¿æã¿æë¿æ‚¿ø¿ø¿ø`¿øÖ¿øö¿ø†¿øÍ¿ø¿¿ ¿¿¿¿S¿¿q¿¿ß¿¿®¿¿Ú¿¡2¿¡8¿¡á¿¡—¿¬¿¬0¿¬6¿¬á¿¬ü¿¬¥¿¬∫¿√¿√¿√¿√!¿√r¿√É¿√ª¿√º¿ƒ¿ƒ%¿ƒ+¿ƒD¿ƒ[¿ƒ\¿ƒî¿ƒö¿ƒ‡¿ƒÊ¿≈3¿≈C¿≈I¿≈î¿≈ö¿≈«¿≈Õ¿∆¿∆j¿∆π¿∆ø¿«¿«^¿«®¿«Æ¿«˘¿»;¿»Ñ¿»ä¿»∑¿»Ω¿…¿…Z¿…´¿…±¿ ¿ P¿ ú¿ ¢¿ Ì¿À0¿Ày¿À•¿À¶¿ÀË¿ÀÓ¿Ã<¿Ãb¿Ãh¿Ã∑¿Ã“¿Ã”¿Õ¿Õk¿Õq¿Õ¬¿Œ¿Œ!¿Œ'¿Œu¿Œø¿œ¿œ^¿œ©¿œº¿œ¬¿œ–¿œÎ¿–+¿–e¿–m¿–w¿–}¿–√¿–…¿—%¿—;¿—A¿—W¿—∞¿—‡¿—Ê¿“L¿“^¿“d¿“t¿“z¿“√¿”¿”A¿”Ñ¿”—¿‘¿‘¿‘¿‘J¿‘P¿‘†¿‘¶¿‘ı¿’@¿’ã¿’◊¿÷¿÷¿÷4¿÷Ç¿÷—¿÷◊¿◊¿◊C¿◊I¿◊î¿◊†¿◊¶¿ÿ¿ÿ*¿ÿY¿ÿZ¿ÿó¿ÿù¿ÿÈ¿Ÿ7¿ŸÇ¿Ÿí¿Ÿò¿Ÿ÷¿Ÿ‹¿⁄&¿⁄,¿⁄<¿⁄B¿⁄~¿⁄ñ¿⁄ó¿⁄Ÿ¿⁄ﬂ¿€0¿€s¿€y¿€»¿‹¿‹¿‹Z¿‹`¿‹p¿‹v¿‹∂¿‹“¿‹”¿› ¿›¿›M¿›í¿›æ¿›ƒ¿›¿›ˆ¿ﬁ¿ﬁ¿ﬁM¿ﬁm¿ﬁn¿ﬁï¿ﬁõ¿ﬁπ¿ﬁø¿ﬂ¿ﬂF¿ﬂr¿ﬂí¿ﬂì¿ﬂ‹¿‡)¿‡/¿‡Ä¿‡Ã¿‡ﬂ¿‡Â¿·3¿·}¿·Ã¿‚¿‚f¿‚}¿‚É¿‚ë¿‚¨¿‚Í¿„#¿„+¿„5¿„;¿„á¿„À¿‰	¿‰/¿‰5¿‰ë¿‰ß¿‰≠¿‰√¿Â¿ÂL¿ÂR¿Â∏¿Â ¿Â–¿Â‡¿ÂÊ¿Ê/¿Êx¿Ê≠¿ÊÔ¿Á<¿Ám¿Áâ¿Áä¿Á∆¿ÁÃ¿Ë¿Ëm¿Ëπ¿Ëø¿Ë˝¿È¿ÈN¿ÈT¿Èd¿Èj¿È•¿ÈΩ¿Èæ¿Èˇ¿Í¿ÍV¿Íô¿Íü¿ÍÓ¿Î,¿Î2¿ÎÅ¿Îá¿Îó¿Îù¿Î‹¿Î¯¿Î˘¿Ï&¿Ï,¿Ïx¿Ïø¿Ï‰¿ÏÍ¿Ì¿Ì¿Ì,¿Ì2¿Ìr¿Ìí¿Ìì¿ÌΩ¿Ì√¿Ì·¿ÌÁ¿Ó.¿Ón¿Óö¿Ó∫¿Óª¿ÓÊ¿ÓÏ¿Ô<¿ÔB¿Ôë¿Ô‹¿'¿s¿¥¿∫¿Ò¿Ò¿Ò¿Ò/¿Ò}¿ÒÃ¿Ò“¿Ú¿Ú>¿ÚD¿Úè¿Úõ¿Ú°¿Û¿Û%¿ÛT¿ÛU¿Ûó¿Ûù¿ÛÍ¿Ûˆ¿Û¸¿ÙK¿ÙQ¿Ùû¿ÙÀ¿ÙË¿ÙÈ¿ı7¿ıÄ¿ıè¿ı®¿ı©¿ı◊¿ı›¿ˆ%¿ˆj¿ˆñ¿ˆú¿ˆ ¿ˆÎ¿ˆÏ¿˜1¿˜7¿˜à¿˜©¿˜Ø¿¯ ¿¯¿¯O¿¯†¿¯¿˘=¿˘R¿˘X¿˘Å¿˘ó¿˘ò¿˘◊¿˘›¿˙.¿˙O¿˙U¿˙é¿˙∂¿˙º¿˚¿˚¿˚¿˚m¿˚s¿˚≠¿˚÷¿˚‹¿¸*¿¸r¿¸∂¿¸¿¸ˆ¿˝<¿˝W¿˝X¿˝£¿˝À¿˝—¿˛¿˛E¿˛K¿˛ö¿˛Õ¿˛”¿ˇ¿ˇ¿ˇb¿ˇ}¿ˇ~¿ˇ–¿ˇÎ¿ˇÒ¿ ¿ ¿ Z¿ r¿ Œ¿!¿v¿∂¿˛¿A¿{¿«¿˘¿J¿Ä¿Õ¿ˇ¿J¿|¿û¿ü¿Ó¿¿¿¿"¿u¿ç¿È¿<¿ë¿—¿¿\¿ñ¿·¿¿h¿û¿Î¿	¿	h¿	ö¿	æ¿	ø¿

¿
"¿
(¿
8¿
>¿
ë¿
©¿¿X¿≠¿Ì¿5¿x¿≤¿˝¿3¿¿±¿˛¿0¿{¿≠¿÷¿◊¿$¿<¿B¿R¿X¿∞¿¿_¿¥¿Ù¿<¿¿π¿¿:¿Ü¿∏¿	¿?¿ä¿º¿·¿‚¿.¿F¿L¿\¿b¿∫¿¿i¿æ¿˛¿F¿â¿√¿¿D¿ê¿¬¿¿I¿ñ¿»¿Ï¿Ì¿6¿<¿í¿±¿“¿¿¿0¿6¿ä¿€¿-¿{¿Ÿ¿ﬂ¿+¿o¿Ø¿Ù¿¿¿l¿â¿è¿€¿-¿x¿ª¿˘¿3¿9¿Ä¿À¿—¿·¿Á¿ !¿ g¿ õ¿ „¿!&¿!C¿!D¿!π¿!ø¿!Á¿!˝¿!˛¿",¿"2¿"J¿"P¿"ö¿"ø¿"¿¿#¿#[¿#§¿#™¿#√¿#Â¿#Ê¿$(¿$.¿$|¿$»¿%¿%Z¿%g¿%m¿%∞¿%Ô¿&3¿&^¿&É¿&Ñ¿&—¿&Í¿'¿'¿'/¿'B¿'Y¿'t¿'ó¿'´¿'√¿'ﬂ¿'¯¿(¿( ¿(:¿(`¿(Ä¿(ó¿(µ¿(—¿(‰¿(˚¿)¿).¿)`¿)î¿)´¿)æ¿)Ê¿)˛¿*¿**¿*U¿*q¿*ç¿*•¿*π¿*—¿*Ì¿+	¿+4¿+I¿+b¿+¿+ë¿+ß¿+æ¿+’¿+Û¿,¿,8¿,Y¿,y¿,í¿,•¿,∆¿,‰¿-¿-¿-(¿-G¿-u¿-ó¿-≈¿-ˆ¿.?¿.d¿.ï¿.…¿/¿/1¿/P¿/~¿/ƒ¿/˚¿0>¿0á¿0 ¿0Ï¿1¿1K¿1Ö¿1◊¿2,¿2`¿2à¿2≈¿2ˆ¿3¿3L¿3Ä¿3¿¿4¿4C¿4h¿4ô¿4Õ¿5¿5_¿5á¿5ª¿5Ú¿6¿6E¿6v¿6ß¿6€¿7¿7^¿7õ¿7’¿7˙¿8"¿8n¿8∑¿8Î¿8Ú¿8ˆ¿8˜¿9C¿9á¿9ç¿9ÿ¿:¿:F¿:[¿:ç¿:◊¿;¿;J¿;y¿;Ω¿;Ô¿<*¿<}¿<”¿<¸¿=:¿=o¿=û¿=”¿>¿>g¿>ú¿>›¿?0¿?h¿?é¿?Ω¿?Ô¿@!¿@V¿@ë¿@€¿A¿AT¿Az¿Aƒ¿A˘¿B ¿B¿B¿B¿B4¿BV¿Bi¿Bo¿Bõ¿BØ¿Bµ¿B‹¿B˙¿C"¿CB¿Cj¿Cî¿CŒ¿C¿D¿DF¿Dx¿Dû¿Dº¿D‰¿E¿EJ¿EÄ¿E∫¿E¿F¿F8¿Fb¿Fí¿F“¿G¿G8¿Gj¿Gñ¿G¿¿GÙ¿H¿H@¿Hl¿H¨¿H÷¿I
¿I,¿IV¿IÇ¿I¬¿IÊ¿J¿J@¿Jb¿Jä¿J¥¿Jﬁ¿K
¿K:¿Kt¿K¶¿K÷¿K¯¿L¿LX¿Lí¿Lº¿L¿¿L¡¿LÕ¿L‚¿M¿M¿M+¿M8¿MI¿Mc¿Mu¿MÉ¿Mï¿M®¿Mæ¿MŒ¿M⁄¿MÎ¿N¿N¿N0¿NJ¿Nb¿No¿NÄ¿Ní¿Nß¿Nƒ¿N‚¿NÒ¿O¿O¿O(¿O9¿OK¿O]¿Oo¿OÜ¿Oî¿O¶¿Oπ¿O÷¿OË¿Oˇ¿P¿P¿P2¿PO¿P^¿Pq¿PÖ¿Pò¿P≠¿P«¿P›¿PÚ¿Q ¿Q¿Q*¿QD¿QW¿Q^¿QÅ¿QÖ¿QÜ¿Qí¿Q®¿Q◊¿Q˛¿R4¿R^¿Rñ¿RÈ¿S¿SS¿Sö¿Sœ¿Sˆ¿T7¿TÑ¿T¿¿T¯¿U$¿U\¿Uó¿U€¿V5¿Ví¿V√¿W¿WE¿W~¿W∆¿WÛ¿X,¿Xh¿X¬¿X˚¿YC¿Yp¿Y©¿YÂ¿Z?¿Zo¿Z´¿ZÍ¿[¿[K¿[Ñ¿[Ω¿[˘¿\;¿\å¿\—¿]¿]@¿]f¿]∫¿^¿^G¿^N¿^á¿^ã¿^ç¿^é¿^«¿^À¿_¿_b¿_Æ¿_æ¿_¬¿`¿`D¿`O¿`Ä¿`¿¿`Û¿a¿a'¿aD¿aZ¿as¿aá¿a¢¿a∑¿aœ¿b¿bL¿bf¿b¿bù¿b±¿b«¿b·¿c¿c¿c1¿cQ¿ch¿cÅ¿cï¿cµ¿cÕ¿c‚¿c˜¿d¿d%¿dB¿d[¿ds¿dÑ¿d©¿dø¿d≈¿d∆¿e¿e ¿e!¿ed¿eã¿eå¿e≈¿eÀ¿f¿fW¿fÉ¿f£¿f§¿fÛ¿f˘¿gH¿gà¿gé¿g–¿h¿h¿h¿h#¿hu¿hí¿hì¿hŒ¿h‘¿i¿i^¿iä¿iê¿iÕ¿j¿jm¿j{¿jÅ¿jŒ¿j˘¿k¿k¿kn¿kí¿kì¿kŒ¿kÌ¿kÓ¿l<¿lB¿lì¿l–¿l÷¿m¿mN¿mT¿md¿mj¿mæ¿m⁄¿m€¿n!¿n'¿nW¿nå¿nç¿n‘¿n⁄¿o¿oC¿oD¿oí¿oÆ¿o¥¿oÕ¿o„¿o‰¿p¿p"¿pb¿p®¿pÌ¿q-¿qr¿qó¿qù¿qÍ¿r,¿rE¿rq¿rr¿r¥¿r∫¿s ¿sA¿s[¿s\¿sì¿sô¿s⁄¿t¿tF¿tL¿tÇ¿tú¿tù¿t⁄¿t‡¿u'¿ul¿uò¿uû¿u ¿uÍ¿uÎ¿v(¿v.¿vu¿vµ¿v·¿vÁ¿w¿w=¿w>¿wà¿wé¿w–¿wÙ¿w˙¿xI¿xî¿xﬂ¿y+¿yl¿yr¿yΩ¿y…¿y¯¿y˘¿z6¿z<¿zÉ¿z√¿zÔ¿zı¿{!¿{A¿{B¿{¿{Ö¿{Ã¿|¿|8¿|>¿|t¿|î¿|ï¿|ﬂ¿|Â¿}'¿}K¿}Q¿}†¿}Î¿~6¿~Ç¿~√¿~…¿¿ ¿O¿P¿é¿î¿‹¿Ä!¿ÄM¿ÄS¿ÄÅ¿Ä¢¿Ä£¿ÄË¿ÄÓ¿Å'¿ÅE¿ÅK¿Åë¿Å“¿Å¸¿Ç¿Ç+¿Ç@¿ÇA¿Çè¿Çï¿Ç’¿Ç€¿É!¿Éb¿Éå¿É¶¿Éß¿ÉÒ¿Ñ¿Ñ¿Ña¿Ñå¿Ñç¿Ñ›¿Ö¿Ö¿ÖX¿Ö^¿Ö§¿ÖÂ¿Ü¿Ü*¿Ü+¿Üs¿ÜÆ¿Ü¥¿Ü˜¿Ü˝¿áC¿áÑ¿áÆ¿á¥¿à¿à¿à ¿àr¿àç¿àì¿à£¿à©¿à¸¿â¿âp¿â√¿ä¿äX¿ä†¿ä„¿ã¿ãi¿ãõ¿ãÏ¿å"¿åo¿å°¿åÏ¿ç¿ç@¿çA¿çê¿ç®¿çÆ¿çæ¿çƒ¿é¿é/¿éã¿éﬁ¿è3¿ès¿èª¿è˛¿ê8¿êÉ¿êπ¿ë
¿ë@¿ëç¿ëø¿í
¿í<¿í`¿ía¿í¨¿íƒ¿í ¿í⁄¿í‡¿ì3¿ìK¿ìß¿ì˙¿îO¿îè¿î◊¿ï¿ïT¿ïü¿ï’¿ñ!¿ñS¿ñ†¿ñ“¿ó¿óO¿óx¿óy¿ó∆¿óﬁ¿ó‰¿óÙ¿ó˙¿òR¿òÆ¿ô¿ôV¿ôñ¿ôﬁ¿ö!¿ö[¿ö¶¿ö‹¿õ(¿õZ¿õ´¿õ·¿ú,¿ú^¿úÉ¿úÑ¿ú–¿úË¿úÓ¿ú˛¿ù¿ù\¿ù∏¿û¿û`¿û†¿ûË¿ü+¿üe¿ü∞¿üÊ¿†2¿†d¿†µ¿†Î¿°8¿°j¿°é¿°è¿°ÿ¿°ﬁ¿¢¿¢m¿¢ø¿¢≈¿£¿£U¿£ï¿£⁄¿£ˇ¿§¿§R¿§o¿§u¿§¡¿•¿•^¿•°¿•ﬂ¿¶¿¶¿¶f¿¶±¿¶∑¿¶«¿¶Õ¿ß¿ßM¿ßÅ¿ß…¿®¿®)¿®*¿®u¿®≈¿©¿©/¿©0¿©r¿©x¿©∆¿™¿™Y¿™§¿™±¿™∑¿™¸¿´'¿´-¿´=¿´C¿´ë¿´´¿´–¿´—¿¨!¿¨3¿¨U¿¨p¿¨ì¿¨Ø¿¨»¿¨‚¿≠¿≠¿≠5¿≠g¿≠õ¿≠Æ¿≠÷¿≠Ì¿Æ¿Æ¿Æ;¿Æf¿ÆÇ¿Æû¿Æ…¿ÆÊ¿Æ¯¿Ø¿Ø5¿ØT¿Øk¿ØÇ¿Ø†¿Ø¿¿ØÂ¿∞¿∞&¿∞?¿∞]¿∞~¿∞Ö¿∞¶¿∞◊¿± ¿±T¿±ë¿±ø¿≤¿≤3¿≤m¿≤ø¿≥¿≥<¿≥y¿≥ß¿≥€¿¥¿¥O¿¥°¿¥’¿µ¿µg¿µû¿µ√¿µÒ¿∂C¿∂}¿∂Æ¿∂ﬂ¿∑¿∑M¿∑ñ¿∑”¿∏¿∏2¿∏{¿∏Ø¿∏∂¿∏∫¿∏ª¿π
¿πZ¿π~¿πÑ¿π‹¿∫5¿∫;¿∫è¿∫ﬂ¿ª*¿ªR¿ªe¿ªk¿ªÄ¿ª¡¿º¿º^¿º´¿ºÈ¿Ω<¿Ω}¿Ω«¿æ¿æR¿æñ¿æÊ¿øH¿øå¿ø‹¿¿>¿¿Ö¿¿√¿¡%¿¡o¿¡∞¿¡Ò¿¬5¿¬¿¬ÿ¿√%¿√o¿√§¿√Ë¿√Ô¿√Û¿√Ù¿ƒ ¿ƒ#¿ƒ3¿ƒK¿ƒ\¿ƒp¿ƒ¿ƒè¿ƒ¢¿ƒΩ¿ƒŸ¿ƒÊ¿ƒ˙¿≈¿≈¿≈+¿≈@¿≈[¿≈l¿≈Å¿≈ú¿≈≠¿≈¡¿≈œ¿≈‡¿≈˝¿∆¿∆$¿∆6¿∆I¿∆^¿∆x¿∆é¿∆£¿∆±¿∆À¿∆ﬁ¿∆ˆ¿∆˝¿«¿«¿«¿«2¿«T¿«g¿«m¿«ô¿«≠¿«≥¿«ﬂ¿»	¿»C¿»o¿»°¿»…¿»ˇ¿…)¿…Y¿…}¿…Ø¿…€¿ ¿ /¿ c¿ £¿ œ¿À¿ÀC¿Àq¿À±¿ÀÛ¿Ã¿Ã=¿Ã}¿Ã≠¿Ã◊¿Õ¿Õ-¿Õ]¿Õó¿Õ…¿Õ˘¿Œ¿ŒU¿ŒÅ¿Œ±¿Œµ¿Œ∂¿Œ¬¿œ¿œ2¿œx¿œå¿œ≤¿œ»¿œ‹¿–¿–¿–¿–/¿–U¿–s¿–è¿–∆¿–œ¿–÷¿–Í¿—¿—'¿—<¿—l¿—u¿—|¿—ê¿—¿—˜¿“¿“o¿“v¿“ä¿“Ø¿“À¿“Â¿”¿”#¿”*¿”>¿”d¿”z¿”é¿”Ω¿”∆¿”Õ¿”·¿‘>¿‘E¿‘Y¿‘ã¿‘¨¿‘À¿’¿’¿’¿’)¿’\¿’~¿’û¿’Ÿ¿’‚¿’È¿’˝¿÷V¿÷]¿÷q¿÷†¿÷∫¿÷“¿◊¿◊¿◊¿◊)¿◊é¿◊ï¿◊©¿ÿ	¿ÿ¿ÿ$¿ÿF¿ÿa¿ÿz¿ÿÆ¿ÿ∑¿ÿæ¿ÿ“¿ÿ˝¿Ÿ¿Ÿ=¿Ÿw¿ŸÄ¿Ÿá¿Ÿõ¿Ÿ¡¿Ÿÿ¿ŸÌ¿⁄¿⁄&¿⁄-¿⁄A¿⁄c¿⁄~¿⁄ó¿⁄À¿⁄‘¿⁄€¿⁄Ô¿€¿€;¿€Z¿€î¿€ù¿€§¿€∏¿€ﬁ¿€ı¿‹
¿‹:¿‹C¿‹J¿‹^¿‹Ñ¿‹ú¿‹≤¿‹„¿‹Ï¿‹Û¿›W¿›∏¿›Ã¿›Û¿ﬁ¿ﬁ3¿ﬁm¿ﬁv¿ﬁ}¿ﬁë¿ﬁ∏¿ﬁ—¿ﬁË¿ﬂ¿ﬂ#¿ﬂ*¿ﬂé¿ﬂÚ¿‡¿‡.¿‡E¿‡Z¿‡ä¿‡ì¿‡ö¿‡Æ¿‡÷¿‡Ô¿·¿·=¿·F¿·M¿·a¿·â¿·ß¿·√¿·˙¿‚¿‚
¿‚¿‚F¿‚`¿‚x¿‚´¿‚¥¿‚ª¿‚œ¿‚˜¿„¿„'¿„Y¿„b¿„i¿„}¿„⁄¿„·¿„ı¿‰¿‰4¿‰P¿‰á¿‰ê¿‰ó¿‰´¿‰÷¿‰Ì¿Â¿Â2¿Â;¿ÂB¿ÂF¿ÂH¿ÂI¿Âà¿Â√¿Âƒ¿Â‚¿Â„¿ÂÔ¿ÊN¿ÊÅ¿Ê¡¿Ê«¿Á¿Á¿Á¿Á¿Át¿Áß¿ÁÁ¿ÁÌ¿Ë'¿Ë-¿Ë.¿Ë:¿Ëa¿Ë®¿Ëﬂ¿È#¿È-¿Èa¿È©¿È≥¿ÈÈ¿Í3¿Í=¿Í{¿ÍÖ¿ÍÜ¿Íí¿ÍÛ¿Î&¿ÎY¿Î™¿Î∞¿Î±¿Ï¿Ï¿Ï¿Ï¿Ït¿Ïß¿Ï⁄¿Ì+¿Ì1¿Ìâ¿Ìè¿Ìê¿Ìú¿ÌÛ¿ÓP¿Óó¿Óﬂ¿Ô'¿Ôp¿Ôw¿Ô}¿Ô~¿Ôä¿Ô·¿?¿m¿s¿•¿Ÿ¿ﬂ¿Ò¿Ò:¿Òd¿Òk¿Òq¿Òr¿Ò~¿Ò€¿Ú9¿Úg¿Úm¿Úü¿Ú”¿ÚŸ¿Û¿Û4¿Û^¿Ûe¿Ûk¿Ûl¿Ûx¿Û’¿Ù3¿Ùa¿Ùg¿Ùó¿Ù…¿Ùœ¿ı¿ı5¿ı;¿ım¿ıñ¿ı¿¿ı«¿ıÕ¿ıœ¿ı–¿ˆ¿ˆ¿ˆI¿ˆç¿ˆµ¿ˆË¿ˆÈ¿ˆ¸¿˜;¿˜f¿˜u¿˜v¿˜î¿˜ï¿˜◊¿¯¿¯¿¯k¿¯¿¿˘¿˘o¿˘«¿˘˘¿˙O¿˙É¿˙º¿˙Ω¿˙…¿˚(¿˚[¿˚ü¿˚•¿˚‹¿˚‚¿˚„¿˚Ô¿¸F¿¸y¿¸´¿¸±¿¸›¿¸„¿¸‰¿¸¿˝]¿˝ê¿˝’¿˝€¿˛¿˛?¿˛|¿˛Ñ¿˛∏¿˛Ù¿˛¸¿ˇ+¿ˇ1¿ˇc¿ˇ†¿ˇ¶¿ˇÿ¿ ¿ ¿ I¿ Q¿ R¿ ^¿ √¿ ˆ¿;¿A¿q¿•¿‚¿Í¿¿Z¿b¿ë¿ó¿…¿¿¿>¿q¿w¿¶¿¨¿≠¿π¿Ì¿Ó¿˙¿W¿ä¿º¿¬¿Á¿Ì¿Ó¿˙¿W¿ä¿º¿¬¿Ú¿&¿O¿W¿s¿y¿û¿§¿•¿±¿¿\¿è¿‹¿‚¿¿F¿¿á¿ª¿ˇ¿	¿	>¿	D¿	v¿	Ø¿	µ¿	Á¿
)¿
/¿
o¿
u¿
v¿
Ç¿
Í¿5¿h¿µ¿ª¿Î¿¿X¿`¿î¿ÿ¿‡¿¿¿O¿à¿é¿¿¿¿¿H¿N¿O¿[¿º¿¿:¿á¿ç¿Õ¿”¿‘¿‡¿@¿ã¿¿¿∆¿»¿⁄¿€¿   _kTransitionDuration_kTransitionCurve_kFinalLabelScale_kHintFadeTransitionDuration_InputBorderGap_InputBorderTween_InputBorderPainter_BorderContainer_BorderContainerState_HelperError_HelperErrorStateFloatingLabelBehaviorFloatingLabelAlignment_DecorationSlot_Decoration_RenderDecorationLayout_RenderDecoration
_Decorator
_AffixTextInputDecorator_InputDecoratorStateInputDecorationInputDecorationTheme_InputDecoratorDefaultsM2_InputDecoratorDefaultsM31flutter.material.InputDecorator.textAlignVerticalÇ?How the text should be aligned vertically.

Determines the alignment of the baseline within the available space of
the input (typically a TextField). For example, TextAlignVertical.top will
place the baseline such that the text, and any attached decoration like
prefix and suffix, is as close to the top of the input as possible without
overflowing. The heights of the prefix and suffix are similarly included
for other alignment values. If the height is greater than the height
available, then the prefix and suffix will be allowed to overflow first
before the text scrolls.&flutter.material.inputDecoration.labelÅ|When the input field is empty and unfocused, the label is displayed on
top of the input field (i.e., at the same location on the screen where
text may be entered in the input field). When the input field receives
focus (or if the field is non-empty), depending on [floatingLabelAlignment],
the label moves above, either vertically adjacent to, or to the center of
the input field.+flutter.material.inputDecoration.labelStyleÑ?The style to use for [InputDecoration.labelText] when the label is on top
of the input field.

If [labelStyle] is a [WidgetStateTextStyle], then the effective
text style can depend on the [WidgetState.focused] state, i.e.
if the [TextField] is focused or not.

When the [InputDecoration.labelText] is above (i.e., vertically adjacent to)
the input field, the text uses the [floatingLabelStyle] instead.

If null, defaults to a value derived from the base [TextStyle] for the
input field and the current [Theme].

Specifying this style will override the default behavior
of [InputDecoration] that changes the color of the label to the
[InputDecoration.errorStyle] color or [ColorScheme.error].

{@tool dartpad}
It's possible to override the label style for just the error state, or
just the default state, or both.

In this example the [labelStyle] is specified with a [WidgetStateProperty]
which resolves to a text style whose color depends on the decorator's
error state.

** See code in examples/api/lib/material/input_decorator/input_decoration.label_style_error.0.dart **
{@end-tool}3flutter.material.inputDecoration.floatingLabelStyleÑmThe style to use for [InputDecoration.labelText] when the label is
above (i.e., vertically adjacent to) the input field.

When the [InputDecoration.labelText] is on top of the input field, the
text uses the [labelStyle] instead.

If [floatingLabelStyle] is a [WidgetStateTextStyle], then the effective
text style can depend on the [WidgetState.focused] state, i.e.
if the [TextField] is focused or not.

If null, defaults to [labelStyle].

Specifying this style will override the default behavior
of [InputDecoration] that changes the color of the label to the
[InputDecoration.errorStyle] color or [ColorScheme.error].

When the input field receives focus, the font size of [InputDecoration.label] is
scaled down by 75%.

{@tool dartpad}
It's possible to override the label style for just the error state, or
just the default state, or both.

In this example the [floatingLabelStyle] is specified with a
[WidgetStateProperty] which resolves to a text style whose color depends
on the decorator's error state.

** See code in examples/api/lib/material/input_decorator/input_decoration.floating_label_style_error.0.dart **
{@end-tool}+flutter.material.inputDecoration.errorStyleÅ¥The style to use for the [InputDecoration.errorText].

If null, defaults of a value derived from the base [TextStyle] for the
input field and the current [Theme].

By default the color of style will be used by the label of
[InputDecoration] if [InputDecoration.errorText] is not null. See
[InputDecoration.labelStyle] or [InputDecoration.floatingLabelStyle] for
an example of how to replicate this behavior when specifying those
styles.6flutter.material.inputDecoration.floatingLabelBehaviorÅƒDefines **how** the floating label should behave.

When [FloatingLabelBehavior.auto] the label will float to the top only when
the field is focused or has some text content, otherwise it will appear
in the field in place of the content.

When [FloatingLabelBehavior.always] the label will always float at the top
of the field above the content.

When [FloatingLabelBehavior.never] the label will always appear in an empty
field in place of the content.7flutter.material.inputDecoration.floatingLabelAlignmentÅxDefines **where** the floating label should be displayed.

[FloatingLabelAlignment.start] aligns the floating label to the leftmost
(when [TextDirection.ltr]) or rightmost (when [TextDirection.rtl]),
possible position, which is vertically adjacent to the label, on top of
the field.

[FloatingLabelAlignment.center] aligns the floating label to the center on
top of the field.6flutter.material.input_decorator.container_descriptionÄ€The decoration's container is the area which is filled if [filled] is true
and bordered per the [border]. It's the area adjacent to [icon] and above
the widgets that contain [helperText], [errorText], and [counterText]. ^[