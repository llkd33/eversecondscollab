ÄùstateupdateShouldNotify
controllerchildFocusNodestylealignmentOffset	layerLinkclipBehavioranchorTapClosesMenuconsumeOutsideTaponOpenonClosecrossAxisUnconstraineduseRootOverlaymenuChildrenbuilderchildcreateStatedebugDescribeChildrendebugFillProperties_orientation_menuController_internalMenuController_menuScopeNode_parent	initStatedidUpdateWidgetdisposebuild_buildOverlay_root_focusButton_focusFirstMenuItem_focusLastMenuItem_maybeOftoStringchildren	onPressedonHoverrequestFocusOnHoveronFocusChange	focusNode	autofocusshortcutsemanticsLabelstatesControllerleadingIcontrailingIconcloseOnActivateoverflowAxisenableddefaultStyleOfthemeStyleOf	styleFrom_internalFocusNode
_focusNode_anchor
_isHovered_handleFocusChange_handlePointerExit_handlePointerHover_handleSelect _createInternalFocusNodeIfNeededvaluetristateisError	onChanged
groupValue
toggleable	menuStylesubmenuIconactions_waitingToFocusMenu_isOpenOnFocusEnabled_anchorState
_anchorKey_buttonFocusNode_enabled_onClose_onOpen_computeMenuPaddingsubmenu_controller	isSubmenu_buttoninvoke	_instance_shortcutGraphicEquivalents
_modifiersinstance_cachedShortcutKeysgetShortcutLabel_getLocalizedName_getModifierLabelonInvoke
hasSubmenumaybeOfoflabeldisplayLabelhasAcceleratordefaultLabelBuilderstripAcceleratorMarkers_displayLabel_acceleratorIndex_binding_shortcutRegistry_shortcutRegistryEntry_showAcceleratorsdidChangeDependencies_altIsPressed_listenToKeyEvent_updateAcceleratorShortcut_updateDisplayLabelshowDecoration
anchorRecttextDirection	alignmentmenuPositionmenuPaddingavoidBoundsorientationparentOrientationgetConstraintsForChildgetPositionForChildshouldRelayout_closestScreenscrollController_intrinsicCrossSizemenuScopeNodeanchorconsumeOutsideTapsresolveCallbackresolvedebugDescription_defaultMenuBordercontext_colorsbackgroundColorshadowColorsurfaceTintColorpaddingvisualDensity
_textTheme	elevationforegroundColor	iconColoriconSizemaximumSizeminimumSizemouseCursoroverlayColorshapesplashFactorytapTargetSize	textStyle_scaledPadding(_kDebugMenus_kDefaultSubmenuIconSize_kLabelItemDefaultSpacing_kLabelItemMinSpacing_kMenuTraversalShortcuts_kMenuVerticalMinPadding_kMenuViewPadding"_kTopLevelMenuHorizontalMinPaddingMenuAnchorChildBuilder_MenuAnchorScope
MenuAnchor_MenuAnchorStateMenuBarMenuItemButton_MenuItemButtonStateCheckboxMenuButtonRadioMenuButtonSubmenuButton_SubmenuButtonState_SubmenuDirectionalFocusAction_LocalizedShortcutLabeler_MenuBarAnchor_MenuBarAnchorStateMenuAcceleratorCallbackBindingMenuAcceleratorChildBuilderMenuAcceleratorLabel_MenuAcceleratorLabelState_MenuItemLabel_MenuLayout
_MenuPanel_MenuPanelState_Submenu_MouseCursor_debugMenuInfo_isCupertino_usesSymbolicModifiers_platformSupportsAccelerators_MenuBarDefaultsM3_MenuButtonDefaultsM3_MenuDefaultsM3Ç[booldoubleMapShortcutActivatorIntentSingleActivatorLogicalKeyboardKeygameButtonAActivateIntentescapeDismissIntenttabNextFocusIntentshiftPreviousFocusIntent	arrowDownDirectionalFocusIntentTraversalDirectiondownarrowUpup	arrowLeftleft
arrowRightrightbuilderMenuControllerchildWidgetBuildContextInheritedWidgetoverridestateStatefulWidgetOffsetzeroCliphardEdge
Deprecated	FocusNode	MenuStyleMenuThemeDatastyle	alignmentDirectionalitydyAlignmentDirectional	AlignmentdxTextDirectionrtl	LayerLinkcloseopenVoidCallbackUnconstrainedBoxDropdownMenuListStateDiagnosticsNodemaptoDiagnosticsNodetoListvoidDiagnosticPropertiesBuilderdebugFillPropertiesaddFlagPropertyvalueifTrueDiagnosticsPropertyEnumPropertyAxisverticalwidget
controllerFocusScopeNode_maybeOfcontext	initStatedidUpdateWidgetdisposeRawMenuAnchoruseRootOverlayonOpenonCloseconsumeOutsideTapsconsumeOutsideTapchildFocusNodeoverlayBuilder	layerLinkCompositedTransformTargetlinkRawMenuOverlayInfomenuScopeNode	menuStyleclipBehaviormenuChildrencrossAxisUnconstrainedmenuPositionanchoralignmentOffset_parentrequestFocusmountedFocusTraversalPolicyFocusTraversalGroupmaybeOfReadingOrderTraversalPolicyfindFirstFocusignoreCurrentFocusfindLastFocusgetInheritedWidgetOfExactTypeStringDiagnosticLeveldebugdescribeIdentityCharacterActivatorshortcutShortcutRegistry
WidgetsAppMaterialAppCupertinoAppPlatformMenuBarVoidCallbackIntentActions	ShortcutsCallbackShortcutsStatelessWidgetnonedebugCheckHasOverlayitemdefaultValue
horizontalValueChangedMenuSerializableShortcut	SemanticsWidgetStatePropertyButtonStyleMaterialStatesControllerTextMenuButtonThemeDataMenuButtonThemeofforegroundColorbackgroundColordisabledForegroundColordisabledBackgroundColorenabledMouseCursordisabledMouseCursormouseCursor	iconColordisabledIconColoriconSizeColor	TextStyleEdgeInsetsGeometrySizeMouseCursor
BorderSideOutlinedBorderVisualDensityMaterialTapTargetSizeDurationAlignmentGeometryInteractiveInkFeatureFactory
TextButton	styleFromshadowColorsurfaceTintColor	textStyleoverlayColor	elevationpaddingminimumSize	fixedSizemaximumSizesideshapevisualDensitytapTargetSizeanimationDurationenableFeedbacksplashFactoryifFalse	focusNodeaddListenerremoveListenerthemeStyleOfmergedefaultStyleOf	onPressedenabledonFocusChange	autofocusstatesControllerisSemanticButtonleadingIconsemanticsLabeltrailingIcon
hasSubmenuoverflowAxis_orientationonInvokeonHoverrequestFocusOnHoverMouseRegiononExitMergeSemanticshasPrimaryFocuscloseChildrenPointerExitEventcallPointerHoverEventinvalidateScopeData
FocusScopecloseOnActivate_root_menuControllerSchedulerBindinginstanceaddPostFrameCallbackFocusManagerapplyFocusChangesIfNeeded
debugLabelCheckboxCheckboxTheme	ThemeDatauseMaterial3setStatekeyExcludeFocusIgnorePointerConstrainedBoxconstraintsBoxConstraints	maxHeightwidthmaxWidthtristate	onChangedisErrorRadio
RadioTheme
groupValue
toggleablePlatformMenuItem	MenuThemeWidgetStatedisabledhoveredfocusedsubmenuIconMaterialStatePropertyTypeActionsubmenucurrentState	GlobalKey
isNotEmpty
EdgeInsetsltrtopSetMaterialStatehasFocusresolveIconIconsarrow_rightsizeactionsisOpenexpandedshowDecoration_menuScopeNodeDirectionalFocusAction_anchorState_buttonFocusNode	directionpreviousFocus	nextFocus_focusFirstMenuItem_focusLastMenuItem_focusButtonmaybeInvokeenteraltcontrolmetaaltLeftcontrolLeftmetaLeft	shiftLeftaltRightcontrolRight	metaRight
shiftRight_MaterialLocalizationsdefaultTargetPlatformTargetPlatformmacOSiOSShortcutSerializationserializeForMenutriggerintkeyIdcontainsKey	planeMaskfromCharCode	valueMasktoUpperCasekeyLabeljoin	characterUnimplementedErroraltGraphkeyboardKeyAltGraph	backspacekeyboardKeyBackspacecapsLockkeyboardKeyCapsLockchannelDownkeyboardKeyChannelDown	channelUpkeyboardKeyChannelUpdeletekeyboardKeyDeleteejectkeyboardKeyEjectendkeyboardKeyEndkeyboardKeyEscapefnkeyboardKeyFnhomekeyboardKeyHomeinsertkeyboardKeyInsertnumLockkeyboardKeyNumLocknumpad1keyboardKeyNumpad1numpad2keyboardKeyNumpad2numpad3keyboardKeyNumpad3numpad4keyboardKeyNumpad4numpad5keyboardKeyNumpad5numpad6keyboardKeyNumpad6numpad7keyboardKeyNumpad7numpad8keyboardKeyNumpad8numpad9keyboardKeyNumpad9numpad0keyboardKeyNumpad0	numpadAddkeyboardKeyNumpadAddnumpadCommakeyboardKeyNumpadCommanumpadDecimalkeyboardKeyNumpadDecimalnumpadDividekeyboardKeyNumpadDividenumpadEnterkeyboardKeyNumpadEnternumpadEqualkeyboardKeyNumpadEqualnumpadMultiplykeyboardKeyNumpadMultiplynumpadParenLeftkeyboardKeyNumpadParenLeftnumpadParenRightkeyboardKeyNumpadParenRightnumpadSubtractkeyboardKeyNumpadSubtractpageDownkeyboardKeyPageDownpageUpkeyboardKeyPageUppowerkeyboardKeyPowerpowerOffkeyboardKeyPowerOffprintScreenkeyboardKeyPrintScreen
scrollLockkeyboardKeyScrollLockselectkeyboardKeySelectspacekeyboardKeySpacecontainsandroidfuchsialinuxkeyboardKeyMetawindowskeyboardKeyMetaWindowskeyboardKeyAltkeyboardKeyControlkeyboardKeyShiftArgumentErrorDismissMenuAction	shortcutsorientationchildrenRawMenuAnchorGroupBuildermaybeIsOpenOfnodeskipTraversalcanRequestFocusdescendantsAreFocusable	excluding"dependOnInheritedWidgetOfExactTypeFlutterErrorlabel
CharactersdefaultLabelBuilderprimaryFocusRichTextTextSpanRegExphasMatchDefaultTextStyle
characterstextgetRangetoStringcopyWith
decorationTextDecoration	underlinelengthsetIndexStringBuffericharacterAtwritetriminfoStringPropertyShortcutRegistryEntryHardwareKeyboard
addHandlerremoveHandlerdidChangeDependencieslogicalKeysPressedintersectionKeyEventtoLowerCaseaddAllstripAcceleratorMarkersindexThememaxExpandedClipRectRowmainAxisSizeMainAxisSizeminPaddingEdgeInsetsDirectionalonlystartmainAxisAlignmentMainAxisAlignmentspaceBetweengetShortcutLabelexcludeSemanticsSingleChildLayoutDelegateRectloosebiggestdeflateall
withinRecttopLeftIterableDisplayFeatureSubScreensubScreensInBoundscenterheightbottom
anchorRecttextDirectionmenuPaddingparentOrientation	setEqualsavoidBoundsfirstscreendistanceScrollControllerMenuBarTheme
themeStyledefaultStylestandardbaseSizeAdjustment	symmetricclampinfinityeffectiveConstraintsminWidth	minHeight	constrainisFiniteIntrinsicWidthMaterialcolortypeMaterialTypetransparencycanvasScrollConfigurationbehavior
scrollbars
overscrollphysicsClampingScrollPhysicsPrimaryScrollController	ScrollbarthumbVisibilitySingleChildScrollViewscrollDirectionFlexcrossAxisAlignmentCrossAxisAlignmentconstrainedAxiscenterStartIntrinsicHeightMaterialStateMouseCursorstatesfromLTRB	TapRegiongroupIdtapRegionGroupIdonTapOutsidePointerDownEventcursorhitTestBehaviorHitTestBehaviordeferToChilddataoverlaySizeMediaQueryData
MediaQueryCustomSingleChildLayoutdelegatetoSetpositionCompositedTransformFollowertargetAnchor
bottomLeftWidgetStateMouseCursoruncontrolledMaterialPropertyResolver
debugPrintdetailsdetailMaterialStatePropertyAllbottomStartRoundedRectangleBorderborderRadiusBorderRadiusRadiuscircularColorSchemecolorSchemesurfaceContainershadowColorstransparentkThemeChangeDuration	TextTheme	textThemeButtonStyleButton	allOrNullresolveWith	onSurfacewithOpacitypressedonSurfaceVariantinfiniteSystemMouseCursorsbasicclickmaterialTapTargetSize
labelLargefontSizetextScalerOfscalescaledPaddingtopEndInheritedWidgetStatefulWidgetStateStatelessWidgetDirectionalFocusAction
MenuAnchor_MenuAnchorStateSingleChildLayoutDelegateMaterialStateMouseCursor	MenuStyleButtonStyleê„í‚æë?ÌÑ3<5X    Ån   ÅÄÅÉmathÅÉ	dart:math  Åã   package:flutter/foundation.dart  Åµ   package:flutter/rendering.dart  Åﬁ   package:flutter/scheduler.dart  Ç   package:flutter/services.dart  Ç/   package:flutter/widgets.dart  ÇW   button_style.dart  Çs   button_style_button.dart  Çñ   checkbox.dart  ÇÆ   color_scheme.dart  Ç    colors.dart  Ç‡   constants.dart  Ç˘   
icons.dart  É   ink_well.dart  É&   material.dart  É>   material_localizations.dart  Éd   material_state.dart  ÉÇ   menu_bar_theme.dart  É†   menu_button_theme.dart  É¡   menu_style.dart  É€   menu_theme.dart  Éı   
radio.dart  Ñ
   scrollbar.dart  Ñ#   text_button.dart  Ñ>   text_theme.dart  ÑX   
theme.dart  Ñm   theme_data.dart¿õ ¿mé¨ <ÄÜÄ§Ä•Ä÷Ä⁄ÄıÅÅ@ÅcÅlÅmÅâÅäÅ¥Å›ÇÇ.ÇUÇVÇrÇïÇ≠Ç…ÇﬂÇ¯ÉÉ%É=ÉcÉÅÉüÉ¿É⁄ÉÙÑ	Ñ"Ñ=ÑWÑlÑÜÑáÑüÑøÑ›ÖÖ*ÖHÖIÖÉÖ§Ö•ÖÛÜÜ1Ü2Ü}Ü§Ü—Ü“ááDálámáπá¬ààdà£à·â0âíâäRä∂äπä∫äÛãããbãÜãáãœåååPå|åÄåƒå»çç+ç/çwçƒç“çÛéHéIézé¡é¬é‚é„éÔè'è}èèèìèïèñè·ê+êXê\ê¨êÂêÈë3ëÄëºë¿ë‘í!íEíIíòí®í¨í¿ìì\ì©ìıì˘îHîXî\îpî¡îÕî—ï ï0ïZï~ïÑï≥ï»ï◊ïÏñññ=ñQñxñâñ±ñÌñÛóó=óNó`óàó©ó…ó€óÎóÒóÚò@òUòyòzòÀô	ôô_ô≠ôøô≈ööJömönö∏öæõõõCõ]õ^õúõËú-úEúKúÅúáú◊ú„úÈù:ùzù∑ùΩûûXû§ûÔü+ü1üRügüàüâü“üüˆ†B†~†ú†ù†”†Ÿ†¸°°°]°c°≥°˘¢<¢å¢÷£%£u£æ§§\§•§´§¯•I•ò•Â•Î¶¶¶9¶s¶w¶ô¶ö¶Âßßßbß≤ß˙®
®®)®I®J®Ñ®¢®£®›®¸®˝©S©Ñ©ä©Ÿ™1™Ç™ß™®™‰™Í´´ ´!´q´ù´£´⁄´˝´˛¨1¨7¨y¨¿¨∆≠≠,≠2≠Ä≠é≠∑≠∏≠≠ˆÆ@ÆëÆ·ØØ'Ø(Ø4ØmØnØzØ¨∞∞∞∞!∞f∞ë∞•±±	±[±†±Ê≤<≤@≤B≤C≤v≤†≤˜≥"≥\≥£≥§≥∞≥≈≥‹¥¥3¥9¥=¥>¥J¥y¥ü¥‘µ)µ/µ3µ4µ@µSµÖµ©µ«µ‹µ‡µ·µÌ∂∂?∂R∂n∂ù∂º∂›∑∑8∑g∑é∑Ø∑Ã∑’∑‹∑›∏∏∏∏∏i∏m∏n∏∫∏œ∏Úπ&πKπjπìπºπ˘∫∫+∫i∫p∫t∫u∫î∫∏∫›∫˝ªªªªª3ª\ªjªpªΩªËªÏªÌºº?ºMºSº{º⁄Ω=Ω[Ω|ΩÇΩÜΩáΩ•ΩÿΩÊΩÏææsæ”æÒæıæˆø2øøÉøÑøêøÿø˚øˇ¿ @¿ @¿ @5¿ @9¿ @Ü¿ @÷¿ A¿ A¿ An¿ Aø¿ B¿ B]¿ B≠¿ B¯¿ C¿ C¿ C\¿ C¨¿ C˙¿ D4¿ D~¿ D∑¿ Dª¿ DÛ¿ E4¿ EÇ¿ E–¿ F¿ Fp¿ Fã¿ Fè¿ F›¿ G$¿ Gr¿ G√¿ H¿ HN¿ HR¿ H†¿ HÍ¿ I:¿ IÖ¿ Iâ¿ I’¿ IÂ¿ I¯¿ I¸¿ JB¿ JF¿ JT¿ JX¿ Jß¿ JΩ¿ J˘¿ KH¿ Ká¿ K÷¿ L¿ L`¿ Ls¿ L≈¿ L˚¿ MG¿ Mb¿ Mä¿ M´¿ M±¿ M‹¿ MÓ¿ M˝¿ N¿ N0¿ NE¿ Na¿ Ng¿ Nh¿ N≤¿ N∏¿ O¿ O¿ O=¿ OW¿ OX¿ Oé¿ Oî¿ O≥¿ OŒ¿ Oœ¿ P¿ P(¿ P)¿ Px¿ P~¿ PÀ¿ Q¿ Qg¿ QÜ¿ Qå¿ Q√¿ Q‚¿ Q„¿ QÔ¿ R¿ RA¿ R\¿ Rz¿ Rú¿ R∞¿ RŒ¿ R’¿ RŸ¿ R⁄¿ RÊ¿ S¿ S6¿ Sâ¿ Sê¿ Sî¿ Sï¿ S°¿ SÊ¿ T¿ Tj¿ TÀ¿ Tœ¿ T—¿ T“¿ U"¿ Uf¿ Uj¿ U∏¿ V¿ V&¿ V*¿ V_¿ Vc¿ Vq¿ Vu¿ V≈¿ V“¿ W!¿ W7¿ Wá¿ W÷¿ X¿ X`¿ Xs¿ X≈¿ X˚¿ YF¿ Ya¿ Yè¿ Y∑¿ YΩ¿ YÊ¿ Yˇ¿ Z¿ Z"¿ Z4¿ ZY¿ Zq¿ ZÖ¿ Z°¿ Z¥¿ ZÕ¿ Z›¿ Z¯¿ [¿ [1¿ [H¿ [i¿ [í¿ [¢¿ [®¿ [©¿ [Ë¿ [Ó¿ \0¿ \6¿ \F¿ \L¿ \à¿ \©¿ \™¿ \¿ \ˆ¿ ]E¿ ]s¿ ]ò¿ ]ô¿ ]»¿ ]Œ¿ ]Ê¿ ^¿ ^	¿ ^6¿ ^<¿ ^å¿ ^ô¿ ^ƒ¿ ^≈¿ ^Ù¿ _¿ _¿ _B¿ _Z¿ _[¿ _õ¿ _°¿ _ÿ¿ `¿ `¿ `P¿ `V¿ `ú¿ `„¿ a"¿ aS¿ aY¿ a§¿ aÎ¿ b4¿ bE¿ bK¿ bb¿ bÇ¿ bÉ¿ bÆ¿ b¥¿ c¿ cT¿ có¿ c‹¿ c‚¿ c˘¿ d¿ d¿ dO¿ dÉ¿ dÑ¿ d∫¿ d¿¿ dﬂ¿ d˙¿ d˚¿ e7¿ eT¿ eU¿ eê¿ eÆ¿ eØ¿ eÓ¿ f2¿ fD¿ fJ¿ fb¿ fw¿ fï¿ fñ¿ f ¿ f–¿ g!¿ gA¿ gG¿ gô¿ g›¿ g˙¿ h ¿ h%¿ h@¿ hA¿ hz¿ hÄ¿ h√¿ h…¿ h˙¿ i¿ i¿ iC¿ iI¿ iï¿ iæ¿ iø¿ iÀ¿ j¿ j¿ j<¿ jB¿ j¿ jÖ¿ jƒ¿ j˘¿ k$¿ k(¿ k)¿ kf¿ kà¿ kº¿ kÍ¿ kÓ¿ kÔ¿ l6¿ l_¿ le¿ l±¿ m¿ mR¿ mö¿ mÈ¿ mˆ¿ m¸¿ n@¿ nÇ¿ nà¿ n…¿ o¿ o)¿ o/¿ o~¿ oæ¿ oƒ¿ p¿ p?¿ pE¿ pá¿ p÷¿ q"¿ q5¿ q;¿ qI¿ q_¿ qå¿ q‘¿ qÏ¿ q˝¿ r¿ r3¿ r<¿ rF¿ rg¿ rÉ¿ rü¿ r√¿ rÁ¿ rˇ¿ s¿ s2¿ sH¿ sf¿ sÄ¿ sô¿ s∞¿ s—¿ sË¿ s˝¿ t¿ t9¿ t_¿ tu¿ tê¿ t≤¿ t‹¿ t˝¿ u¿ u9¿ uj¿ uq¿ uí¿ u∫¿ u‚¿ v¿ vR¿ vr¿ vú¿ v∏¿ v“¿ v˛¿ w¿ w<¿ wX¿ wp¿ wê¿ w¨¿ wÃ¿ w˙¿ x*¿ x<¿ xP¿ xt¿ xò¿ xƒ¿ xÍ¿ y¿ y*¿ y1¿ y5¿ y6¿ yB¿ yá¿ y≤¿ z¿ zi¿ z}¿ z›¿ z‰¿ {E¿ {§¿ {∏¿ {Ó¿ |
¿ |$¿ |@¿ |I¿ |P¿ |T¿ |V¿ |W¿ |í¿ |‚¿ }¿ }J¿ }ë¿ }¨¿ }≠¿ }π¿ }Œ¿ }Â¿ ~¿ ~=¿ ~A¿ ~B¿ ~N¿ ~a¿ ~î¿ ~∑¿ ~÷¿ ~Î¿ ~Ô¿ ~¿ ~¸¿ /¿ b¿ π¿ ﬂ¿ Ä¿ Ä)¿ Ä1¿ Ä[¿ Äç¿ Äì¿ Äπ¿ ÄΩ¿ Äæ¿ Ä ¿ ÄÒ¿ Å=¿ Åä¿ Å⁄¿ Å¯¿ ÇG¿ Ço¿ Çè¿ Ç≈¿ ÇÀ¿ ÇÃ¿ ÇÎ¿ É#¿ Éf¿ ÉÉ¿ Éù¿ É“¿ Ñ¿ Ñ,¿ ÑJ¿ Ñg¿ Ñê¿ Ñ≥¿ Ñ‚¿ Ö¿ Ö(¿ Öl¿ Öâ¿ Öí¿ Öô¿ Öö¿ Ö’¿ Ü*¿ Ü0¿ Ü1¿ Üq¿ Ü‘¿ Ü⁄¿ Ü€¿ á¿ á¿ á	¿ á'¿ áN¿ áÑ¿ áº¿ á¬¿ á∆¿ á«¿ á˚¿ à¿ à4¿ àN¿ àT¿ àX¿ àY¿ à™¿ à¿¿ àˆ¿ â¿ â&¿ âH¿ âp¿ âø¿ â‚¿ â„¿ ä4¿ ä_¿ ä¥¿ äº¿ ä¬¿ ä∆¿ ä«¿ ä‡¿ ã¿ ã?¿ ãm¿ ãs¿ ãº¿ å¿ å¿ å^¿ åó¿ å∑¿ å„¿ åÁ¿ åË¿ ç¿ ç8¿ ç`¿ çr¿ çø¿ ç‘¿ ç‡¿ çÊ¿ çÍ¿ çÏ¿ çÌ¿ é8¿ é<¿ éà¿ éñ¿ éö¿ éÆ¿ é˝¿ è¿ è¿ èt¿ èÑ¿ èà¿ èñ¿ èö¿ èÂ¿ ê3¿ ê?¿ êr¿ êû¿ ê§¿ êÈ¿ ë¿ ë¿ ë.¿ ëI¿ ëc¿ ëÄ¿ ëí¿ ë™¿ ëæ¿ ë—¿ ë·¿ ë¸¿ í¿ í6¿ íW¿ íp¿ ív¿ íw¿ íü¿ í•¿ íÙ¿ ì1¿ ìF¿ ìG¿ ìè¿ ìï¿ ìÿ¿ ìﬁ¿ î.¿ î¿ î–¿ î˝¿ ï¿ ïG¿ ï^¿ ï_¿ ïô¿ ïü¿ ïÛ¿ ñG¿ ñM¿ ñf¿ ñ|¿ ñ}¿ ñ∏¿ ñæ¿ ó¿ óZ¿ óg¿ óm¿ óπ¿ óÁ¿ óÌ¿ ò>¿ òå¿ òÿ¿ òÂ¿ òÎ¿ ô<¿ ôâ¿ ô™¿ ô∞¿ ôæ¿ ôÿ¿ ô˜¿ ö¿ öA¿ öY¿ öÅ¿ öè¿ öö¿ ö¢¿ ö¨¿ ö‘¿ ö’¿ õ¿ õ!¿ õp¿ õû¿ õ√¿ õƒ¿ õÒ¿ õ˜¿ úG¿ úT¿ ú¿ úÄ¿ úØ¿ úÕ¿ úŒ¿ ù¿ ù¿ ùK¿ ùw¿ ùx¿ ù£¿ ù©¿ ù˙¿ ûC¿ ûè¿ û ¿ ü¿ ü¿ ü0¿ üL¿ üM¿ üÜ¿ ü∫¿ üª¿ üÒ¿ ü˜¿ †¿ †1¿ †2¿ †m¿ †ã¿ †å¿ †»¿ †Ê¿ †Á¿ ° ¿ °&¿ °i¿ °o¿ °†¿ °∑¿ °∏¿ °È¿ °Ô¿ ¢;¿ ¢d¿ ¢e¿ ¢q¿ ¢ò¿ ¢≥¿ ¢√¿ ¢‘¿ ¢¿ £¿ £¿ £;¿ £Y¿ £¿ £ú¿ £’¿ £Ú¿ §¿ §+¿ §<¿ §T¿ §x¿ §î¿ §®¿ §¬¿ §Ï¿ •¿ •+¿ •L¿ •∞¿ •Õ¿ •Ô¿ ¶¿ ¶/¿ ¶O¿ ¶^¿ ¶k¿ ¶v¿ ¶¿ ¶°¿ ¶√¿ ¶Î¿ ¶ˇ¿ ß¿ ß
¿ ß¿ ß¿ ßU¿ ßY¿ ß°¿ ßº¿ ß¿¿ ß‘¿ ®¿ ®k¿ ®o¿ ®ƒ¿ ®‘¿ ®ÿ¿ ®Ê¿ ®Í¿ ©5¿ ©É¿ ©è¿ ©¬¿ ©Î¿ ©Ò¿ ™¿ ™4¿ ™C¿ ™\¿ ™z¿ ™ó¿ ™¥¿ ™∆¿ ™ﬁ¿ ™Ú¿ ´¿ ´¿ ´0¿ ´S¿ ´j¿ ´ã¿ ´§¿ ´™¿ ´´¿ ´›¿ ´„¿ ¨-¿ ¨A¿ ¨R¿ ¨S¿ ¨î¿ ¨ö¿ ¨‰¿ ¨¯¿ ≠¿ ≠¿ ≠W¿ ≠ñ¿ ≠ú¿ ≠Á¿ ≠ˇ¿ Æ¿ ÆO¿ Æï¿ Æ¥¿ Æ∫¿ Ø¿ ØV¿ Ø¢¿ Øæ¿ Øƒ¿ Ø‡¿ Ø˘¿ Ø˙¿ ∞0¿ ∞6¿ ∞á¿ ∞ÿ¿ ±¿ ±¿ ±K¿ ±Q¿ ±°¿ ±±¿ ±∑¿ ≤¿ ≤U¿ ≤v¿ ≤|¿ ≤ä¿ ≤≥¿ ≤ﬁ¿ ≤˛¿ ≥0¿ ≥H¿ ≥k¿ ≥y¿ ≥Ñ¿ ≥¨¿ ≥¥¿ ≥æ¿ ≥„¿ ≥‰¿ ¥*¿ ¥0¿ ¥¿ ¥≠¿ ¥“¿ ¥”¿ µ ¿ µ¿ µV¿ µc¿ µé¿ µè¿ µæ¿ µ‹¿ µ›¿ ∂¿ ∂#¿ ∂Z¿ ∂Ü¿ ∂á¿ ∂≤¿ ∂∏¿ ∑	¿ ∑R¿ ∑û¿ ∑Ÿ¿ ∏"¿ ∏(¿ ∏?¿ ∏[¿ ∏\¿ ∏ï¿ ∏…¿ ∏ ¿ π ¿ π¿ π%¿ π@¿ πA¿ π|¿ πö¿ πõ¿ π◊¿ πı¿ πˆ¿ ∫/¿ ∫5¿ ∫x¿ ∫~¿ ∫Ø¿ ∫∆¿ ∫«¿ ∫¯¿ ∫˛¿ ªJ¿ ªs¿ ªt¿ ªÄ¿ ªß¿ ª¬¿ ª“¿ ª„¿ ªˇ¿ º¿ º)¿ ºb¿ ºç¿ ºü¿ º¬¿ º”¿ ºÎ¿ Ω¿ Ω+¿ Ω?¿ ΩY¿ ΩÉ¿ Ω§¿ Ω¬¿ Ω„¿ æG¿ æd¿ æÄ¿ æ¶¿ æ ¿ æ¿ æˇ¿ ø¿ ø¿ ø ¿ øB¿ ød¿ øå¿ ø†¿ øß¿ ø´¿ ø≠¿ øÆ¿ ø‡¿ ø‰¿ ¿*¿ ¿.¿ ¿w¿ ¿√¿ ¡¿ ¡¿ ¡c¿ ¡¨¿ ¡˘¿ ¬¿ ¬¿ ¬Y¿ ¬õ¿ ¬Ø¿ ¬≥¿ ¬˝¿ √¿ √¿ √¿ √c¿ √y¿ √…¿ √÷¿ ƒ%¿ ƒ;¿ ƒà¿ ƒ–¿ ƒ˝¿ ≈$¿ ≈*¿ ≈h¿ ≈Ä¿ ≈è¿ ≈°¿ ≈π¿ ≈ ¿ ≈‹¿ ≈Ò¿ ∆¿ ∆¿ ∆/¿ ∆V¿ ∆j¿ ∆Ö¿ ∆õ¿ ∆≤¿ ∆»¿ ∆È¿ «	¿ «"¿ «(¿ «)¿ «o¿ «u¿ «¬¿ «˛¿ »#¿ »$¿ »Q¿ »W¿ »®¿ »ª¿ »Ê¿ »Á¿ …!¿ …?¿ …@¿ …z¿ …ô¿ …ö¿ …œ¿ …Û¿ …Ù¿  ¿  %¿  v¿  ≈¿ À¿ ÀM¿ ÀS¿ Àj¿ ÀÜ¿ Àá¿ À∆¿ ÀÃ¿ Ã¿ Ã;¿ Ã<¿ Ãà¿ Ãæ¿ Ãƒ¿ Ãˇ¿ Õ¿ ÕT¿ Õ¢¿ Õ»¿ ÕÈ¿ ÕÍ¿ Œ ¿ Œ&¿ ŒI¿ Œd¿ Œe¿ Œî¿ Œ≤¿ Œ≥¿ ŒÏ¿ œ ¿ œ!¿ œW¿ œt¿ œu¿ œƒ¿ œ ¿ œÚ¿ –¿ –3¿ –S¿ –Y¿ –ß¿ –ı¿ —	¿ —>¿ —?¿ —t¿ —í¿ —ì¿ —œ¿ —’¿ —Ó¿ “¿ “¿ “Q¿ “W¿ “£¿ “¬¿ “»¿ ”¿ ”%¿ ”H¿ ”I¿ ”ä¿ ”ê¿ ””¿ ”Ÿ¿ ‘
¿ ‘!¿ ‘"¿ ‘.¿ ‘m¿ ‘n¿ ‘ù¿ ‘£¿ ‘‡¿ ‘Ê¿ ’%¿ ’Z¿ ’Ö¿ ’â¿ ’ä¿ ’Ÿ¿ ’È¿ ÷¿ ÷K¿ ÷O¿ ÷P¿ ÷ñ¿ ÷ø¿ ÷≈¿ ◊¿ ◊b¿ ◊≤¿ ◊˙¿ ÿI¿ ÿV¿ ÿ\¿ ÿ†¿ ÿ‚¿ ÿË¿ Ÿ)¿ Ÿk¿ Ÿâ¿ Ÿè¿ Ÿﬁ¿ ⁄¿ ⁄$¿ ⁄k¿ ⁄ü¿ ⁄•¿ ⁄Á¿ €5¿ €Å¿ €î¿ €ö¿ €®¿ €Ω¿ €Í¿ ‹1¿ ‹d¿ ‹è¿ ‹ò¿ ‹¢¿ ‹√¿ ‹ﬂ¿ ‹˚¿ ›¿ ›C¿ ›[¿ ›x¿ ›é¿ ›§¿ ›¬¿ ›‹¿ ›ı¿ ﬁ¿ ﬁ-¿ ﬁD¿ ﬁY¿ ﬁp¿ ﬁï¿ ﬁª¿ ﬁ—¿ ﬁÏ¿ ﬂ¿ ﬂ8¿ ﬂY¿ ﬂs¿ ﬂï¿ ﬂ∆¿ ﬂÕ¿ ﬂÓ¿ ‡¿ ‡>¿ ‡v¿ ‡Æ¿ ‡Œ¿ ‡¯¿ ·¿ ·@¿ ·Z¿ ·v¿ ·ò¿ ·¥¿ ·Ã¿ ·Ï¿ ‚¿ ‚(¿ ‚V¿ ‚Ü¿ ‚ò¿ ‚¨¿ ‚–¿ ‚Ù¿ „ ¿ „F¿ „b¿ „Ü¿ „ç¿ „ë¿ „í¿ „û¿ „–¿ „Ó¿ ‰*¿ ‰T¿ ‰^¿ ‰e¿ ‰i¿ ‰j¿ ‰v¿ ‰ª¿ ‰Ê¿ Â3¿ Âì¿ ÂË¿ Ê.¿ Ê2¿ Ê4¿ Ê5¿ Ên¿ Ê∑¿ Á¿ Á¿ Á+¿ ÁP¿ Á{¿ Á“¿ Ë¿ ËZ¿ Ë{¿ ËÀ¿ È¿ ÈO¿ Èj¿ Èk¿ Èw¿ Èå¿ È£¿ È«¿ ÈÔ¿ Í¿ ÍM¿ Íb¿ Ín¿ Ít¿ Íô¿ ÍÀ¿ Í—¿ Î¿ Î¿ Î¿ Î¿ Î+¿ Îd¿ Îá¿ Î¶¿ Îª¿ Îø¿ Î¿¿ ÎÃ¿ Î˛¿ Ï$¿ ÏW¿ ÏÄ¿ Ï¿¿ ÏÁ¿ Ì
¿ Ì¿ ÌZ¿ Ìb¿ Ìà¿ Ì¥¿ Ì»¿ Ó¿ Ó-¿ Ó;¿ ÓC¿ Ó{¿ ÓÅ¿ Ó∂¿ Ô¿ Ô¿ Ô¿ Ô¿ Ô'¿ ÔN¿ Ôî¿ Ô’¿ ¿ `¿ ©¿ ˜¿ ÒC¿ Òè¿ Òÿ¿ Ú!¿ Ú(¿ Ú_¿ Úå¿ Úπ¿ Úı¿ Ú¸¿ Û¿ ÛJ¿ Ûà¿ Ûú¿ ÛË¿ Ù¿ Ù¿ Ù¿ Ù2¿ ÙJ¿ Ùc¿ Ù|¿ Ù°¿ ÙÀ¿ Ù˜¿ ı"¿ ı=¿ ıV¿ ıw¿ ı¶¿ ı˙¿ ˆL¿ ˆü¿ ˆÔ¿ ˜¿ ˜&¿ ˜{¿ ˜©¿ ˜Ú¿ ˜Û¿ ¯¿ ¯1¿ ¯G¿ ¯U¿ ¯z¿ ¯ú¿ ¯±¿ ¯“¿ ¯‡¿ ¯Ï¿ ¯Ì¿ ˘(¿ ˘F¿ ˘q¿ ˘ì¿ ˘°¿ ˘≠¿ ˘Æ¿ ˘Ò¿ ˙;¿ ˙à¿ ˙°¿ ˙ﬁ¿ ˙˝¿ ˚¿ ˚H¿ ˚ü¿ ˚Ú¿ ¸C¿ ¸ò¿ ¸≠¿ ˝¿ ˝¿ ˝/¿ ˝0¿ ˝Q¿ ˝Ä¿ ˝é¿ ˝ö¿ ˝õ¿ ˝Ω¿ ˝€¿ ˛¿ ˛3¿ ˛W¿ ˛Ñ¿ ˛À¿ ˇ¿ ˇ0¿ ˇW¿ ˇä¿ ˇø¿ ˇ„¿ B¿ n¿ é¿ °¿ ≤¿ ¡¿ Œ¿ œ¿ Í¿¿¿¿v¿w¿¶¿Ÿ¿¿!¿=¿L¿X¿Y¿q¿|¿ß¿ƒ¿Õ¿‘¿ÿ¿Ÿ¿Ì¿9¿á¿÷¿"¿S¿y¿û¿Í¿%¿K¿Ç¿à¿§¿®¿©¿º¿‹¿¿.¿Y¿Ä¿ä¿¥¿÷¿‹¿Ó¿'¿/¿J¿N¿O¿à¿∆¿Î¿¿F¿X¿•¿”¿◊¿ÿ¿ˆ¿	"¿	`¿	Ä¿	à¿	ï¿	„¿
¿
¿
¿
¿
¿
¿
_¿
ö¿
õ¿
¿¿
Ù¿2¿o¿p¿µ¿Ë¿È¿=¿¿¥¿µ¿¡¿¿G¿î¿‘¿¿i¿≠¿¿¿-¿H¿e¿u¿¿¿
¿J¿ù¿∂¿∆¿·¿˙¿
¿D¿]¿≠¿ﬂ¿¿ ¿*¿b¿{¿À¿¿M¿{¿ç¿ó¿ﬂ¿(¿i¿Ñ¿Ø¿œ¿¿¿:¿y¿∆¿¿¸¿¿(¿T¿ò¿Ê¿¿¿%¿J¿x¿ã¿‹¿(¿I¿U¿ä¿î¿§¿¸¿S¿á¿©¿ÿ¿È¿¿W¿}¿∞¿æ¿Ã¿÷¿Ê¿ı¿¿
¿¿=¿A¿C¿D¿~¿º¿÷¿⁄¿¿k¿o¿æ¿ ¿Œ¿¿j¿´¿Õ¿Ó¿Ô¿¿¿l¿ê¿ª¿Á¿¿;¿b¿k¿l¿∂¿“¿Ú¿ ¿ -¿ M¿ q¿ í¿ ¥¿ ’¿ ˙¿!¿!?¿!D¿!E¿!s¿!•¿!›¿!·¿!‚¿"0¿"z¿"‘¿#¿#¿#X¿#ô¿#ü¿#ﬂ¿$/¿$~¿$∏¿%¿%N¿%T¿%û¿%Ø¿&¿&]¿&|¿&û¿&À¿&Â¿&Ú¿'¿'/¿'5¿'[¿'ô¿'»¿'˘¿(L¿(≠¿)¿)c¿)æ¿)⁄¿*¿*n¿*œ¿+*¿+á¿+í¿+õ¿+∫¿+Ë¿,&¿,f¿,u¿,¬¿,Ó¿-3¿-ê¿-ﬂ¿-˜¿.¿.q¿.{¿.¥¿.‚¿.Í¿/¿/¿/k¿/á¿/∂¿/Â¿0%¿0V¿0©¿1
¿1c¿1æ¿1⁄¿2¿2n¿2œ¿3*¿35¿3>¿3ç¿3ì¿3±¿3˜¿4P¿4Ä¿4á¿4ã¿4å¿4Ÿ¿5¿5_¿5™¿5˜¿6G¿6`¿6©¿6Ô¿77¿7}¿7…¿8¿8S¿8ì¿8œ¿9¿9K¿9â¿9À¿:¿:S¿:ó¿:€¿;¿;c¿;ß¿;Î¿</¿<s¿<∑¿<ˇ¿=K¿=õ¿=È¿>5¿>Å¿>”¿?'¿?}¿?œ¿@¿@W¿@ó¿@›¿A)¿As¿Aµ¿Aı¿A¸¿B1¿B5¿B6¿Bï¿BÓ¿C¿CP¿CÑ¿C´¿C–¿Cı¿D¿DH¿Dm¿D§¿D≈¿DË¿D˛¿E¿E¿E:¿El¿Eü¿E∆¿EÎ¿F¿F3¿FX¿Fá¿F®¿FÀ¿F·¿FÈ¿FÔ¿G!¿GW¿Gé¿G€¿H(¿Hu¿H∆¿Hˇ¿I&¿IK¿Ip¿Iì¿I∏¿IÎ¿J¿J/¿JE¿JM¿JS¿JÉ¿J∑¿JÏ¿K¿K8¿K]¿KÄ¿K•¿K÷¿K˜¿L¿L0¿L8¿L>¿Lè¿Lì¿Lï¿Lñ¿LÂ¿M5¿M_¿Mx¿Mô¿MØ¿M«¿Mÿ¿Mﬁ¿Mﬂ¿MÎ¿N'¿N)¿N*¿N_¿N®¿NÎ¿N¿NÒ¿N˝¿O)¿O*¿O6¿O]¿OÄ¿Oò¿O∞¿O›¿O¯¿P¿PH¿Pm¿Pñ¿P°¿P™¿P±¿PŒ¿P·¿Q¿Q'¿Q?¿Qk¿Qª¿Q⁄¿Q˛¿R$¿RK¿Rx¿RΩ¿RÃ¿RŸ¿R‰¿RÌ¿RÙ¿R¯¿R˙¿R˚¿SK¿Sá¿Sã¿S—¿T!¿T]¿Tú¿T”¿TŸ¿U¿U+¿U:¿UM¿Uj¿UÑ¿Uä¿Uã¿U‘¿U˛¿V¿VA¿Va¿Vb¿VÆ¿V¥¿W¿WS¿W_¿Wx¿Wy¿WÖ¿WÀ¿X¿X ¿X!¿Xy¿X»¿X‚¿XË¿Y-¿Y3¿YC¿YI¿Yú¿YÆ¿Y˜¿ZP¿ZT¿ZU¿Z©¿ZÙ¿[¿[¿[m¿[õ¿[°¿[±¿[∑¿[Û¿\&¿\i¿\Æ¿\æ¿\⁄¿\ˆ¿]G¿]å¿]ﬂ¿^/¿^{¿^Õ¿^Ò¿_	¿_¿_¿_/¿_9¿_M¿_Q¿_S¿_T¿_¢¿_œ¿_”¿`$¿`V¿`Z¿`í¿`„¿a1¿ax¿a…¿b¿bb¿b¨¿bı¿cA¿c|¿cè¿cì¿c°¿c•¿cÛ¿d7¿d]¿d°¿d¢¿dÊ¿e6¿ek¿eo¿eæ¿f¿fW¿fö¿fÍ¿g'¿g+¿gx¿g¬¿h¿h=¿hA¿hí¿hŸ¿i¿i8¿i<¿iç¿iﬁ¿j,¿jN¿jR¿jõ¿j‰¿k2¿kÄ¿k—¿l¿lX¿l\¿l∂¿l∆¿lŸ¿m¿m;¿mA¿mj¿m≈¿m∆¿m˜¿m˝¿nE¿né¿nî¿n‡¿o1¿o}¿oŒ¿p¿pl¿pº¿p¯¿q¿q¿q#¿q)¿qv¿q¡¿r¿r`¿r™¿rœ¿rÂ¿rÊ¿s&¿s,¿su¿s≤¿s≥¿sˇ¿t,¿t2¿t{¿t»¿u¿u_¿ue¿uµ¿uª¿v¿v\¿v™¿vﬁ¿w¿w¿wF¿wL¿wï¿w›¿wﬁ¿x(¿xu¿xƒ¿y¿y¿yk¿y¿¿y’¿yÔ¿yı¿z<¿zp¿zÖ¿zõ¿zπ¿z“¿{-¿{A¿{Ö¿{’¿{‚¿|¿|k¿|v¿|¿|Ü¿|ä¿|ã¿|⁄¿|¯¿|˛¿}N¿}ò¿}û¿}Á¿~E¿~c¿~ô¿~∏¿¿¿S¿Ñ¿ß¿‹¿Ä-¿ÄZ¿Äò¿Ä∂¿Äÿ¿Äˇ¿Å¿Å¿Å=¿Åd¿Åv¿Å~¿Å¶¿Åﬂ¿ÅÓ¿Åˆ¿Ç¿Çb¿ÇÜ¿Çµ¿ÇÙ¿ÉA¿É[¿Éå¿Éî¿É·¿Ñ0¿ÑM¿ÑS¿Ñy¿Ñù¿Ñ°¿Ñ¢¿ÑÆ¿Ñ˚¿Ñ¸¿Ö¿ÖO¿Ö}¿ÖÅ¿ÖÇ¿Öé¿Ö”¿Ö˛¿Ü2¿Ü6¿Ü8¿Ü9¿ÜÄ¿Üù¿Üª¿ÜÁ¿á
¿á1¿áb¿áÑ¿áÖ¿áë¿á¶¿áΩ¿áÊ¿à¿àP¿àV¿àq¿àu¿àv¿àÇ¿àï¿à‚¿à˙¿â#¿âL¿âq¿âë¿âØ¿âÒ¿â˜¿ä¿ä¿ä¿ä¿ä>¿äa¿äã¿äô¿äü¿äﬂ¿ã¿ãQ¿ãs¿ãw¿ãx¿ãÑ¿ãΩ¿ã„¿å¿å+¿å1¿å5¿å6¿åV¿å±¿å”¿åˆ¿ç¿ç'¿ç+¿ç,¿çW¿çÇ¿çî¿çø¿ç„¿çÎ¿é#¿é5¿é9¿é:¿é`¿éã¿é≤¿é’¿è!¿è4¿è;¿èu¿èß¿èÎ¿ê¿êd¿ê¥¿êÊ¿ë¿ë&¿ëL¿ëñ¿ë¿íF¿íó¿í∂¿í¡¿íÀ¿í—¿í’¿í÷¿íı¿ì7¿ìK¿ìi¿ìå¿ìï¿ìú¿ì†¿ì°¿ì≠¿ì‘¿î¿îP¿îT¿îV¿îW¿îû¿î≥¿î∑¿ï	¿ïY¿ïß¿ïŒ¿ï˝¿ñ%¿ñ+¿ñf¿ñ¿ñù¿ñΩ¿ñ”¿ñÍ¿ñ˝¿ó¿ó=¿óS¿óc¿ói¿ój¿óò¿óû¿ó⁄¿óÛ¿óÙ¿òC¿òê¿ò∂¿ò”¿ò‘¿ô¿ô(¿ô)¿ô_¿ô}¿ô~¿ôÕ¿ô·¿ö¿ö¿öZ¿öy¿öô¿öö¿öŒ¿öÈ¿öÍ¿õD¿õa¿õb¿õ°¿õ∏¿õπ¿õ≈¿õÏ¿ú/¿ú^¿ú{¿úµ¿úº¿ú—¿ú˙¿ù¿ù.¿ùD¿ùp¿ùê¿ù≈¿ùÊ¿û ¿û#¿ûG¿ûf¿ûî¿ûÈ¿ü¿ü>¿üU¿üj¿ü}¿üå¿üô¿ü§¿ü≠¿ü∫¿ü–¿ü¯¿†¿†E¿†b¿†w¿†é¿†¥¿°¿°*¿°F¿°U¿°`¿°i¿°o¿°p¿°ê¿°…¿°„¿°ı¿¢¿¢*¿¢u¿¢ñ¿¢£¿¢”¿¢Ê¿£1¿£J¿£ç¿£®¿£€¿£Ï¿£˚¿§¿§2¿§E¿§ê¿§∞¿§Ω¿§∆¿§Õ¿§Ô¿•¿•/¿•O¿•m¿•v¿•|¿•ñ¿•ö¿•õ¿•ß¿•Ï¿¶¿¶+¿¶ä¿¶ë¿¶⁄¿ß+¿ß/¿ß1¿ß2¿ß}¿ßï¿ßÀ¿ß·¿ßˇ¿® ¿®=¿®`¿®Ä¿®ü¿®æ¿®›¿©¿©¿©	¿©T¿©m¿©n¿©®¿©Õ¿©Œ¿™¿™;¿™<¿™ã¿™ñ¿™∂¿™∑¿™Ï¿´
¿´¿´W¿´i¿´ë¿´í¿´‚¿¨¿¨¿¨%¿¨?¿¨@¿¨l¿¨å¿¨ç¿¨ô¿¨ﬂ¿≠.¿≠O¿≠p¿≠ã¿≠√¿≠«¿≠»¿≠‘¿Æ¿Æ4¿Æ~¿Æù¿ÆŒ¿Æ‹¿ÆÍ¿Ø
¿Øb¿Øà¿Ø∑¿ØÏ¿∞<¿∞l¿∞w¿∞Ü¿∞≥¿∞ª¿∞Á¿±¿±#¿±B¿±b¿±Ç¿±¢¿±≥¿±ª¿±»¿≤¿≤1¿≤P¿≤V¿≤W¿≤©¿≤º¿≤œ¿≤÷¿≥"¿≥Z¿≥¶¿≥ÿ¿¥#¿¥o¿¥¬¿µ¿µ[¿µg¿µó¿µﬂ¿µ˚¿∂¿∂$¿∂s¿∂≤¿∂‚¿∑¿∑¿∑X¿∑}¿∑ì¿∑¶¿∑»¿∑‘¿∑ﬁ¿∏¿∏2¿∏e¿∏v¿∏Ã¿∏¿π¿π¿πN¿πZ¿πd¿πl¿πr¿π§¿π⁄¿πı¿∫¿∫¿∫H¿∫h¿∫|¿∫ç¿∫¨¿∫∂¿∫◊¿ª¿ª3¿ªà¿ªæ¿ªÈ¿ª¸¿º¿º¿º/¿ºd¿ºn¿ºv¿º|¿ºï¿ºô¿ºö¿º¶¿º◊¿Ω
¿Ω@¿Ωn¿Ω®¿Ω‹¿æ¿æ@¿æ~¿æ∏¿æº¿æΩ¿æ˚¿ø¿øF¿øò¿ø≤¿ø∫¿ø¿¿ø‘¿øÿ¿ø⁄¿ø€¿¿¿¿¿¿j¿¿ä¿¿¥¿¿…¿¿Ê¿¡	¿¡(¿¡P¿¡l¿¡r¿¡s¿¡π¿¡◊¿¡ÿ¿¬¿¬¿¬3¿¬N¿¬O¿¬Æ¿¬À¿¬—¿√(¿√y¿√û¿√ü¿√À¿√Â¿√Ê¿ƒ'¿ƒ-¿ƒ]¿ƒ|¿ƒ}¿ƒâ¿ƒ¡¿ƒ√¿ƒƒ¿ƒˆ¿≈0¿≈1¿≈=¿≈P¿≈p¿≈Ö¿≈â¿≈ä¿≈ñ¿≈Ω¿∆¿∆o¿∆ø¿∆∆¿∆˚¿∆¸¿«B¿«°¿«ß¿«®¿«˛¿»/¿»n¿»x¿»~¿»¿»·¿…;¿…ü¿…˚¿ S¿ ß¿ ˇ¿ÀU¿Àê¿À∫¿À◊¿Àˇ¿Ã]¿ÃÑ¿Ã„¿Õ*¿Õm¿Õ¥¿Õ˙¿Œ(¿ŒT¿Œç¿Œƒ¿œ¿œC¿œD¿œí¿œ®¿œ”¿– ¿–9¿–t¿–}¿–Ñ¿–°¿–‰¿—¿—C¿—c¿—É¿—é¿—ñ¿—∏¿—ˆ¿“¿“:¿“E¿“M¿“S¿“T¿“£¿“Ú¿”¿”4¿”e¿”v¿”¶¿”◊¿”Ó¿”Ù¿”ı¿‘!¿‘8¿‘V¿‘l¿‘å¿‘Æ¿‘⁄¿’3¿’^¿’v¿’ö¿’¿¿÷ ¿÷!¿÷B¿÷x¿÷á¿÷≥¿÷ﬂ¿÷ˇ¿◊&¿◊T¿◊Ñ¿◊ª¿◊⁄¿ÿ¿ÿ[¿ÿé¿ÿ¬¿ÿÍ¿ÿˇ¿Ÿ¿Ÿ#¿Ÿ2¿Ÿ?¿ŸJ¿ŸS¿ŸZ¿Ÿ[¿ŸÑ¿Ÿ®¿Ÿ’¿Ÿ˙¿⁄/¿⁄I¿⁄R¿⁄X¿⁄Y¿⁄©¿⁄≠¿⁄Æ¿⁄Ê¿€¿€G¿€|¿€É¿€á¿€â¿€ä¿€¬¿€Î¿€˛¿‹¿‹5¿‹R¿‹r¿‹ï¿‹ª¿‹€¿›¿›#¿›D¿›J¿›K¿›q¿›ö¿›ª¿›Ÿ¿›˜¿ﬁ¿ﬁ8¿ﬁS¿ﬁx¿ﬁõ¿ﬁú¿ﬁ®¿ﬁœ¿ﬂ¿ﬂU¿ﬂπ¿‡¿‡i¿‡p¿‡∂¿·¿·¿·¿·p¿·°¿·‡¿·Í¿·¿·Ò¿‚0¿‚U¿‚™¿‚±¿‚≤¿‚⁄¿„ ¿„I¿„™¿„—¿‰0¿‰w¿‰∫¿Â¿ÂG¿Âu¿Â°¿Â⁄¿Ê¿ÊC¿ÊÅ¿ÊÇ¿Êû¿Ê∏¿Ê’¿Á¿Á6¿Ác¿Áë¿Áü¿Á∏¿Áπ¿Á·¿Ë¿Ëq¿Ë†¿Ë»¿Ë—¿ËÎ¿È¿È?¿ÈZ¿ÈÅ¿È†¿È∫¿ÈÁ¿Í;¿ÍJ¿Íh¿Íõ¿Íº¿Í‚¿Î¿Î@¿ÎÄ¿Î®¿Îπ¿Î»¿Î’¿Î‡¿ÎÈ¿Î¿ÎÒ¿Ï¿ÏX¿Ïu¿Ï∫¿Ï“¿Ï˛¿ÌD¿Ìp¿Ìï¿ÌΩ¿ÌÎ¿ÓA¿Óo¿Óï¿Ó«¿Ó¸¿Ô.¿ÔÇ¿Ôì¿Ô≥¿Ô¬¿Ôœ¿Ô⁄¿Ô„¿ÔÍ¿ÔÎ¿¿¿#¿$¿L¿d¿é¿£¿™¿Æ¿∞¿±¿Ú¿Ò!¿ÒW¿ÒÉ¿ÒÑ¿Òƒ¿Ò≈¿Ò—¿Ú¿Ú@¿ÚA¿ÚM¿ÚÇ¿ÚÑ¿ÚÖ¿Ú‘¿Ú‹¿Ú‡¿Û¿Û¿ÛO¿ÛS¿Û°¿Û´¿ÛÓ¿Û¸¿Ù¿Ù8¿Ùk¿Ùö¿Ùø¿Ù…¿Ù—¿Ù◊¿ÙË¿Ù¿ı4¿ıC¿ıE¿ıF¿ıç¿ı•¿ı»¿ıÂ¿ˆ¿ˆ¿ˆ8¿ˆY¿ˆx¿ˆô¿ˆ≠¿ˆ±¿ˆ≥¿ˆ¥¿ˆ˝¿˜¿˜O¿˜ò¿˜‡¿¯¿¯¿¯¿¯¿¯E¿¯í¿¯ﬂ¿˘*¿˘:¿˘R¿˘T¿˘U¿˘Ä¿˘Å¿˘ƒ¿˙¿˙0¿˙c¿˙d¿˙w¿˙§¿˙«¿˙‘¿˚¿˚d¿˚ó¿˚û¿˚ü¿˚⁄¿¸,¿¸-¿¸K¿¸L¿¸é¿¸è¿¸õ¿¸—¿˝¿˝¿˝¿˝)¿˝\¿˝ô¿˝ù¿˝û¿˝™¿˝‚¿˛)¿˛-¿˛.¿˛:¿˛v¿˛µ¿˛‹¿ˇ¿ˇ¿ˇ#¿ˇ'¿ˇ(¿ˇ4¿ˇz¿ˇ|¿ˇ}¿ˇØ¿ˇ’¿ˇ‚¿ ¿ -¿ `¿ g¿ h¿ Ü¿ á¿ …¿
¿¿¿N¿ë¿ï¿ñ¿≥¿¥¿◊¿ÿ¿‰¿¿J¿N¿O¿[¿í¿›¿¿F¿N¿Ç¿§¿¨¿‡¿¿
¿>¿`¿h¿à¿ê¿î¿ï¿°¿“¿¿R¿Ü¿é¿¬¿Î¿Û¿'¿P¿X¿å¿µ¿Ω¿‰¿Ï¿¿Ò¿¿¿¿H¿Å¿Ö¿Ü¿í¿√¿ ¿¿¿¿B¿à¿å¿ç¿ô¿“¿	 ¿	$¿	[¿	Ü¿	ê¿	π¿	¬¿	…¿	Õ¿	Œ¿	⁄¿
¿
<¿
`¿
ñ¿
À¿
’¿¿A¿K¿Å¿∂¿¿¿„¿Ï¿Û¿˜¿¯¿¿?¿î¿ò¿ô¿Æ¿Ø¿ª¿¿H¿L¿M¿Y¿Ø¿∞¿º¿¿¿ ¿T¿Æ¿ﬁ¿&¿*¿+¿7¿~¿¿∑¿Û¿6¿Ä¿‹¿1¿á¿À¿Û¿:¿@¿è¿›¿Ì¿C¿ù¿…¿˙¿¿^¿h¿ô¿¥¿Â¿Ô¿0¿E¿L¿P¿R¿S¿}¿ù¿™¿È¿:¿h¿o¿p¿´¿˝¿˛¿¿¿_¿`¿l¿¢¿È¿Ì¿Ó¿˙¿2¿y¿}¿~¿ä¿Ω¿˙¿˛¿ˇ¿¿G¿Ü¿—¿ÿ¿‹¿›¿È¿/¿1¿C¿D¿m   ÄΩ/// @docImport 'package:flutter/cupertino.dart';
///
/// @docImport 'app.dart';
/// @docImport 'checkbox_theme.dart';
/// @docImport 'dropdown_menu.dart';
/// @docImport 'radio_theme.dart';ÅmÅÑÅÉ Åä   Å¥   Å›   Ç   Ç.   ÇV   Çr   Çï   Ç≠   Ç…   Çﬂ   Ç¯   É   É%   É=   Éc   ÉÅ   Éü   É¿   É⁄   ÉÙ   Ñ	   Ñ"   Ñ=   ÑW   Ñl     éIÅKéOéO  é|DéÇ éÇéí  éîé£é¢  é©éπé∏   éƒé€é€   éÂÄ≠éˆéˆ  è	èè  éÂéÊ èñ¢´ï6ï6Öô/// A widget used to mark the "anchor" for a set of submenus, defining the
/// rectangle used to position the menu, which can be done either with an
/// explicit location, or with an alignment.
///
/// When creating a menu with [MenuBar] or a [SubmenuButton], a [MenuAnchor] is
/// not needed, since they provide their own internally.
///
/// The [MenuAnchor] is meant to be a slightly lower level interface than
/// [MenuBar], used in situations where a [MenuBar] isn't appropriate, or to
/// construct widgets or screen regions that have submenus.
///
/// {@tool dartpad}
/// This example shows how to use a [MenuAnchor] to wrap a button and open a
/// cascading menu from the button.
///
/// ** See code in examples/api/lib/material/menu_anchor/menu_anchor.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows how to use a [MenuAnchor] to create a cascading context
/// menu in a region of the view, positioned where the user clicks the mouse
/// with Ctrl pressed. The [anchorTapClosesMenu] attribute is set to true so
/// that clicks on the [MenuAnchor] area will cause the menus to be closed.
///
/// ** See code in examples/api/lib/material/menu_anchor/menu_anchor.1.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example demonstrates a simplified cascading menu using the [MenuAnchor]
/// widget.
///
/// ** See code in examples/api/lib/material/menu_anchor/menu_anchor.3.dart **
/// {@end-tool} ï\Çîïª ïªï≈ R/// Creates a const [MenuAnchor].
///
/// The [menuChildren] argument is required.ïÃ	ï”ï“  ï€ï·ï‡  ïïˆïı  ñ	
ññ  ñ"ññ  ñAñGñF  ñU!ñ[ñZ  ñ|Äõñ˝ñ¸  óó#ó"  óAóGóF  óRóXóW  ód"ójói  óåóíóë  ó≠óºóª  óÕó”ó“  óﬂ
óÂó‰  ñ0ñ6ñ7ñiñmñnñ|ñ}ñáñÒñèñ∑óó6óÇó¢óÙÄÉòmòm^/// An optional controller that allows opening and closing of the menu from
/// other widgets. ò|ÅÔö]ö]ÅΩ/// The [childFocusNode] attribute is the optional [FocusNode] also associated
/// to the [child] or [builder] widget that opens the menu.
///
/// The focus node should be attached to the widget that should receive focus
/// if keyboard focus traversal moves the focus off of the submenu with the
/// arrow keys.
///
/// If not supplied, then keyboard traversal from the menu back to the
/// controlling button when the menu is open is disabled. öpÄÎõVõVÄ /// The [MenuStyle] that defines the visual attributes of the menu bar.
///
/// Colors and sizing of the menus is controllable via the [MenuStyle].
///
/// Defaults to the ambient [MenuThemeData.style]. õ`Ñ&üwüwÉ‹/// {@template flutter.material.MenuAnchor.alignmentOffset}
/// The offset of the menu relative to the alignment origin determined by
/// [MenuStyle.alignment] on the [style] attribute and the ambient
/// [Directionality].
///
/// Use this for adjustments of the menu placement.
///
/// Increasing [Offset.dy] values of [alignmentOffset] move the menu position
/// down.
///
/// If the [MenuStyle.alignment] from [style] is not an [AlignmentDirectional]
/// (e.g. [Alignment]), then increasing [Offset.dx] values of
/// [alignmentOffset] move the menu position to the right.
///
/// If the [MenuStyle.alignment] from [style] is an [AlignmentDirectional],
/// then in a [TextDirection.ltr] [Directionality], increasing [Offset.dx]
/// values of [alignmentOffset] move the menu position to the right. In a
/// [TextDirection.rtl] directionality, increasing [Offset.dx] values of
/// [alignmentOffset] move the menu position to the left.
///
/// Defaults to [Offset.zero].
/// {@endtemplate} üãÅ†ë†ëÄÍ/// An optional [LayerLink] to attach the menu to the widget that this
/// [MenuAnchor] surrounds.
///
/// When provided, the menu will follow the widget that this [MenuAnchor]
/// surrounds if it moves because of view insets changes. †üv°	°	X/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.hardEdge]. °Ö}¶Ñ¶ÑÑ√/// Whether the menus will be closed if the anchor area is tapped.
///
/// For menus opened by buttons that toggle the menu, if the button is tapped
/// when the menu is open, the button should close the menu. But if
/// [anchorTapClosesMenu] is true, then the menu will close, and
/// (surprisingly) immediately re-open. This is because tapping on the button
/// closes the menu before the `onPressed` or `onTap` handler is called
/// because of it being considered to be "outside" the menu system, and then
/// the button (seeing that the menu is closed) immediately reopens the menu.
/// The result is that the user thinks that tapping on the button does
/// nothing. So, for button-initiated menus, this value is typically false so
/// that the menu anchor area is considered "inside" of the menu system and
/// doesn't cause it to close unless [MenuController.close] is called.
///
/// For menus that are positioned using [MenuController.open]'s `position`
/// parameter, it is often desirable that clicking on the anchor always closes
/// the menu since the anchor area isn't usually considered part of the menu
/// system by the user. In this case [anchorTapClosesMenu] should be true.
///
/// Defaults to false.¶¶¶¶u¶¶=¶úÅ´®6®6Å|/// Whether or not a tap event that closes the menu will be permitted to
/// continue on to the gesture arena.
///
/// If false, then tapping outside of a menu when the menu is open will both
/// close the menu, and allow the tap to participate in the gesture arena. If
/// true, then it will only close the menu, and the tap event will be
/// consumed.
///
/// Defaults to false. ®LT®ö®ö7/// A callback that is invoked when the menu is opened. ®•U®Û®Û7/// A callback that is invoked when the menu is closed. ®ˇÅ¶™è™èÅx/// Determine if the menu panel can be wrapped by a [UnconstrainedBox] which allows
/// the panel to render at its "natural" size.
///
/// Defaults to true as it allows developers to render the menu panel at the
/// size it should be. When it is set to false, it can be useful when the menu should
/// be constrained in both main axis and cross axis, such as a [DropdownMenu]. ™™t´´T/// {@macro flutter.widgets.RawMenuAnchor.useRootOverlay}
///
/// Defaults to false. ´#Äÿ´Ô´ÔÄ∞/// A list of children containing the menu items that are the contents of the
/// menu surrounded by this [MenuAnchor].
///
/// {@macro flutter.material.MenuBar.shortcuts_note} ¨ Åµ≠Æ≠ÆÅ{/// The widget that this [MenuAnchor] surrounds.
///
/// Typically this is a button used to open the menu by calling
/// [MenuController.open] on the `controller` passed to the builder.
///
/// If not supplied, then the [MenuAnchor] will be the size that its parent
/// allocates for it.
///
/// If provided, the builder will be called each time the menu is opened or
/// closed. ≠∫ÅkØ Ø ÅK/// The optional child to be passed to the [builder].
///
/// Supply this child if there is a portion of the widget tree built in
/// [builder] that doesn't depend on the `controller` or `context` supplied to
/// the [builder]. It will be more efficient, since Flutter doesn't then need
/// to rebuild this child when those change.  Ø*BØHØH   Ø*Ø+ØpÄ£ØíØí   ØpØq∞Ç(∞(∞(  ∞<&∞Y∞X  ∞∞ ≤CçΩ≤I≤I   ≤˘'≥	≥	  ≥$6≥9≥9 ≥J≥X≥Y≤x'≤Å≤Å    ≤¢T≤µ≤µ    ≥^D≥t≥t    ∫wÄ¢∫å∫å    
≥¶Äñ≥∑≥∑   ≥¶≥ß¥@ÄÚ¥Q¥Q  ¥a¥m¥l  ¥@¥Aµ6Ä©µGµG   µ6µ7µ„Çâµˆµˆ  µ¸∂
∂	  µ„µ‰∏pÇ∏w∏w  ∏Ö∏ì∏í  ∏õ∏Ø∏Æ   ªÄŒª"ª"    ªÔÅñªÙªÙ    ΩâÅkΩéΩé    æ¯Ääøø  øø(ø'   øÜxøôøô  ø£0ø¥ø≥  øÜøáøæøÕøŒ ¿ @îŒ¿ Mh¿ Mhç_/// A menu bar that manages cascading child menus.
///
/// This is a Material Design menu bar that typically resides above the main
/// body of an application (but can go anywhere) that defines a menu system for
/// invoking callbacks in response to user selection of a menu item.
///
/// The menus can be opened with a click or tap. Once a menu is opened, it can
/// be navigated by using the arrow and tab keys or via mouse hover. Selecting a
/// menu item can be done by pressing enter, or by clicking or tapping on the
/// menu item. Clicking or tapping on any part of the user interface that isn't
/// part of the menu system controlled by the same controller will cause all of
/// the menus controlled by that controller to close, as will pressing the
/// escape key.
///
/// When a menu item with a submenu is clicked on, it toggles the visibility of
/// the submenu. When the menu item is hovered over, the submenu will open, and
/// hovering over other items will close the previous menu and open the newly
/// hovered one. When those open/close transitions occur,
/// [SubmenuButton.onOpen], and [SubmenuButton.onClose] are called on the
/// corresponding [SubmenuButton] child of the menu bar.
///
/// {@template flutter.material.MenuBar.shortcuts_note}
/// Menus using [MenuItemButton] can have a [SingleActivator] or
/// [CharacterActivator] assigned to them as their [MenuItemButton.shortcut],
/// which will display an appropriate shortcut hint. Even though the shortcut
/// labels are displayed in the menu, shortcuts are not automatically handled.
/// They must be available in whatever context they are appropriate, and handled
/// via another mechanism.
///
/// If shortcuts should be generally enabled, but are not easily defined in a
/// context surrounding the menu bar, consider registering them with a
/// [ShortcutRegistry] (one is already included in the [WidgetsApp], and thus
/// also [MaterialApp] and [CupertinoApp]), as shown in the example below. To be
/// sure that selecting a menu item and triggering the shortcut do the same
/// thing, it is recommended that they call the same callback.
///
/// {@tool dartpad} This example shows a [MenuBar] that contains a single top
/// level menu, containing three items: "About", a checkbox menu item for
/// showing a message, and "Quit". The items are identified with an enum value,
/// and the shortcuts are registered globally with the [ShortcutRegistry].
///
/// ** See code in examples/api/lib/material/menu_anchor/menu_bar.0.dart **
/// {@end-tool}
/// {@endtemplate}
///
/// {@macro flutter.material.MenuAcceleratorLabel.accelerator_sample}
///
/// See also:
///
/// * [MenuAnchor], a widget that creates a region with a submenu and shows it
///   when requested.
/// * [SubmenuButton], a menu item which manages a submenu.
/// * [MenuItemButton], a leaf menu item which displays the label, an optional
///   shortcut label, and optional leading and trailing icons.
/// * [PlatformMenuBar], which creates a menu bar that is rendered by the host
///   platform instead of by Flutter (on macOS, for example).
/// * [ShortcutRegistry], a registry of shortcuts that apply for the entire
///   application.
/// * [VoidCallbackIntent], to define intents that will call a [VoidCallback] and
///   work with the [Actions] and [Shortcuts] system.
/// * [CallbackShortcuts], to define shortcuts that call a callback without
///   involving [Actions]. ¿ MåÄ⁄¿ M‰ ¿ M‰¿ MÎ K/// Creates a const [MenuBar].
///
/// The [children] argument is required.¿ MÚ	¿ M˘¿ M¯  ¿ N
¿ N¿ N  ¿ N¿ N¿ N  ¿ N4¿ N:¿ N9  ¿ NI¿ NX¿ NW  ¿ N%¿ N)¿ N*¿ NjÄÎ¿ OP¿ OPÄ /// The [MenuStyle] that defines the visual attributes of the menu bar.
///
/// Colors and sizing of the menus is controllable via the [MenuStyle].
///
/// Defaults to the ambient [MenuThemeData.style]. ¿ OZr¿ O¿¿ O¿T/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.none]. ¿ O—U¿ P¿ P2/// The [MenuController] to use for this menu bar. ¿ P+Åµ¿ Qÿ¿ QÿÅâ/// The list of menu items that are the top level children of the [MenuBar].
///
/// A Widget in Flutter is immutable, so directly modifying the [children]
/// with [List] APIs such as `someMenuBarWidget.menus.add(...)` will result in
/// incorrect behaviors. Whenever the menus list is modified, a new list
/// object must be provided.
///
/// {@macro flutter.material.MenuBar.shortcuts_note}  ¿ QÂÄÛ¿ Q¯¿ Q¯  ¿ Q˛¿ R¿ R  ¿ QÂ¿ QÊ¿ R‹Ä∑¿ R˛¿ R˛   ¿ R‹¿ R›¿ SóÅ7¿ S®¿ S®  ¿ Sº&¿ SŸ¿ Sÿ  ¿ Só¿ Sò ¿ T“ßÉ¿ Yg¿ YgÑé/// A button for use in a [MenuBar], in a menu created with [MenuAnchor], or on
/// its own, that can be activated by click or keyboard navigation.
///
/// This widget represents a leaf entry in a menu hierarchy that is typically
/// part of a [MenuBar], but may be used independently, or as part of a menu
/// created with a [MenuAnchor].
///
/// {@macro flutter.material.MenuBar.shortcuts_note}
///
/// See also:
///
/// * [MenuBar], a class that creates a top level menu bar in a Material Design
///   style.
/// * [MenuAnchor], a widget that creates a region with a submenu and shows it
///   when requested.
/// * [SubmenuButton], a menu item similar to this one which manages a submenu.
/// * [PlatformMenuBar], which creates a menu bar that is rendered by the host
///   platform instead of by Flutter (on macOS, for example).
/// * [ShortcutRegistry], a registry of shortcuts that apply for the entire
///   application.
/// * [VoidCallbackIntent], to define intents that will call a [VoidCallback] and
///   work with the [Actions] and [Shortcuts] system.
/// * [CallbackShortcuts] to define shortcuts that call a callback without
///   involving [Actions]. ¿ YëÇ¿ YÓ ¿ YÓ¿ Y¸ P/// Creates a const [MenuItemButton].
///
/// The [child] attribute is required.¿ Z	¿ Z
¿ Z	  ¿ Z¿ Z¿ Z  ¿ Z&¿ Z,¿ Z+  ¿ Z8¿ Z>¿ Z=  ¿ Z]¿ Zc¿ Zb  ¿ Zu¿ Z{¿ Zz  ¿ Zâ¿ Zè¿ Zé  ¿ Z•¿ Z´¿ Z™  ¿ Z∏¿ Zæ¿ ZΩ  ¿ Z—
¿ Z◊¿ Z÷  ¿ Z·¿ ZÁ¿ ZÊ  ¿ Z¸¿ [¿ [  ¿ [¿ [%¿ [$  ¿ [5¿ [;¿ [:  ¿ [L¿ [R¿ [Q  ¿ [m#¿ [s¿ [r  ¿ [ñ
¿ [ú¿ [õ  	¿ ZS¿ Zö¿ [¿ [¿ [¿ [c¿ [Å¿ [Ö¿ [Ü¿ [´Ä¸¿ \û¿ \ûÄ–/// Called when the button is tapped or otherwise activated.
///
/// If this callback is null, then the button will be disabled.
///
/// See also:
///
///  * [enabled], which is true if the button is enabled. ¿ \¨ÄÍ¿ ]è¿ ]èÄ¿/// Called when a pointer enters or exits the button response area.
///
/// The value passed to the callback is true if a pointer has entered button
/// area and false if a pointer has exited. ¿ ]õk¿ ]Û¿ ]ÛF/// Determine if hovering can request focus.
///
/// Defaults to true. ¿ ^Ä∑¿ ^µ¿ ^µÄá/// Handler called when the focus changes.
///
/// Called with true if this widget's node gains focus, and false if it loses
/// focus. ¿ ^«I¿ _¿ _,/// {@macro flutter.widgets.Focus.focusNode} ¿ _C¿ _O¿ _O,/// {@macro flutter.widgets.Focus.autofocus} ¿ _]Ä•¿ _˙¿ _˙v/// The optional shortcut that selects this [MenuItemButton].
///
/// {@macro flutter.material.MenuBar.shortcuts_note} ¿ `Çy¿ br¿ brÇB/// An optional Semantics label, applied to the entire [MenuItemButton].
///
/// A screen reader will default to reading the derived text on the
/// [MenuItemButton] itself, which is not guaranteed to be readable.
/// (For some shortcuts, such as comma, semicolon, and other
/// punctuation, screen readers read silence).
///
/// Setting this label overwrites the semantics properties of the entire
/// Widget, including its children. Consider wrapping this widget in
/// [Semantics] if you want to customize other properties besides just
/// the label.
///
/// Null by default. ¿ bÖÅé¿ d¿ dÅe/// Customizes this button's appearance.
///
/// Non-null properties of this style override the corresponding properties in
/// [themeStyleOf] and [defaultStyleOf]. [WidgetStateProperty]s that resolve
/// to non-null values will similarly override the corresponding
/// [WidgetStateProperty]s in [themeStyleOf] and [defaultStyleOf].
///
/// Null by default. ¿ di¿ dq¿ dq6/// {@macro flutter.material.inkwell.statesController} ¿ dÜr¿ dÏ¿ dÏT/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.none]. ¿ d˝U¿ eG¿ eG9/// An optional icon to display before the [child] label. ¿ eWU¿ e†¿ e†8/// An optional icon to display after the [child] label. ¿ e±Ä‚¿ fÑ¿ fÑÄª/// {@template flutter.material.menu_anchor.closeOnActivate}
/// Determines if the menu will be closed when a [MenuItemButton]
/// is pressed.
///
/// Defaults to true.
/// {@endtemplate} ¿ fòÅ¶¿ h2¿ h2Åz/// The direction in which the menu item expands.
///
/// If the menu item button is a descendent of [MenuAnchor] or [MenuBar], then
/// this property is ignored.
///
/// If [overflowAxis] is [Axis.vertical], the menu will be expanded vertically.
/// If [overflowAxis] is [Axis.horizontal], then the menu will be
/// expanded horizontally.
///
/// Defaults to [Axis.horizontal]. ¿ hCÄÃ¿ i
¿ i
ÄÆ/// The widget displayed in the center of this button.
///
/// Typically this is the button's label, using a [Text] widget.
///
/// {@macro flutter.widgets.ProxyWidget.child} ¿ iÄ©¿ i†¿ i†|/// Whether the button is enabled or disabled.
///
/// To enable a button, set its [onPressed] property to a non-null value.   ¿ i¡J¿ i„¿ i„   ¿ i¡¿ i¬¿ jÅ¿ j“¿ j“Ä¨/// Defines the button's default appearance.
///
/// {@macro flutter.material.text_button.default_style_of}
///
/// {@macro flutter.material.text_button.material3_defaults} ¿ j·¿ jÔ¿ jÓ   ¿ k+Ä¬¿ kó¿ kóZ/// Returns the [MenuButtonThemeData.style] of the closest
/// [MenuButtonTheme] ancestor. ¿ k§¿ k≤¿ k±   ¿ kÒçC¿ r[¿ r[Ü
/// A static convenience method that constructs a [MenuItemButton]'s
/// [ButtonStyle] given simple values.
///
/// The [foregroundColor] color is used to create a [WidgetStateProperty]
/// [ButtonStyle.foregroundColor] value. Specify a value for [foregroundColor]
/// to specify the color of the button's icons. Use [backgroundColor] for the
/// button's background fill color. Use [disabledForegroundColor] and
/// [disabledBackgroundColor] to specify the button's disabled icon and fill
/// color.
///
/// Similarly, the [enabledMouseCursor] and [disabledMouseCursor]
/// parameters are used to construct [ButtonStyle.mouseCursor].
///
/// The [iconColor], [disabledIconColor] are used to construct
/// [ButtonStyle.iconColor] and [iconSize] is used to construct
/// [ButtonStyle.iconSize].
///
/// All of the other parameters are either used directly or used to create a
/// [WidgetStateProperty] with a single value for all states.
///
/// All parameters default to null, by default this method returns a
/// [ButtonStyle] that doesn't override anything.
///
/// For example, to override the default foreground color for a
/// [MenuItemButton], as well as its overlay color, with all of the standard
/// opacity adjustments for the pressed, focused, and hovered states, one
/// could write:
///
/// ```dart
/// MenuItemButton(
///   leadingIcon: const Icon(Icons.pets),
///   style: MenuItemButton.styleFrom(foregroundColor: Colors.green),
///   onPressed: () {
///     // ...
///   },
///   child: const Text('Button Label'),
/// ),
/// ``` ¿ rk¿ rs¿ rr  ¿ rá¿ rè¿ ré  ¿ r£¿ r´¿ r™  ¿ r«¿ rœ¿ rŒ  ¿ rÎ¿ rÛ¿ rÚ  ¿ s¿ s¿ s
  ¿ s ¿ s(¿ s'  ¿ s6¿ s?¿ s>  ¿ sL¿ sT¿ sS  ¿ sj¿ sv¿ su  ¿ sÑ¿ så¿ sã  ¿ sù¿ s¶¿ s•  ¿ s¥¿ s…¿ s»  ¿ s’¿ s‹¿ s€  ¿ sÏ¿ sÛ¿ sÚ  ¿ t¿ t¿ t  ¿ t¿ t&¿ t%  ¿ t= ¿ tK¿ tJ  ¿ tc¿ tp¿ to  ¿ ty¿ tä¿ tâ  ¿ tî¿ t§¿ t£  ¿ t∂$¿ tŒ¿ tÕ  ¿ t‡¿ tÎ¿ tÍ  ¿ u¿ u¿ u  ¿ u¿ u/¿ u.  ¿ u=+¿ u\¿ u[   ¿ y8É¿ yI¿ yI  ¿ y]&¿ yz¿ yy  ¿ y8¿ y9 ¿ |Wëî¿ |]¿ |]   ¿ |‰¿ |Ô¿ |Ô  ¿ }ì¿ }ò¿ }ò ¿ }•¿ }D¿ }¿ }    ¿ }LD¿ }b¿ }b    	¿ }ØÄë¿ }¿¿ }¿   ¿ }Ø¿ }∞¿ ~DÄ™¿ ~U¿ ~U   ¿ ~D¿ ~E¿ ~ÚÅ ¿ ¿   ¿ ¿ #¿ "  ¿ ~Ú¿ ~Û¿ Ä¿ÜG¿ Ä”¿ Ä”  ¿ ÄŸ¿ ÄÁ¿ ÄÊ  ¿ Ä¿¿ Ä¡¿ áÄ∫¿ á¿ á    ¿ á…Äé¿ áŒ¿ áŒ  ¿ á·¿ áÛ¿ áÚ   ¿ à¬Ç¿ à«¿ à«  ¿ à€¿ àÓ¿ àÌ   ¿ ä…Ç¿ äŒ¿ äŒ    ¿ åÍÄˇ¿ åÔ¿ åÔ     ¿ çÌô¿ êE¿ êEÇQ/// A menu item that combines a [Checkbox] widget with a [MenuItemButton].
///
/// To style the checkbox separately from the button, add a [CheckboxTheme]
/// ancestor.
///
/// {@tool dartpad}
/// This example shows a menu with a checkbox that shows a message in the body
/// of the app if checked.
///
/// ** See code in examples/api/lib/material/menu_anchor/checkbox_menu_button.0.dart **
/// {@end-tool}
///
/// See also:
///
/// - [MenuBar], a widget that creates a menu bar of cascading menu items.
/// - [MenuAnchor], a widget that defines a region which can host a cascading
///   menu. ¿ êtÇ¿ êÒ ¿ êÒ¿ ë p/// Creates a const [CheckboxMenuButton].
///
/// The [child], [value], and [onChanged] attributes are required.¿ ë
	¿ ë¿ ë  ¿ ë¿ ë(¿ ë'  ¿ ë2¿ ë8¿ ë7  ¿ ëM¿ ëS¿ ëR  ¿ ëg¿ ëv¿ ëu  ¿ ëÑ¿ ëä¿ ëâ  ¿ ëñ¿ ëú¿ ëõ  ¿ ëÆ¿ ë¥¿ ë≥  ¿ ë¬¿ ë»¿ ë«  ¿ ë’
¿ ë€¿ ë⁄  ¿ ëÂ¿ ëÎ¿ ëÍ  ¿ í ¿ í¿ í  ¿ í#¿ í)¿ í(  ¿ í:¿ í@¿ í?  ¿ í[¿ íj¿ íi  ¿ ëB¿ ë\¿ í¿ í¿ í¿ íQ¿ íyÄÀ¿ ì?¿ ì?Ä±/// Whether this checkbox is checked.
///
/// When [tristate] is true, a value of null corresponds to the mixed state.
/// When [tristate] is false, this value must not be null. ¿ ìIÇ¿ ïT¿ ïTÅÎ/// If true, then the checkbox's [value] can be true, false, or null.
///
/// [CheckboxMenuButton] displays a dash when its value is null.
///
/// When a tri-state checkbox ([tristate] is true) is tapped, its [onChanged]
/// callback will be applied to true if the current value is false, to null if
/// value is true, and to false if value is null (i.e. it cycles through false
/// => true => null => false when tapped).
///
/// If tristate is false (the default), [value] must not be null. ¿ ïaÅ¿ ñs¿ ñsÄ˙/// True if this checkbox wants to show an error state.
///
/// The checkbox will have different default container color and check color when
/// this is true. This is only used when [ThemeData.useMaterial3] is set to true.
///
/// Defaults to false. ¿ ñÑS¿ ö…¿ ö…ÉÙ/// Called when the value of the checkbox should change.
///
/// The checkbox passes the new value to the callback but does not actually
/// change state until the parent widget rebuilds the checkbox with the new
/// value.
///
/// If this callback is null, the menu item will be displayed as disabled
/// and will not respond to input gestures.
///
/// When the checkbox is tapped, if [tristate] is false (the default) then the
/// [onChanged] callback will be applied to `!value`. If [tristate] is true
/// this callback cycle from false to true to null and then back to false
/// again.
///
/// The callback provided to [onChanged] should update the state of the parent
/// [StatefulWidget] using the [State.setState] method, so that the parent
/// gets rebuilt; for example:
///
/// ```dart
/// CheckboxMenuButton(
///   value: _throwShotAway,
///   child: const Text('THROW'),
///   onChanged: (bool? newValue) {
///     setState(() {
///       _throwShotAway = newValue!;
///     });
///   },
/// )
/// ``` ¿ ö◊ÄÍ¿ õ∫¿ õ∫Ä¿/// Called when a pointer enters or exits the button response area.
///
/// The value passed to the callback is true if a pointer has entered button
/// area and false if a pointer has exited. ¿ õ∆Ä∑¿ úp¿ úpÄá/// Handler called when the focus changes.
///
/// Called with true if this widget's node gains focus, and false if it loses
/// focus. ¿ úÇI¿ ú¬¿ ú¬,/// {@macro flutter.widgets.Focus.focusNode} ¿ ú–Ä•¿ ùm¿ ùmv/// The optional shortcut that selects this [MenuItemButton].
///
/// {@macro flutter.material.MenuBar.shortcuts_note} ¿ ùzÅ–¿ üE¿ üEÅ•/// Customizes this button's appearance.
///
/// Non-null properties of this style override the corresponding properties in
/// [MenuItemButton.themeStyleOf] and [MenuItemButton.defaultStyleOf].
/// [WidgetStateProperty]s that resolve to non-null values will similarly
/// override the corresponding [WidgetStateProperty]s in
/// [MenuItemButton.themeStyleOf] and [MenuItemButton.defaultStyleOf].
///
/// Null by default. ¿ üOi¿ ü®¿ ü®6/// {@macro flutter.material.inkwell.statesController} ¿ üΩr¿ †#¿ †#T/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.none]. ¿ †4U¿ †}¿ †}8/// An optional icon to display after the [child] label. ¿ †éV¿ †’¿ †’9/// {@macro flutter.material.menu_anchor.closeOnActivate} ¿ †ÈÄÃ¿ °∞¿ °∞ÄÆ/// The widget displayed in the center of this button.
///
/// Typically this is the button's label, using a [Text] widget.
///
/// {@macro flutter.widgets.ProxyWidget.child} ¿ °∫Ä©¿ ¢F¿ ¢F|/// Whether the button is enabled or disabled.
///
/// To enable a button, set its [onChanged] property to a non-null value.   ¿ ¢gÑ¢¿ ¢z¿ ¢z  ¿ ¢Ä¿ ¢é¿ ¢ç  ¿ ¢g¿ ¢h ¿ ßòü¿ ©ï¿ ©ïÇÅ/// A menu item that combines a [Radio] widget with a [MenuItemButton].
///
/// To style the radio button separately from the overall button, add a
/// [RadioTheme] ancestor.
///
/// {@tool dartpad}
/// This example shows a menu with three radio buttons with shortcuts that
/// changes the background color of the body when the buttons are selected.
///
/// ** See code in examples/api/lib/material/menu_anchor/radio_menu_button.0.dart **
/// {@end-tool}
///
/// See also:
///
/// - [MenuBar], a widget that creates a menu bar of cascading menu items.
/// - [MenuAnchor], a widget that defines a region which can host a cascading
///   menu.¿ ©•¿ ©•¿ ©•¿ ©ƒÅÂ¿ ™" ¿ ™"¿ ™1 Q/// Creates a const [RadioMenuButton].
///
/// The [child] attribute is required.¿ ™8	¿ ™?¿ ™>  ¿ ™G¿ ™V¿ ™U  ¿ ™`¿ ™o¿ ™n  ¿ ™~¿ ™ç¿ ™å  ¿ ™õ¿ ™°¿ ™†  ¿ ™∏¿ ™æ¿ ™Ω  ¿ ™ ¿ ™–¿ ™œ  ¿ ™‚¿ ™Ë¿ ™Á  ¿ ™ˆ¿ ™¸¿ ™˚  ¿ ´	
¿ ´¿ ´  ¿ ´¿ ´¿ ´  ¿ ´4¿ ´:¿ ´9  ¿ ´W¿ ´]¿ ´\  ¿ ´n¿ ´t¿ ´s  ¿ ´è¿ ´û¿ ´ù  ¿ ™≠¿ ´H¿ ´L¿ ´M¿ ´Ö¿ ´≠Ä£¿ ¨K¿ ¨KÄç/// The value represented by this radio button.
///
/// This radio button is considered selected if its [value] matches the
/// [groupValue]. ¿ ¨UÄ∏¿ ≠¿ ≠Äú/// The currently selected value for a group of radio buttons.
///
/// This radio button is considered selected if its [value] matches the
/// [groupValue]. ¿ ≠ÇÂ¿ ØÌ¿ ØÌÇØ/// Set to true if this radio button is allowed to be returned to an
/// indeterminate state by selecting it again when selected.
///
/// To indicate returning to an indeterminate state, [onChanged] will be
/// called with null.
///
/// If true, [onChanged] can be called with [value] when selected while
/// [groupValue] != [value], or with null when selected again while
/// [groupValue] == [value].
///
/// If false, [onChanged] will be called with [value] when it is selected
/// while [groupValue] != [value], and only by selecting another radio button
/// in the group (i.e. changing the value of [groupValue]) can this radio
/// button be unselected.
///
/// The default is false. ¿ Ø¸ÉÂ¿ ≥ÿ¿ ≥ÿÉç/// Called when the user selects this radio button.
///
/// The radio button passes [value] as a parameter to this callback. The radio
/// button does not actually change state until the parent widget rebuilds the
/// radio button with the new [groupValue].
///
/// If null, the radio button will be displayed as disabled.
///
/// The provided callback will not be invoked if this radio button is already
/// selected.
///
/// The callback provided to [onChanged] should update the state of the parent
/// [StatefulWidget] using the [State.setState] method, so that the parent
/// gets rebuilt; for example:
///
/// ```dart
/// RadioMenuButton<SingingCharacter>(
///   value: SingingCharacter.lafayette,
///   groupValue: _character,
///   onChanged: (SingingCharacter? newValue) {
///     setState(() {
///       _character = newValue;
///     });
///   },
///   child: const Text('Lafayette'),
/// )
/// ``` ¿ ≥ÊÄÍ¿ ¥…¿ ¥…Ä¿/// Called when a pointer enters or exits the button response area.
///
/// The value passed to the callback is true if a pointer has entered button
/// area and false if a pointer has exited. ¿ ¥’Ä∑¿ µ¿ µÄá/// Handler called when the focus changes.
///
/// Called with true if this widget's node gains focus, and false if it loses
/// focus. ¿ µëI¿ µ—¿ µ—,/// {@macro flutter.widgets.Focus.focusNode} ¿ µﬂÄ•¿ ∂|¿ ∂|v/// The optional shortcut that selects this [MenuItemButton].
///
/// {@macro flutter.material.MenuBar.shortcuts_note} ¿ ∂âÅ–¿ ∏T¿ ∏TÅ•/// Customizes this button's appearance.
///
/// Non-null properties of this style override the corresponding properties in
/// [MenuItemButton.themeStyleOf] and [MenuItemButton.defaultStyleOf].
/// [WidgetStateProperty]s that resolve to non-null values will similarly
/// override the corresponding [WidgetStateProperty]s in
/// [MenuItemButton.themeStyleOf] and [MenuItemButton.defaultStyleOf].
///
/// Null by default. ¿ ∏^i¿ ∏∑¿ ∏∑6/// {@macro flutter.material.inkwell.statesController} ¿ ∏Ãr¿ π2¿ π2T/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.none]. ¿ πCU¿ πå¿ πå8/// An optional icon to display after the [child] label. ¿ πùV¿ π‰¿ π‰9/// {@macro flutter.material.menu_anchor.closeOnActivate} ¿ π¯ÄÃ¿ ∫ø¿ ∫øÄÆ/// The widget displayed in the center of this button.
///
/// Typically this is the button's label, using a [Text] widget.
///
/// {@macro flutter.widgets.ProxyWidget.child} ¿ ∫…Ä©¿ ªU¿ ªU|/// Whether the button is enabled or disabled.
///
/// To enable a button, set its [onChanged] property to a non-null value.   ¿ ªvÑ4¿ ªâ¿ ªâ  ¿ ªè¿ ªù¿ ªú  ¿ ªv¿ ªw ¿ øÆ¶Ö¿ ƒ÷¿ ƒ÷Ö!/// A menu button that displays a cascading menu.
///
/// It can be used as part of a [MenuBar], or as a standalone widget.
///
/// This widget represents a menu item that has a submenu. Like the leaf
/// [MenuItemButton], it shows a label with an optional leading or trailing
/// icon, but additionally shows an arrow icon showing that it has a submenu.
///
/// By default the submenu will appear to the side of the controlling button.
/// The alignment and offset of the submenu can be controlled by setting
/// [MenuStyle.alignment] on the [style] and the [alignmentOffset] argument,
/// respectively.
///
/// When activated (by being clicked, through keyboard navigation, or via
/// hovering with a mouse), it will open a submenu containing the
/// [menuChildren].
///
/// If [menuChildren] is empty, then this menu item will appear disabled.
///
/// See also:
///
/// * [MenuItemButton], a widget that represents a leaf menu item that does not
///   host a submenu.
/// * [MenuBar], a widget that renders menu items in a row in a Material Design
///   style.
/// * [MenuAnchor], a widget that creates a region with a submenu and shows it
///   when requested.
/// * [PlatformMenuBar], a widget that renders similar menu bar items from a
///   [PlatformMenuItem] using platform-native APIs instead of Flutter. ¿ ƒˇÇ(¿ ≈p ¿ ≈p¿ ≈} d/// Creates a const [SubmenuButton].
///
/// The [child] and [menuChildren] attributes are required.¿ ≈Ñ	¿ ≈ã¿ ≈ä  ¿ ≈ì¿ ≈ô¿ ≈ò  ¿ ≈•¿ ≈´¿ ≈™  ¿ ≈Ω¿ ≈√¿ ≈¬  ¿ ≈Œ¿ ≈‘¿ ≈”  ¿ ≈‡¿ ≈Ê¿ ≈Â  ¿ ≈ı
¿ ≈˚¿ ≈˙  ¿ ∆¿ ∆¿ ∆
  ¿ ∆¿ ∆¿ ∆  ¿ ∆3!¿ ∆9¿ ∆8  ¿ ∆Z¿ ∆`¿ ∆_  ¿ ∆n¿ ∆t¿ ∆s  ¿ ∆â¿ ∆è¿ ∆é  ¿ ∆ü¿ ∆•¿ ∆§  ¿ ∆∂¿ ∆º¿ ∆ª  ¿ ∆Ã¿ ∆“¿ ∆—  ¿ ∆Ì¿ ∆¸¿ ∆˚  ¿ «¿ «¿ «  ¿ ∆G¿ ∆K¿ ∆L¿ ∆‚¿ «+Äˆ¿ »¿ »ÄÃ/// Called when a pointer enters or exits the button response area.
///
/// The value passed to the callback is true if a pointer has entered this
/// part of the button and false if a pointer has exited. ¿ »&Äæ¿ »◊¿ »◊Äé/// Handler called when the focus changes.
///
/// Called with true if this widget's [focusNode] gains focus, and false if it
/// loses focus. ¿ »ÈT¿ …7¿ …77/// A callback that is invoked when the menu is opened. ¿ …BU¿ …ê¿ …ê7/// A callback that is invoked when the menu is closed. ¿ …úU¿ …Á¿ …Á2/// An optional [MenuController] for this submenu. ¿ …ˆÅé¿ À¿ ÀÅe/// Customizes this button's appearance.
///
/// Non-null properties of this style override the corresponding properties in
/// [themeStyleOf] and [defaultStyleOf]. [WidgetStateProperty]s that resolve
/// to non-null values will similarly override the corresponding
/// [WidgetStateProperty]s in [themeStyleOf] and [defaultStyleOf].
///
/// Null by default. ¿ ÀâÄ∞¿ Ã0¿ Ã0Äè/// The [MenuStyle] of the menu specified by [menuChildren].
///
/// Defaults to the value of [MenuThemeData.style] of the ambient [MenuTheme]. ¿ Ã>Å©¿ Õÿ¿ ÕÿÅ{/// The offset of the menu relative to the alignment origin determined by
/// [MenuStyle.alignment] on the [style] attribute.
///
/// Use this for fine adjustments of the menu placement.
///
/// Defaults to an offset that takes into account the padding of the menu so
/// that the top starting corner of the first menu item is aligned with the
/// top of the [MenuAnchor] region. ¿ ÕÏv¿ ŒV¿ ŒVX/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.hardEdge]. ¿ ŒgI¿ Œß¿ Œß,/// {@macro flutter.widgets.Focus.focusNode} ¿ Œµi¿ œ¿ œ6/// {@macro flutter.material.inkwell.statesController} ¿ œ#O¿ œg¿ œg3/// An optional icon to display before the [child]. ¿ œwÅ≈¿ —1¿ —1Å/// If provided, the widget replaces the default [SubmenuButton] arrow icon.
///
/// Resolves in the following states:
///  * [WidgetState.disabled].
///  * [WidgetState.hovered].
///  * [WidgetState.focused].
///
/// If this is null, then the value of [MenuThemeData.submenuIcon] is used.
/// If that is also null, then defaults to a right arrow icon with the size
/// of 24 pixels. ¿ —AO¿ —Ñ¿ —Ñ2/// An optional icon to display after the [child]. ¿ —ït¿ —˚¿ —˚T/// {@macro flutter.widgets.RawMenuAnchor.useRootOverlay}
///
/// Defaults to false. ¿ “Å8¿ ”:¿ ”:Å
/// The list of widgets that appear in the menu when it is opened.
///
/// These can be any widget, but are typically either [MenuItemButton] or
/// [SubmenuButton] widgets.
///
/// If [menuChildren] is empty, then the button for this menu item will be
/// disabled. ¿ ”KÄ‘¿ ‘¿ ‘Ä∂/// The widget displayed in the middle portion of this button.
///
/// Typically this is the button's label, using a [Text] widget.
///
/// {@macro flutter.widgets.ProxyWidget.child}  ¿ ‘$H¿ ‘E¿ ‘E   ¿ ‘$¿ ‘%¿ ‘pÅ¿ ’3¿ ’3Ä¨/// Defines the button's default appearance.
///
/// {@macro flutter.material.text_button.default_style_of}
///
/// {@macro flutter.material.text_button.material3_defaults} ¿ ’B¿ ’P¿ ’O   ¿ ’åÄ¬¿ ’¯¿ ’¯Z/// Returns the [MenuButtonThemeData.style] of the closest [MenuButtonTheme]
/// ancestor. ¿ ÷¿ ÷¿ ÷   ¿ ÷Rç>¿ ‹∑¿ ‹∑Ü	/// A static convenience method that constructs a [SubmenuButton]'s
/// [ButtonStyle] given simple values.
///
/// The [foregroundColor] color is used to create a [WidgetStateProperty]
/// [ButtonStyle.foregroundColor] value. Specify a value for [foregroundColor]
/// to specify the color of the button's icons. Use [backgroundColor] for the
/// button's background fill color. Use [disabledForegroundColor] and
/// [disabledBackgroundColor] to specify the button's disabled icon and fill
/// color.
///
/// Similarly, the [enabledMouseCursor] and [disabledMouseCursor]
/// parameters are used to construct [ButtonStyle.mouseCursor].
///
/// The [iconColor], [disabledIconColor] are used to construct
/// [ButtonStyle.iconColor] and [iconSize] is used to construct
/// [ButtonStyle.iconSize].
///
/// All of the other parameters are either used directly or used to create a
/// [WidgetStateProperty] with a single value for all states.
///
/// All parameters default to null, by default this method returns a
/// [ButtonStyle] that doesn't override anything.
///
/// For example, to override the default foreground color for a
/// [SubmenuButton], as well as its overlay color, with all of the standard
/// opacity adjustments for the pressed, focused, and hovered states, one
/// could write:
///
/// ```dart
/// SubmenuButton(
///   leadingIcon: const Icon(Icons.pets),
///   style: SubmenuButton.styleFrom(foregroundColor: Colors.green),
///   menuChildren: const <Widget>[ /* ... */ ],
///   child: const Text('Button Label'),
/// ),
/// ``` ¿ ‹«¿ ‹œ¿ ‹Œ  ¿ ‹„¿ ‹Î¿ ‹Í  ¿ ‹ˇ¿ ›¿ ›  ¿ ›#¿ ›+¿ ›*  ¿ ›G¿ ›O¿ ›N  ¿ ›_¿ ›g¿ ›f  ¿ ›|¿ ›Ñ¿ ›É  ¿ ›í¿ ›õ¿ ›ö  ¿ ›®¿ ›∞¿ ›Ø  ¿ ›∆¿ ›“¿ ›—  ¿ ›‡¿ ›Ë¿ ›Á  ¿ ›˘¿ ﬁ¿ ﬁ  ¿ ﬁ¿ ﬁ%¿ ﬁ$  ¿ ﬁ1¿ ﬁ8¿ ﬁ7  ¿ ﬁH¿ ﬁO¿ ﬁN  ¿ ﬁ]¿ ﬁd¿ ﬁc  ¿ ﬁt¿ ﬁÇ¿ ﬁÅ  ¿ ﬁô ¿ ﬁß¿ ﬁ¶  ¿ ﬁø¿ ﬁÃ¿ ﬁÀ  ¿ ﬁ’¿ ﬁÊ¿ ﬁÂ  ¿ ﬁ¿ ﬂ ¿ ﬁˇ  ¿ ﬂ$¿ ﬂ*¿ ﬂ)  ¿ ﬂ<¿ ﬂG¿ ﬂF  ¿ ﬂ]¿ ﬂd¿ ﬂc  ¿ ﬂw¿ ﬂã¿ ﬂä  ¿ ﬂô+¿ ﬂ∏¿ ﬂ∑   ¿ „îÄ‘¿ „∂¿ „∂   ¿ „î¿ „ï¿ ‰lÅ≈¿ ‰}¿ ‰}  ¿ ‰ë&¿ ‰Æ¿ ‰≠  ¿ ‰l¿ ‰m ¿ Ê5£‚¿ Ê;¿ Ê;   ¿ ÊpÄï¿ Êï¿ Êï ¿ Êµ¿ Á¿ Êü¿ Ê¥¿ Ê†¿ Ê¶¿ Ê¨¿ Ê≥¿ Ê≠¿ Ê—¿ Êª¿ Ê”¿ ÊÒ¿ Êˇ¿ Ê˘¿ ÊÚ¿ Ê˚¿ Á	 ¿ Á¿ Á ¿ Á$¿ Á-!¿ Á2¿ Á2 ¿ ÁJ¿ ÁR'¿ Áb¿ Áb  ¿ Ë\¿ Ëg¿ Ëg  ¿ Ë}L¿ Ëü¿ Ëü ¿ Ë¨¿ Ëµ¿ Ë∆¿ Ë∂¿ Ë«¿ Ë»¿ ÈQ¿ ÈV¿ ÈV ¿ Èc¿ Á}T¿ Áê¿ Áê    ¿ Á‘D¿ ÁÍ¿ ÁÍ    ¿ Ë>¿ Ë1¿ Ë1    ¿ ËÕJ¿ Ë€¿ Ë€    ¿ È4¿ È#¿ È#    ¿ ÈmÅù¿ È~¿ È~   ¿ Èm¿ Èn¿ ÎÄ∞¿ Î¿ Î   ¿ Î¿ Î¿ Î¬ÉW¿ Î”¿ Î”  ¿ Î„¿ ÎÚ¿ ÎÒ  ¿ Î¬¿ Î√¿ Ôì∫¿ Ô0¿ Ô0  ¿ Ô6¿ ÔD¿ ÔC  ¿ Ô¿ Ô¿€ÇÃ¿‡¿‡    ¿´Å¢¿∞¿∞    ¿QÅÖ¿\¿\  ¿p¿~¿}   ¿⁄Å;¿ﬂ¿ﬂ     ¿
ë)¿
¿
  ¿
a8¿
a ¿
a¿
  ¿
Å¿
ê¿
è   ¿
ù!¿
∑¿
∑  ¿
¬1¿
ÿ¿
ÿ    ¿
ˆ;¿¿    ¿4:¿G¿G    ¿ru¿¡¿¡B/// The orientation of the menu that contains this submenu button.   ¿ÎÄì¿H¿HQ/// Whether the anchor that intercepted this DirectionalFocusAction is a submenu.   ¿Å2¿è¿è    ¿∑éâ¿»¿»  ¿œ¿Á¿Ê  ¿∑¿∏ ¿D±P¿±¿±Çh/// A helper class used to generate shortcut labels for a
/// [MenuSerializableShortcut] (a subset of the subclasses of
/// [ShortcutActivator]).
///
/// This helper class is typically used by the [MenuItemButton] and
/// [SubmenuButton] classes to display a label for their assigned shortcuts.
///
/// Call [getShortcutLabel] with the [MenuSerializableShortcut] to get a label
/// for it.
///
/// For instance, calling [getShortcutLabel] with `SingleActivator(trigger:
/// LogicalKeyboardKey.keyA, control: true)` would return "‚åÉ A" on macOS, "Ctrl
/// A" in an US English locale, and "Strg A" in a German locale. ¿œ¿œ¿Ë¿È¿Í¿È   ¿Ò+¿¿  ¿!ÅH¿N¿N ¿é¿h¿r¿ç¿s¿á¿¥¿ò¿™¿´¿∂¿‡¿√¿’¿÷¿‚¿	¿Ô¿¿¿¿4¿¿*¿+¿6¿[¿C¿U¿V¿]¿nÅ‘¿ì¿ì )¿¥¿!A¿†¿≥¿°¿∫¿Ã¿Õ¿÷¿Ë¿È¿ˆ¿ ¿ 	¿ ¿ %¿ &¿ 1¿ C¿ D¿ Q¿ c¿ d¿ u¿ á¿ à¿ ñ¿ ®¿ ©¿ ∏¿  ¿ À¿ Ÿ¿ Î¿ Ï¿ ˛¿!¿!¿! ¿!2¿!3¿"|Äò¿"æ¿"æ 
¿#¿#¿"⁄¿#¿"€¿"Ú¿"ı¿#¿"ˆ¿#
¿!GÄô¿!ö¿!ö+/// Return the instance for this singleton.   ¿#ëq¿%∏¿%∏ÇÜ/// Returns the label to be shown to the user in the UI when a
/// [MenuSerializableShortcut] is used as a keyboard shortcut.
///
/// When [defaultTargetPlatform] is [TargetPlatform.macOS] or
/// [TargetPlatform.iOS], this will return graphical key representations when
/// it can. For instance, the default [LogicalKeyboardKey.shift] will return
/// '‚áß', and the arrow keys will return arrows. The key
/// [LogicalKeyboardKey.meta] will show as '‚åò', [LogicalKeyboardKey.control]
/// will show as 'ÀÑ', and [LogicalKeyboardKey.alt] will show as '‚å•'.
///
/// The keys are joined by spaces on macOS and iOS, and by "+" on other
/// platforms. ¿%…!¿%„¿%‚  ¿%Ï#¿&¿&   ¿5ç.¿5¿5  ¿5 ¿54¿53  ¿58#¿5O¿5N   ¿B8äZ¿B?¿B?  ¿BQ¿Be¿Bd  ¿Bn#¿BÖ¿BÑ    ¿LñÅí¿M;¿M;Äû/// MenuBar-specific private specialization of [MenuAnchor] so that it can act
/// differently in regards to orientation, how open works, and what gets built. ¿Ma|¿Mg ¿Mg¿Mu  ¿M|¿Må¿Mã  ¿Mù¿M§¿M£  ¿M≥¿M∫¿Mπ  ¿MÀ¿M“¿M—     ¿M·E¿Mˇ¿Mˇ   ¿M·¿M‚ ¿N*Ñœ¿N0¿N0   ¿NaÄç¿NÜ¿NÜ ¿N¶¿NÌ¿Nê¿N•¿Në¿Nó¿Nù¿N§¿Nû¿Nπ¿N¨¿Nª¿NÃ¿NË¿N◊¿NÕ¿NŸ¿NÛ5¿O¿O   ¿NÛ¿NÙ¿O,ÉÀ¿O?¿O?  ¿OE¿OS¿OR  ¿O,¿O- ¿R˚åW¿Tc¿TcÅa/// An [InheritedWidget] that provides a descendant [MenuAcceleratorLabel] with
/// the function to invoke when the accelerator is pressed.
///
/// This is used when creating your own custom menu item for use with
/// [MenuAnchor] or [MenuBar]. Provided menu items such as [MenuItemButton] and
/// [SubmenuButton] already supply this wrapper internally. ¿TûÄÎ¿U
 ¿U
¿U( _/// Create a const [MenuAcceleratorCallbackBinding].
///
/// The [child] parameter is required.¿U/	¿U6¿U5  ¿U>¿UD¿UC  ¿UQ¿UW¿UV  ¿Un¿U~¿U}  ¿Uc¿UçÄ“¿VW¿VWÄ≠/// The function that pressing the accelerator defined in a descendant
/// [MenuAcceleratorLabel] will invoke.
///
/// If set to null, then the accelerator won't be enabled. ¿VdÅ¿Wl¿WlÄÚ/// Whether or not the associated label will host its own submenu or not.
///
/// This setting determines when accelerators are active, since accelerators
/// for menu items that open submenus shouldn't be active when the submenu is
/// open.  ¿W{Ä§¿Wå¿Wå  ¿Wü(¿Wø¿Wæ  ¿W{¿W|¿X#Ç0¿Y◊¿Y◊Åx/// Returns the active [MenuAcceleratorCallbackBinding] in the given context, if any,
/// and creates a dependency relationship that will rebuild the context when
/// [onInvoke] changes.
///
/// If no [MenuAcceleratorCallbackBinding] is found, returns null.
///
/// See also:
///
/// * [of], which is similar, but asserts if no [MenuAcceleratorCallbackBinding]
///   is found. ¿Yﬂ¿YÌ¿YÏ   ¿ZWÑ˘¿\N¿\NÅ∫/// Returns the active [MenuAcceleratorCallbackBinding] in the given context, and
/// creates a dependency relationship that will rebuild the context when
/// [onInvoke] changes.
///
/// If no [MenuAcceleratorCallbackBinding] is found, returns will assert in debug mode
/// and throw an exception in release mode.
///
/// See also:
///
/// * [maybeOf], which is similar, but returns null if no
///   [MenuAcceleratorCallbackBinding] is found. ¿\Q¿\_¿\^    ¿d¢°ï¿lﬂ¿lﬂà6/// A widget that draws the label text for a menu item (typically a
/// [MenuItemButton] or [SubmenuButton]) and renders its child with information
/// about the currently active keyboard accelerator.
///
/// On platforms other than macOS and iOS, this widget listens for the Alt key
/// to be pressed, and when it is down, will update the label by calling the
/// builder again with the position of the accelerator in the label string.
/// While the Alt key is pressed, it registers a shortcut with the
/// [ShortcutRegistry] mapped to a [VoidCallbackIntent] containing the callback
/// defined by the nearest [MenuAcceleratorCallbackBinding].
///
/// Because the accelerators are registered with the [ShortcutRegistry], any
/// other shortcuts in the widget tree between the [primaryFocus] and the
/// [ShortcutRegistry] that define Alt-based shortcuts using the same keys will
/// take precedence over the accelerators.
///
/// Because accelerators aren't used on macOS and iOS, the label ignores the Alt
/// key on those platforms, and the [builder] is always given -1 as an
/// accelerator index. Accelerator labels are still stripped of their
/// accelerator markers.
///
/// The built-in menu items [MenuItemButton] and [SubmenuButton] already provide
/// the appropriate [MenuAcceleratorCallbackBinding], so unless you are creating
/// your own custom menu item type that takes a [MenuAcceleratorLabel], it is
/// not necessary to provide one.
///
/// {@template flutter.material.MenuAcceleratorLabel.accelerator_sample}
/// {@tool dartpad} This example shows a [MenuBar] that handles keyboard
/// accelerators using [MenuAcceleratorLabel]. To use the accelerators, press
/// the Alt key to see which letters are underlined in the menu bar, and then
/// press the appropriate letter. Accelerators are not supported on macOS or iOS
/// since those platforms don't support them natively, so this demo will only
/// show a regular Material menu bar on those platforms.
///
/// ** See code in examples/api/lib/material/menu_anchor/menu_accelerator_label.0.dart **
/// {@end-tool}
/// {@endtemplate} ¿mÄµ¿mr ¿mr¿mÜ V/// Creates a const [MenuAcceleratorLabel].
///
/// The [label] parameter is required.¿má
¿mç¿må  ¿mî	¿mõ¿mö  ¿mü"¿m•¿m§  ¿mÆ¿m»Ö¿rﬁ¿rﬁÑ⁄/// The label string that should be displayed.
///
/// The label string provides the label text, as well as the possible
/// characters which could be used as accelerators in the menu system.
///
/// {@template flutter.material.menu_anchor.menu_accelerator_label.label}
/// To indicate which letters in the label are to be used as accelerators, add
/// an "&" character before the character in the string. If more than one
/// character has an "&" in front of it, then the characters appearing earlier
/// in the string are preferred. To represent a literal "&", insert "&&" into
/// the string. All other ampersands will be removed from the string before
/// calling [MenuAcceleratorLabel.builder]. Bare ampersands at the end of the
/// string or before whitespace are stripped and ignored.
/// {@endtemplate}
///
/// See also:
///
/// * [displayLabel], which returns the [label] with all of the ampersands
///   stripped out of it, and double ampersands converted to ampersands.
/// * [stripAcceleratorMarkers], which returns the supplied string with all of
///   the ampersands stripped out of it, and double ampersands converted to
///   ampersands, and optionally calls a callback with the index of the
///   accelerator character found. ¿sµÉT¿w¿wÉ/// The optional [MenuAcceleratorChildBuilder] which is used to build the
/// widget that displays the label itself.
///
/// The [defaultLabelBuilder] function serves as the default value for
/// [builder], rendering the label as a [RichText] widget with appropriate
/// [TextSpan]s for rendering the label with an underscore under the selected
/// accelerator for the label when accelerators have been activated.
///
/// {@macro flutter.material.menu_anchor.menu_accelerator_child_builder.args}
///
/// When writing the builder function, it's not necessary to take the current
/// platform into account. On platforms which don't support accelerators (e.g.
/// macOS and iOS), the passed accelerator index will always be -1, and the
/// accelerator markers will already be stripped. ¿rËÄ…¿sÇ¿sÇÄà/// Returns the [label] with any accelerator markers removed.
///
/// This getter just calls [stripAcceleratorMarkers] with the [label].   ¿wÄŒ¿w†¿w†ÄÇ/// Whether [label] contains an accelerator definition.
///
/// {@macro flutter.material.menu_anchor.menu_accelerator_label.label}   ¿w‡Ñ©¿y{¿y{ÅÄ/// Serves as the default value for [builder], rendering the label as a
/// [RichText] widget with appropriate [TextSpan]s for rendering the label
/// with an underscore under the selected accelerator for the label when the
/// [index] is non-negative, and a [Text] widget when the [index] is negative.
///
/// {@macro flutter.material.menu_anchor.menu_accelerator_child_builder.args} ¿yè¿yù¿yú  ¿y•¿y≠¿y¨  ¿y≥	¿y∏¿y∑   ¿|çà¿}˜¿}˜ÅM/// Strips out any accelerator markers from the given [label], and unescapes
/// any escaped ampersands.
///
/// If [setIndex] is supplied, it will be called before this function returns
/// with the index in the returned string of the accelerator character.
///
/// {@macro flutter.material.menu_anchor.menu_accelerator_label.label} ¿~¿~¿~  ¿~"¿~9¿~8   ¿Ñ§V¿ÑÃ¿ÑÃ   ¿Ñ§¿Ñ•¿Ñ˛ÄÇ¿Ö¿Ö  ¿Ö/¿Ö,¿Ö+  ¿Ñ˛¿Ñˇ¿Ö6¿ÖE¿ÖF¿ÖÑÄ±¿Öï¿Öï  ¿Ö©&¿Ö∆¿Ö≈  ¿ÖÑ¿ÖÖ ¿Ü9é¿Ü?¿Ü?   ¿ÜÇ¿Üé¿Üé  ¿Üü¿Ü£¿Ü£ ¿Ü∑¿Ü∏¿ÜΩ(¿Ü›¿Ü›  ¿ÜÈ¿Ü˘¿Ü˘  ¿á#¿á¿á  ¿á3-¿áJ¿áJ  ¿ád¿ái¿ái ¿á} 	¿ááÄÌ¿áò¿áò   ¿áá¿áà¿àxÅó¿àâ¿àâ   ¿àx¿ày¿äÅc¿ä$¿ä$   ¿ä¿ä¿ãzÄ∫¿ãã¿ãã  ¿ãõ¿ã±¿ã∞  ¿ãz¿ã{¿å8ÄÚ¿åD¿åD    ¿ç.Å
¿ç3¿ç3  ¿çE¿çO¿çN   ¿é<Ñò¿éA¿éA    ¿íÿÄ«¿í›¿í›    ¿ì£Ä∞¿ì∂¿ì∂  ¿ìº¿ì ¿ì…  ¿ì£¿ì§ ¿îWíŸ¿ï‘¿ï‘Åv/// A label widget that is used as the label for a [MenuItemButton] or
/// [SubmenuButton].
///
/// It not only shows the [SubmenuButton.child] or [MenuItemButton.child], but if
/// there is a shortcut associated with the [MenuItemButton], it will display a
/// mnemonic for the shortcut. For [SubmenuButton]s, it will display a visual
/// indicator that there is a submenu. ¿ïˇÅi¿ñn ¿ñn¿ñ| b/// Creates a const [_MenuItemLabel].
///
/// The [child] and [hasSubmenu] arguments are required.	¿ñÉ¿ñí¿ñë  ¿ñ°¿ñß¿ñ¶  ¿ñ¡¿ñ«¿ñ∆  ¿ñ◊¿ñ›¿ñ‹  ¿ñÓ¿ñÙ¿ñÛ  ¿ó¿ó¿ó  ¿ó!¿ó ¿ó  ¿óA¿óG¿óF  ¿óW
¿ó]¿ó\  ¿ñ∑¿ó.¿ó2¿ó3	¿ólÄÖ¿óÁ¿óÁi/// Whether or not this menu has a submenu.
///
/// Determines whether the submenu arrow is shown or not. ¿óˆÄ€¿ò√¿ò√Äª/// Whether or not this item should show decorations like shortcut labels or
/// submenu arrows. Items in a [MenuBar] don't show these decorations when
/// they are laid out horizontally. ¿ò÷P¿ô¿ô4/// The optional icon that comes before the [child]. ¿ô+P¿ôo¿ôo3/// The optional icon that comes after the [child]. ¿ôÄÄã¿ö¿ö^/// The shortcut for this label, so that it can generate a string describing
/// the shortcut. ¿öÄá¿öâ¿öâf/// An optional Semantics label, which replaces the generated string when
/// read by a screen reader. ¿öúK¿ö€¿ö€1/// The direction in which the menu item expands. ¿öÏs¿õT¿õTW/// The submenu icon that is displayed when [showDecoration] and [hasSubmenu] are true. ¿õdR¿õ±¿õ±</// An optional child widget that is displayed in the label.  ¿õªâﬁ¿õŒ¿õŒ  ¿õ‘¿õ‚¿õ·  ¿õª¿õº¿•ùÅë¿•Æ¿•Æ  ¿•¬&¿•ﬂ¿•ﬁ  ¿•ù¿•û ¿ßïòD¿ßõ¿ßõ  ¿ßÕÅ:¿ß” ¿ß”¿ßﬁ  	¿ßÂ¿ßÙ¿ßÛ  ¿®¿®¿®  ¿®$¿®3¿®2  ¿®A¿®P¿®O  ¿®d¿®s¿®r  ¿®Ñ¿®ì¿®í  ¿®£¿®≤¿®±  ¿®¬¿®—¿®–  ¿®·¿®¿®Ô   	¿©V¿©a¿©a  ¿©™!¿©æ¿©æ  ¿™!¿™0¿™0  ¿™ò¿™•¿™•  ¿™Ó¿™¸¿™¸  ¿´k$¿´Ñ¿´Ñ  ¿´‰¿´Ù¿´Ù  ¿¨'¿¨2¿¨2  ¿¨n¿¨y¿¨y   ¿¨èÅ7¿¨™¿¨™  ¿¨¡¿¨—¿¨–  ¿¨è¿¨ê¿≠ éŒ¿≠›¿≠›  ¿≠Ò	¿≠˜¿≠ˆ  ¿≠¸¿Æ¿Æ  ¿≠ ¿≠À¿ºúÇ¿º≠¿º≠  ¿ºº¿º…¿º»  ¿ºú¿ºù¿æøÅ¿æƒ¿æƒ  ¿æ”¿æ„¿æ‚  ¿æÎ¿æÛ¿æÚ    ¿ø€ÑÁ¿¿ê¿¿êÄÆ/// A widget that manages a list of menu buttons in a menu.
///
/// It sizes itself to the widest/tallest item it contains, and then sizes all
/// the other entries to match. ¿¿∂Äª¿¿º ¿¿º¿¿∆  ¿¿Õ¿¿‹¿¿€  ¿¿Í¿¿¿¿Ô  ¿¡¿¡¿¡  ¿¡,"¿¡2¿¡1  ¿¡T¿¡c¿¡b  ¿¿˛¿¡¿¡¿¡J¿¡u`¿¡Ã¿¡ÃC/// The menu style that has all the attributes for this menu panel. ¿¡⁄r¿¬@¿¬@T/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.none]. ¿¬QÅK¿√Ü¿√ÜÅ/// Determine if a [UnconstrainedBox] can be applied to the menu panel to allow it to render
/// at its "natural" size.
///
/// Defaults to true. When it is set to false, it can be useful when the menu should
/// be constrained in both main-axis and cross-axis, such as a [DropdownMenu]. ¿√°B¿√ÿ¿√ÿ)/// The layout orientation of this panel. ¿√ËÄí¿ƒr¿ƒrp/// The list of widgets to use as children of this menu panel.
///
/// These are the top level [SubmenuButton]s.  ¿ƒA¿ƒù¿ƒù   ¿ƒ¿ƒÄ ¿ƒƒñƒ¿ƒ ¿ƒ    ¿ƒ¯6¿≈	¿≈	 ¿≈¿≈,¿≈- ¿≈3U¿≈D¿≈D   ¿≈3¿≈4¿≈åï ¿≈ü¿≈ü  ¿≈•¿≈≥¿≈≤  ¿≈å¿≈ç¿⁄∞Ä÷¿⁄∑¿⁄∑  ¿⁄Ã¿⁄›¿⁄‹    ¿€¬îÌ¿€»¿€»  ¿€ÌÅ\¿€Û ¿€Û¿€˚  
¿‹¿‹¿‹  ¿‹¿‹+¿‹*  ¿‹9¿‹H¿‹G  ¿‹V¿‹e¿‹d  ¿‹v¿‹Ö¿‹Ñ  ¿‹ô ¿‹®¿‹ß  ¿‹ø¿‹Œ¿‹Õ  ¿‹ﬂ"¿‹Â¿‹‰  ¿›¿›¿›  ¿›'¿›6¿›5  ¿‹˝
¿›M"¿›b¿›b  ¿›s%¿›å¿›å  ¿›ú¿›≥¿›≥  ¿›Ω¿›Œ¿›Œ  ¿›€¿›Ï¿›Ï  ¿›˘¿ﬁ¿ﬁ  ¿ﬁ¿ﬁ'¿ﬁ'  ¿ﬁ:¿ﬁE¿ﬁE  ¿ﬁU!¿ﬁ`¿ﬁ`  ¿ﬁz¿ﬁç¿ﬁç   ¿ﬁûí¿ﬁ±¿ﬁ±  ¿ﬁ∑¿ﬁ≈¿ﬁƒ  ¿ﬁû¿ﬁü ¿±Å“¿Ò'¿Ò'o/// Wraps the [WidgetStateMouseCursor] so that it can default to
/// [MouseCursor.uncontrolled] if none is set. ¿ÒY)¿Ò_ ¿Ò_¿Òk  ¿Òl¿Òr¿Òq   ¿ÒÜ<¿Ò≥¿Ò≥  ¿ÚC>¿ÚZ¿ÚZ   ¿ÚC¿ÚD¿Ò«x¿Òﬂ¿Òﬂ  ¿ÒÁ¿Ò˚¿Ò˙  ¿Ò«¿Ò» ¿˙wÖ¿˙}¿˙}  ¿˙¶Ä˜¿˙¶ ¿˙¶¿˙∏  ¿˙π¿˙ø¿˙æ  ¿˙Õ¿˙“¿˚õ¿˙„¿˙⁄¿˙Â¿˙Î¿˚¿˚¿˚¿˚
¿˚¿˚¿˚¿˚¿˚¿˚ ¿˚&¿˚>¿˚M¿˚?¿˚N¿˚a¿˚O¿˚s¿˚j¿˚u¿˚â¿˚ä¿˚°Äâ¿˚≈¿˚≈ ¿˚ﬁ¿˚Ù¿¸)¿¸¿˚ı¿¸¿¸¿¸¿¸¿¸(¿¸¿¸¿¸¿¸#¿¸'¿¸$¿¸/¿¸B¿¸B  ¿¸N>¿¸e¿¸e ¿¸o¿¸t¿¸u¿¸w¿¸¿¸x¿¸Ä¿¸Å¿¸ëÄä¿¸ø¿¸ø   ¿¸ë¿¸í¿˝}¿˝N¿˝N   ¿˝¿˝ ¿˝†Äå¿˝œ¿˝œ   ¿˝†¿˝°¿˛0Äˆ¿˛l¿˛l   ¿˛0¿˛1¿ˇ*O¿ˇH¿ˇH   ¿ˇ*¿ˇ+  ¿ˇ}ï‘¿ˇÉ¿ˇÉ  ¿ˇ±Äµ¿ˇ± ¿ˇ±¿ˇ∆  ¿ˇ«¿ˇÕ¿ˇÃ  ¿ˇ€¿ˇ‡¿ d¿ˇ˘¿ˇË¿ˇ˚¿ %¿ ¿ '¿ <¿ 3¿ >¿ R¿ S¿ j¿ }¿ }  ¿ â>¿ †¿ † ¿ ™¿ Ø¿ ∞¿ ≤¿ ∫¿ ≥¿ ª¿ º¿ À=¿ ‡¿ ‡ ¿ Ì¿ Ú¿ Û¿ ı¿ ˝¿ ˆ¿ ˛¿ ˇ¿Äá¿<¿<   ¿¿¿⁄s¿	¿	   ¿⁄¿€¿QÇB¿Ä¿Ä   ¿Q¿R¿óÇX¿∆¿∆   ¿ó¿ò¿v¿=¿=   ¿¿¿à{¿µ¿µ   ¿à¿â¿ÄÑ¿4¿4   ¿¿¿èÅ=¿ƒ¿ƒ   ¿è¿ê¿	–Ç&¿	ˇ¿	ˇ   ¿	–¿	—¿˙Äù¿5¿5   ¿˙¿˚¿±Äö¿Ë¿Ë   ¿±¿≤¿O_¿}¿}   ¿O¿P¿≤`¿Ÿ¿Ÿ   ¿≤¿≥¿Å¿H¿H   ¿¿¿-P¿L¿L   ¿-¿.¿πÖñ¿Ã¿Ã  ¿€¿È¿Ë    ¿SÑ›¿Y¿Y  ¿ÄÔ¿ ¿¿é  ¿è¿ï¿î  ¿£¿®¿l¿π¿∞¿ª¿¡¿Ÿ¿·¿⁄¿‡¿‚¿Ê¿„¿Ù¿Ô¿ˆ¿¸¿¿#¿¿$¿7¿%¿I¿@¿K¿_¿`¿rÄâ¿ñ¿ñ ¿Ø¿≈¿˙¿“¿∆¿‘¿‡¿·¿‰¿˘¿Â¿Î¿Ï¿Ù¿¯¿ı¿ ¿¿  ¿>¿6¿6 ¿@¿E¿F¿H¿P¿I¿Q¿R¿bÄä¿ê¿ê   ¿b¿c¿Äå¿¿   ¿¿Ò¿Ä}¿Ø¿Ø   ¿Ä¿Å¿Ä⁄¿=¿=   ¿¿¿ﬂO¿˝¿˝   ¿ﬂ¿‡      ¿ıFÅl¿ıñ¿ıñF/// Whether [defaultTargetPlatform] is an Apple platform (Mac or iOS).   ¿ˆ¥Åf¿˜È¿˜ÈÅ+/// Whether [defaultTargetPlatform] is one that uses symbolic shortcuts.
///
/// Mac and iOS use special symbols for modifier keys instead of their names,
/// render them in a particular order defined by Apple's human interface
/// guidelines, and format them so that the modifier keys always align.   ¿¯Å7¿¯%¿¯%    ¿ÚÖÇø¿Û∞¿Û∞Å%/// A debug print function, which should only be called within an assert, like
/// so:
///
///   assert(_debugMenuInfo('Debug Message'));
///
/// so that the call is entirely removed in release builds.
///
/// Enable debug printing by setting [_kDebugMenus] to true at the top of the
/// file. ¿Ûø¿Û«¿Û∆  ¿Û–¿Û„¿Û‚    åÇBç⁄ç⁄ÅÃ/// The type of builder function used by [MenuAnchor.builder] to build the
/// widget that the [MenuAnchor] surrounds.
///
/// The `context` is the context that the widget is being built in.
///
/// The `controller` is the [MenuController] that can be used to open and close
/// the menu with.
///
/// The `child` is an optional child supplied as the [MenuAnchor.child]
/// attribute. The child is intended to be incorporated in the result of the
/// function.  ééé  éé-é,  é8éAé@   ¿_TÖL¿d?¿d?Ñ‚/// The type of builder function used for building a [MenuAcceleratorLabel]'s
/// [MenuAcceleratorLabel.builder] function.
///
/// {@template flutter.material.menu_anchor.menu_accelerator_child_builder.args}
/// The arguments to the function are as follows:
///
/// * The `context` supplies the [BuildContext] to use.
/// * The `label` is the [MenuAcceleratorLabel.label] attribute for the relevant
///   [MenuAcceleratorLabel] with the accelerator markers stripped out of it.
/// * The `index` is the index of the accelerator character within the
///   `label.characters` that applies to this accelerator. If it is -1, then the
///   accelerator should not be highlighted. Otherwise, the given character
///   should be highlighted somehow in the rendered label (typically with an
///   underscore). Importantly, `index` is not an index into the [String]
///   `label`, it is an index into the [Characters] iterable returned by
///   `label.characters`, so that it is in terms of user-visible characters
///   (a.k.a. grapheme clusters), not Unicode code points.
/// {@endtemplate}
///
/// See also:
///
/// * [MenuAcceleratorLabel.defaultLabelBuilder], which is the implementation
///   used as the default value for [MenuAcceleratorLabel.builder].  ¿dq¿d¿d~  ¿dá¿dè¿dé  ¿dï	¿dö¿dô    ÖÉÖéÖé ÖùÜ*ÜÜ Ü-Ü§+Ü±Ü± ÜÕáD&áQáQ áiá¬ÇıáÁáÁ eàä∂àààààPà!à0àOà1àCàDàRà`àaàêàfàuàèàvàààâàíàüà†àÃà•à¥àÀàµà«à»àŒà›àﬁâà„àÚâàÛâââââââ,â-â_â2âAâ^âBâTâUâaâwâèâxâäâãâøâîâ£âæâ§â∂â∑â¡â◊âÌâÿâÍâÎäâÚääääää!ä7äOä8äJäKäÇäTäcäÅädäväwäÑäöä≥äõä≠äÆäÛ)ã ã  ããb"ãoão ãÉãœ3ã‹ã‹ å   ÄÆ  package:flutter/cupertino.dart  Ä„  app.dart  Ä˛  checkbox_theme.dart  Å$  dropdown_menu.dart  ÅI  radio_theme.dart é¨ <ÄÜÄ§Ä•Ä÷Ä⁄ÄıÅÅ@ÅcÅlÅmÅâÅäÅ¥Å›ÇÇ.ÇUÇVÇrÇïÇ≠Ç…ÇﬂÇ¯ÉÉ%É=ÉcÉÅÉüÉ¿É⁄ÉÙÑ	Ñ"Ñ=ÑWÑlÑÜÑáÑüÑøÑ›ÖÖ*ÖHÖIÖÉÖ§Ö•ÖÛÜÜ1Ü2Ü}Ü§Ü—Ü“ááDálámáπá¬ààdà£à·â0âíâäRä∂äπä∫äÛãããbãÜãáãœåååPå|åÄåƒå»çç+ç/çwçƒç“çÛéHéIézé¡é¬é‚é„éÔè'è}èèèìèïèñè·ê+êXê\ê¨êÂêÈë3ëÄëºë¿ë‘í!íEíIíòí®í¨í¿ìì\ì©ìıì˘îHîXî\îpî¡îÕî—ï ï0ïZï~ïÑï≥ï»ï◊ïÏñññ=ñQñxñâñ±ñÌñÛóó=óNó`óàó©ó…ó€óÎóÒóÚò@òUòyòzòÀô	ôô_ô≠ôøô≈ööJömönö∏öæõõõCõ]õ^õúõËú-úEúKúÅúáú◊ú„úÈù:ùzù∑ùΩûûXû§ûÔü+ü1üRügüàüâü“üüˆ†B†~†ú†ù†”†Ÿ†¸°°°]°c°≥°˘¢<¢å¢÷£%£u£æ§§\§•§´§¯•I•ò•Â•Î¶¶¶9¶s¶w¶ô¶ö¶Âßßßbß≤ß˙®
®®)®I®J®Ñ®¢®£®›®¸®˝©S©Ñ©ä©Ÿ™1™Ç™ß™®™‰™Í´´ ´!´q´ù´£´⁄´˝´˛¨1¨7¨y¨¿¨∆≠≠,≠2≠Ä≠é≠∑≠∏≠≠ˆÆ@ÆëÆ·ØØ'Ø(Ø4ØmØnØzØ¨∞∞∞∞!∞f∞ë∞•±±	±[±†±Ê≤<≤@≤B≤C≤v≤†≤˜≥"≥\≥£≥§≥∞≥≈≥‹¥¥3¥9¥=¥>¥J¥y¥ü¥‘µ)µ/µ3µ4µ@µSµÖµ©µ«µ‹µ‡µ·µÌ∂∂?∂R∂n∂ù∂º∂›∑∑8∑g∑é∑Ø∑Ã∑’∑‹∑›∏∏∏∏∏i∏m∏n∏∫∏œ∏Úπ&πKπjπìπºπ˘∫∫+∫i∫p∫t∫u∫î∫∏∫›∫˝ªªªªª3ª\ªjªpªΩªËªÏªÌºº?ºMºSº{º⁄Ω=Ω[Ω|ΩÇΩÜΩáΩ•ΩÿΩÊΩÏææsæ”æÒæıæˆø2øøÉøÑøêøÿø˚øˇ¿ @¿ @¿ @5¿ @9¿ @Ü¿ @÷¿ A¿ A¿ An¿ Aø¿ B¿ B]¿ B≠¿ B¯¿ C¿ C¿ C\¿ C¨¿ C˙¿ D4¿ D~¿ D∑¿ Dª¿ DÛ¿ E4¿ EÇ¿ E–¿ F¿ Fp¿ Fã¿ Fè¿ F›¿ G$¿ Gr¿ G√¿ H¿ HN¿ HR¿ H†¿ HÍ¿ I:¿ IÖ¿ Iâ¿ I’¿ IÂ¿ I¯¿ I¸¿ JB¿ JF¿ JT¿ JX¿ Jß¿ JΩ¿ J˘¿ KH¿ Ká¿ K÷¿ L¿ L`¿ Ls¿ L≈¿ L˚¿ MG¿ Mb¿ Mä¿ M´¿ M±¿ M‹¿ MÓ¿ M˝¿ N¿ N0¿ NE¿ Na¿ Ng¿ Nh¿ N≤¿ N∏¿ O¿ O¿ O=¿ OW¿ OX¿ Oé¿ Oî¿ O≥¿ OŒ¿ Oœ¿ P¿ P(¿ P)¿ Px¿ P~¿ PÀ¿ Q¿ Qg¿ QÜ¿ Qå¿ Q√¿ Q‚¿ Q„¿ QÔ¿ R¿ RA¿ R\¿ Rz¿ Rú¿ R∞¿ RŒ¿ R’¿ RŸ¿ R⁄¿ RÊ¿ S¿ S6¿ Sâ¿ Sê¿ Sî¿ Sï¿ S°¿ SÊ¿ T¿ Tj¿ TÀ¿ Tœ¿ T—¿ T“¿ U"¿ Uf¿ Uj¿ U∏¿ V¿ V&¿ V*¿ V_¿ Vc¿ Vq¿ Vu¿ V≈¿ V“¿ W!¿ W7¿ Wá¿ W÷¿ X¿ X`¿ Xs¿ X≈¿ X˚¿ YF¿ Ya¿ Yè¿ Y∑¿ YΩ¿ YÊ¿ Yˇ¿ Z¿ Z"¿ Z4¿ ZY¿ Zq¿ ZÖ¿ Z°¿ Z¥¿ ZÕ¿ Z›¿ Z¯¿ [¿ [1¿ [H¿ [i¿ [í¿ [¢¿ [®¿ [©¿ [Ë¿ [Ó¿ \0¿ \6¿ \F¿ \L¿ \à¿ \©¿ \™¿ \¿ \ˆ¿ ]E¿ ]s¿ ]ò¿ ]ô¿ ]»¿ ]Œ¿ ]Ê¿ ^¿ ^	¿ ^6¿ ^<¿ ^å¿ ^ô¿ ^ƒ¿ ^≈¿ ^Ù¿ _¿ _¿ _B¿ _Z¿ _[¿ _õ¿ _°¿ _ÿ¿ `¿ `¿ `P¿ `V¿ `ú¿ `„¿ a"¿ aS¿ aY¿ a§¿ aÎ¿ b4¿ bE¿ bK¿ bb¿ bÇ¿ bÉ¿ bÆ¿ b¥¿ c¿ cT¿ có¿ c‹¿ c‚¿ c˘¿ d¿ d¿ dO¿ dÉ¿ dÑ¿ d∫¿ d¿¿ dﬂ¿ d˙¿ d˚¿ e7¿ eT¿ eU¿ eê¿ eÆ¿ eØ¿ eÓ¿ f2¿ fD¿ fJ¿ fb¿ fw¿ fï¿ fñ¿ f ¿ f–¿ g!¿ gA¿ gG¿ gô¿ g›¿ g˙¿ h ¿ h%¿ h@¿ hA¿ hz¿ hÄ¿ h√¿ h…¿ h˙¿ i¿ i¿ iC¿ iI¿ iï¿ iæ¿ iø¿ iÀ¿ j¿ j¿ j<¿ jB¿ j¿ jÖ¿ jƒ¿ j˘¿ k$¿ k(¿ k)¿ kf¿ kà¿ kº¿ kÍ¿ kÓ¿ kÔ¿ l6¿ l_¿ le¿ l±¿ m¿ mR¿ mö¿ mÈ¿ mˆ¿ m¸¿ n@¿ nÇ¿ nà¿ n…¿ o¿ o)¿ o/¿ o~¿ oæ¿ oƒ¿ p¿ p?¿ pE¿ pá¿ p÷¿ q"¿ q5¿ q;¿ qI¿ q_¿ qå¿ q‘¿ qÏ¿ q˝¿ r¿ r3¿ r<¿ rF¿ rg¿ rÉ¿ rü¿ r√¿ rÁ¿ rˇ¿ s¿ s2¿ sH¿ sf¿ sÄ¿ sô¿ s∞¿ s—¿ sË¿ s˝¿ t¿ t9¿ t_¿ tu¿ tê¿ t≤¿ t‹¿ t˝¿ u¿ u9¿ uj¿ uq¿ uí¿ u∫¿ u‚¿ v¿ vR¿ vr¿ vú¿ v∏¿ v“¿ v˛¿ w¿ w<¿ wX¿ wp¿ wê¿ w¨¿ wÃ¿ w˙¿ x*¿ x<¿ xP¿ xt¿ xò¿ xƒ¿ xÍ¿ y¿ y*¿ y1¿ y5¿ y6¿ yB¿ yá¿ y≤¿ z¿ zi¿ z}¿ z›¿ z‰¿ {E¿ {§¿ {∏¿ {Ó¿ |
¿ |$¿ |@¿ |I¿ |P¿ |T¿ |V¿ |W¿ |í¿ |‚¿ }¿ }J¿ }ë¿ }¨¿ }≠¿ }π¿ }Œ¿ }Â¿ ~¿ ~=¿ ~A¿ ~B¿ ~N¿ ~a¿ ~î¿ ~∑¿ ~÷¿ ~Î¿ ~Ô¿ ~¿ ~¸¿ /¿ b¿ π¿ ﬂ¿ Ä¿ Ä)¿ Ä1¿ Ä[¿ Äç¿ Äì¿ Äπ¿ ÄΩ¿ Äæ¿ Ä ¿ ÄÒ¿ Å=¿ Åä¿ Å⁄¿ Å¯¿ ÇG¿ Ço¿ Çè¿ Ç≈¿ ÇÀ¿ ÇÃ¿ ÇÎ¿ É#¿ Éf¿ ÉÉ¿ Éù¿ É“¿ Ñ¿ Ñ,¿ ÑJ¿ Ñg¿ Ñê¿ Ñ≥¿ Ñ‚¿ Ö¿ Ö(¿ Öl¿ Öâ¿ Öí¿ Öô¿ Öö¿ Ö’¿ Ü*¿ Ü0¿ Ü1¿ Üq¿ Ü‘¿ Ü⁄¿ Ü€¿ á¿ á¿ á	¿ á'¿ áN¿ áÑ¿ áº¿ á¬¿ á∆¿ á«¿ á˚¿ à¿ à4¿ àN¿ àT¿ àX¿ àY¿ à™¿ à¿¿ àˆ¿ â¿ â&¿ âH¿ âp¿ âø¿ â‚¿ â„¿ ä4¿ ä_¿ ä¥¿ äº¿ ä¬¿ ä∆¿ ä«¿ ä‡¿ ã¿ ã?¿ ãm¿ ãs¿ ãº¿ å¿ å¿ å^¿ åó¿ å∑¿ å„¿ åÁ¿ åË¿ ç¿ ç8¿ ç`¿ çr¿ çø¿ ç‘¿ ç‡¿ çÊ¿ çÍ¿ çÏ¿ çÌ¿ é8¿ é<¿ éà¿ éñ¿ éö¿ éÆ¿ é˝¿ è¿ è¿ èt¿ èÑ¿ èà¿ èñ¿ èö¿ èÂ¿ ê3¿ ê?¿ êr¿ êû¿ ê§¿ êÈ¿ ë¿ ë¿ ë.¿ ëI¿ ëc¿ ëÄ¿ ëí¿ ë™¿ ëæ¿ ë—¿ ë·¿ ë¸¿ í¿ í6¿ íW¿ íp¿ ív¿ íw¿ íü¿ í•¿ íÙ¿ ì1¿ ìF¿ ìG¿ ìè¿ ìï¿ ìÿ¿ ìﬁ¿ î.¿ î¿ î–¿ î˝¿ ï¿ ïG¿ ï^¿ ï_¿ ïô¿ ïü¿ ïÛ¿ ñG¿ ñM¿ ñf¿ ñ|¿ ñ}¿ ñ∏¿ ñæ¿ ó¿ óZ¿ óg¿ óm¿ óπ¿ óÁ¿ óÌ¿ ò>¿ òå¿ òÿ¿ òÂ¿ òÎ¿ ô<¿ ôâ¿ ô™¿ ô∞¿ ôæ¿ ôÿ¿ ô˜¿ ö¿ öA¿ öY¿ öÅ¿ öè¿ öö¿ ö¢¿ ö¨¿ ö‘¿ ö’¿ õ¿ õ!¿ õp¿ õû¿ õ√¿ õƒ¿ õÒ¿ õ˜¿ úG¿ úT¿ ú¿ úÄ¿ úØ¿ úÕ¿ úŒ¿ ù¿ ù¿ ùK¿ ùw¿ ùx¿ ù£¿ ù©¿ ù˙¿ ûC¿ ûè¿ û ¿ ü¿ ü¿ ü0¿ üL¿ üM¿ üÜ¿ ü∫¿ üª¿ üÒ¿ ü˜¿ †¿ †1¿ †2¿ †m¿ †ã¿ †å¿ †»¿ †Ê¿ †Á¿ ° ¿ °&¿ °i¿ °o¿ °†¿ °∑¿ °∏¿ °È¿ °Ô¿ ¢;¿ ¢d¿ ¢e¿ ¢q¿ ¢ò¿ ¢≥¿ ¢√¿ ¢‘¿ ¢¿ £¿ £¿ £;¿ £Y¿ £¿ £ú¿ £’¿ £Ú¿ §¿ §+¿ §<¿ §T¿ §x¿ §î¿ §®¿ §¬¿ §Ï¿ •¿ •+¿ •L¿ •∞¿ •Õ¿ •Ô¿ ¶¿ ¶/¿ ¶O¿ ¶^¿ ¶k¿ ¶v¿ ¶¿ ¶°¿ ¶√¿ ¶Î¿ ¶ˇ¿ ß¿ ß
¿ ß¿ ß¿ ßU¿ ßY¿ ß°¿ ßº¿ ß¿¿ ß‘¿ ®¿ ®k¿ ®o¿ ®ƒ¿ ®‘¿ ®ÿ¿ ®Ê¿ ®Í¿ ©5¿ ©É¿ ©è¿ ©¬¿ ©Î¿ ©Ò¿ ™¿ ™4¿ ™C¿ ™\¿ ™z¿ ™ó¿ ™¥¿ ™∆¿ ™ﬁ¿ ™Ú¿ ´¿ ´¿ ´0¿ ´S¿ ´j¿ ´ã¿ ´§¿ ´™¿ ´´¿ ´›¿ ´„¿ ¨-¿ ¨A¿ ¨R¿ ¨S¿ ¨î¿ ¨ö¿ ¨‰¿ ¨¯¿ ≠¿ ≠¿ ≠W¿ ≠ñ¿ ≠ú¿ ≠Á¿ ≠ˇ¿ Æ¿ ÆO¿ Æï¿ Æ¥¿ Æ∫¿ Ø¿ ØV¿ Ø¢¿ Øæ¿ Øƒ¿ Ø‡¿ Ø˘¿ Ø˙¿ ∞0¿ ∞6¿ ∞á¿ ∞ÿ¿ ±¿ ±¿ ±K¿ ±Q¿ ±°¿ ±±¿ ±∑¿ ≤¿ ≤U¿ ≤v¿ ≤|¿ ≤ä¿ ≤≥¿ ≤ﬁ¿ ≤˛¿ ≥0¿ ≥H¿ ≥k¿ ≥y¿ ≥Ñ¿ ≥¨¿ ≥¥¿ ≥æ¿ ≥„¿ ≥‰¿ ¥*¿ ¥0¿ ¥¿ ¥≠¿ ¥“¿ ¥”¿ µ ¿ µ¿ µV¿ µc¿ µé¿ µè¿ µæ¿ µ‹¿ µ›¿ ∂¿ ∂#¿ ∂Z¿ ∂Ü¿ ∂á¿ ∂≤¿ ∂∏¿ ∑	¿ ∑R¿ ∑û¿ ∑Ÿ¿ ∏"¿ ∏(¿ ∏?¿ ∏[¿ ∏\¿ ∏ï¿ ∏…¿ ∏ ¿ π ¿ π¿ π%¿ π@¿ πA¿ π|¿ πö¿ πõ¿ π◊¿ πı¿ πˆ¿ ∫/¿ ∫5¿ ∫x¿ ∫~¿ ∫Ø¿ ∫∆¿ ∫«¿ ∫¯¿ ∫˛¿ ªJ¿ ªs¿ ªt¿ ªÄ¿ ªß¿ ª¬¿ ª“¿ ª„¿ ªˇ¿ º¿ º)¿ ºb¿ ºç¿ ºü¿ º¬¿ º”¿ ºÎ¿ Ω¿ Ω+¿ Ω?¿ ΩY¿ ΩÉ¿ Ω§¿ Ω¬¿ Ω„¿ æG¿ æd¿ æÄ¿ æ¶¿ æ ¿ æ¿ æˇ¿ ø¿ ø¿ ø ¿ øB¿ ød¿ øå¿ ø†¿ øß¿ ø´¿ ø≠¿ øÆ¿ ø‡¿ ø‰¿ ¿*¿ ¿.¿ ¿w¿ ¿√¿ ¡¿ ¡¿ ¡c¿ ¡¨¿ ¡˘¿ ¬¿ ¬¿ ¬Y¿ ¬õ¿ ¬Ø¿ ¬≥¿ ¬˝¿ √¿ √¿ √¿ √c¿ √y¿ √…¿ √÷¿ ƒ%¿ ƒ;¿ ƒà¿ ƒ–¿ ƒ˝¿ ≈$¿ ≈*¿ ≈h¿ ≈Ä¿ ≈è¿ ≈°¿ ≈π¿ ≈ ¿ ≈‹¿ ≈Ò¿ ∆¿ ∆¿ ∆/¿ ∆V¿ ∆j¿ ∆Ö¿ ∆õ¿ ∆≤¿ ∆»¿ ∆È¿ «	¿ «"¿ «(¿ «)¿ «o¿ «u¿ «¬¿ «˛¿ »#¿ »$¿ »Q¿ »W¿ »®¿ »ª¿ »Ê¿ »Á¿ …!¿ …?¿ …@¿ …z¿ …ô¿ …ö¿ …œ¿ …Û¿ …Ù¿  ¿  %¿  v¿  ≈¿ À¿ ÀM¿ ÀS¿ Àj¿ ÀÜ¿ Àá¿ À∆¿ ÀÃ¿ Ã¿ Ã;¿ Ã<¿ Ãà¿ Ãæ¿ Ãƒ¿ Ãˇ¿ Õ¿ ÕT¿ Õ¢¿ Õ»¿ ÕÈ¿ ÕÍ¿ Œ ¿ Œ&¿ ŒI¿ Œd¿ Œe¿ Œî¿ Œ≤¿ Œ≥¿ ŒÏ¿ œ ¿ œ!¿ œW¿ œt¿ œu¿ œƒ¿ œ ¿ œÚ¿ –¿ –3¿ –S¿ –Y¿ –ß¿ –ı¿ —	¿ —>¿ —?¿ —t¿ —í¿ —ì¿ —œ¿ —’¿ —Ó¿ “¿ “¿ “Q¿ “W¿ “£¿ “¬¿ “»¿ ”¿ ”%¿ ”H¿ ”I¿ ”ä¿ ”ê¿ ””¿ ”Ÿ¿ ‘
¿ ‘!¿ ‘"¿ ‘.¿ ‘m¿ ‘n¿ ‘ù¿ ‘£¿ ‘‡¿ ‘Ê¿ ’%¿ ’Z¿ ’Ö¿ ’â¿ ’ä¿ ’Ÿ¿ ’È¿ ÷¿ ÷K¿ ÷O¿ ÷P¿ ÷ñ¿ ÷ø¿ ÷≈¿ ◊¿ ◊b¿ ◊≤¿ ◊˙¿ ÿI¿ ÿV¿ ÿ\¿ ÿ†¿ ÿ‚¿ ÿË¿ Ÿ)¿ Ÿk¿ Ÿâ¿ Ÿè¿ Ÿﬁ¿ ⁄¿ ⁄$¿ ⁄k¿ ⁄ü¿ ⁄•¿ ⁄Á¿ €5¿ €Å¿ €î¿ €ö¿ €®¿ €Ω¿ €Í¿ ‹1¿ ‹d¿ ‹è¿ ‹ò¿ ‹¢¿ ‹√¿ ‹ﬂ¿ ‹˚¿ ›¿ ›C¿ ›[¿ ›x¿ ›é¿ ›§¿ ›¬¿ ›‹¿ ›ı¿ ﬁ¿ ﬁ-¿ ﬁD¿ ﬁY¿ ﬁp¿ ﬁï¿ ﬁª¿ ﬁ—¿ ﬁÏ¿ ﬂ¿ ﬂ8¿ ﬂY¿ ﬂs¿ ﬂï¿ ﬂ∆¿ ﬂÕ¿ ﬂÓ¿ ‡¿ ‡>¿ ‡v¿ ‡Æ¿ ‡Œ¿ ‡¯¿ ·¿ ·@¿ ·Z¿ ·v¿ ·ò¿ ·¥¿ ·Ã¿ ·Ï¿ ‚¿ ‚(¿ ‚V¿ ‚Ü¿ ‚ò¿ ‚¨¿ ‚–¿ ‚Ù¿ „ ¿ „F¿ „b¿ „Ü¿ „ç¿ „ë¿ „í¿ „û¿ „–¿ „Ó¿ ‰*¿ ‰T¿ ‰^¿ ‰e¿ ‰i¿ ‰j¿ ‰v¿ ‰ª¿ ‰Ê¿ Â3¿ Âì¿ ÂË¿ Ê.¿ Ê2¿ Ê4¿ Ê5¿ Ên¿ Ê∑¿ Á¿ Á¿ Á+¿ ÁP¿ Á{¿ Á“¿ Ë¿ ËZ¿ Ë{¿ ËÀ¿ È¿ ÈO¿ Èj¿ Èk¿ Èw¿ Èå¿ È£¿ È«¿ ÈÔ¿ Í¿ ÍM¿ Íb¿ Ín¿ Ít¿ Íô¿ ÍÀ¿ Í—¿ Î¿ Î¿ Î¿ Î¿ Î+¿ Îd¿ Îá¿ Î¶¿ Îª¿ Îø¿ Î¿¿ ÎÃ¿ Î˛¿ Ï$¿ ÏW¿ ÏÄ¿ Ï¿¿ ÏÁ¿ Ì
¿ Ì¿ ÌZ¿ Ìb¿ Ìà¿ Ì¥¿ Ì»¿ Ó¿ Ó-¿ Ó;¿ ÓC¿ Ó{¿ ÓÅ¿ Ó∂¿ Ô¿ Ô¿ Ô¿ Ô¿ Ô'¿ ÔN¿ Ôî¿ Ô’¿ ¿ `¿ ©¿ ˜¿ ÒC¿ Òè¿ Òÿ¿ Ú!¿ Ú(¿ Ú_¿ Úå¿ Úπ¿ Úı¿ Ú¸¿ Û¿ ÛJ¿ Ûà¿ Ûú¿ ÛË¿ Ù¿ Ù¿ Ù¿ Ù2¿ ÙJ¿ Ùc¿ Ù|¿ Ù°¿ ÙÀ¿ Ù˜¿ ı"¿ ı=¿ ıV¿ ıw¿ ı¶¿ ı˙¿ ˆL¿ ˆü¿ ˆÔ¿ ˜¿ ˜&¿ ˜{¿ ˜©¿ ˜Ú¿ ˜Û¿ ¯¿ ¯1¿ ¯G¿ ¯U¿ ¯z¿ ¯ú¿ ¯±¿ ¯“¿ ¯‡¿ ¯Ï¿ ¯Ì¿ ˘(¿ ˘F¿ ˘q¿ ˘ì¿ ˘°¿ ˘≠¿ ˘Æ¿ ˘Ò¿ ˙;¿ ˙à¿ ˙°¿ ˙ﬁ¿ ˙˝¿ ˚¿ ˚H¿ ˚ü¿ ˚Ú¿ ¸C¿ ¸ò¿ ¸≠¿ ˝¿ ˝¿ ˝/¿ ˝0¿ ˝Q¿ ˝Ä¿ ˝é¿ ˝ö¿ ˝õ¿ ˝Ω¿ ˝€¿ ˛¿ ˛3¿ ˛W¿ ˛Ñ¿ ˛À¿ ˇ¿ ˇ0¿ ˇW¿ ˇä¿ ˇø¿ ˇ„¿ B¿ n¿ é¿ °¿ ≤¿ ¡¿ Œ¿ œ¿ Í¿¿¿¿v¿w¿¶¿Ÿ¿¿!¿=¿L¿X¿Y¿q¿|¿ß¿ƒ¿Õ¿‘¿ÿ¿Ÿ¿Ì¿9¿á¿÷¿"¿S¿y¿û¿Í¿%¿K¿Ç¿à¿§¿®¿©¿º¿‹¿¿.¿Y¿Ä¿ä¿¥¿÷¿‹¿Ó¿'¿/¿J¿N¿O¿à¿∆¿Î¿¿F¿X¿•¿”¿◊¿ÿ¿ˆ¿	"¿	`¿	Ä¿	à¿	ï¿	„¿
¿
¿
¿
¿
¿
¿
_¿
ö¿
õ¿
¿¿
Ù¿2¿o¿p¿µ¿Ë¿È¿=¿¿¥¿µ¿¡¿¿G¿î¿‘¿¿i¿≠¿¿¿-¿H¿e¿u¿¿¿
¿J¿ù¿∂¿∆¿·¿˙¿
¿D¿]¿≠¿ﬂ¿¿ ¿*¿b¿{¿À¿¿M¿{¿ç¿ó¿ﬂ¿(¿i¿Ñ¿Ø¿œ¿¿¿:¿y¿∆¿¿¸¿¿(¿T¿ò¿Ê¿¿¿%¿J¿x¿ã¿‹¿(¿I¿U¿ä¿î¿§¿¸¿S¿á¿©¿ÿ¿È¿¿W¿}¿∞¿æ¿Ã¿÷¿Ê¿ı¿¿
¿¿=¿A¿C¿D¿~¿º¿÷¿⁄¿¿k¿o¿æ¿ ¿Œ¿¿j¿´¿Õ¿Ó¿Ô¿¿¿l¿ê¿ª¿Á¿¿;¿b¿k¿l¿∂¿“¿Ú¿ ¿ -¿ M¿ q¿ í¿ ¥¿ ’¿ ˙¿!¿!?¿!D¿!E¿!s¿!•¿!›¿!·¿!‚¿"0¿"z¿"‘¿#¿#¿#X¿#ô¿#ü¿#ﬂ¿$/¿$~¿$∏¿%¿%N¿%T¿%û¿%Ø¿&¿&]¿&|¿&û¿&À¿&Â¿&Ú¿'¿'/¿'5¿'[¿'ô¿'»¿'˘¿(L¿(≠¿)¿)c¿)æ¿)⁄¿*¿*n¿*œ¿+*¿+á¿+í¿+õ¿+∫¿+Ë¿,&¿,f¿,u¿,¬¿,Ó¿-3¿-ê¿-ﬂ¿-˜¿.¿.q¿.{¿.¥¿.‚¿.Í¿/¿/¿/k¿/á¿/∂¿/Â¿0%¿0V¿0©¿1
¿1c¿1æ¿1⁄¿2¿2n¿2œ¿3*¿35¿3>¿3ç¿3ì¿3±¿3˜¿4P¿4Ä¿4á¿4ã¿4å¿4Ÿ¿5¿5_¿5™¿5˜¿6G¿6`¿6©¿6Ô¿77¿7}¿7…¿8¿8S¿8ì¿8œ¿9¿9K¿9â¿9À¿:¿:S¿:ó¿:€¿;¿;c¿;ß¿;Î¿</¿<s¿<∑¿<ˇ¿=K¿=õ¿=È¿>5¿>Å¿>”¿?'¿?}¿?œ¿@¿@W¿@ó¿@›¿A)¿As¿Aµ¿Aı¿A¸¿B1¿B5¿B6¿Bï¿BÓ¿C¿CP¿CÑ¿C´¿C–¿Cı¿D¿DH¿Dm¿D§¿D≈¿DË¿D˛¿E¿E¿E:¿El¿Eü¿E∆¿EÎ¿F¿F3¿FX¿Fá¿F®¿FÀ¿F·¿FÈ¿FÔ¿G!¿GW¿Gé¿G€¿H(¿Hu¿H∆¿Hˇ¿I&¿IK¿Ip¿Iì¿I∏¿IÎ¿J¿J/¿JE¿JM¿JS¿JÉ¿J∑¿JÏ¿K¿K8¿K]¿KÄ¿K•¿K÷¿K˜¿L¿L0¿L8¿L>¿Lè¿Lì¿Lï¿Lñ¿LÂ¿M5¿M_¿Mx¿Mô¿MØ¿M«¿Mÿ¿Mﬁ¿Mﬂ¿MÎ¿N'¿N)¿N*¿N_¿N®¿NÎ¿N¿NÒ¿N˝¿O)¿O*¿O6¿O]¿OÄ¿Oò¿O∞¿O›¿O¯¿P¿PH¿Pm¿Pñ¿P°¿P™¿P±¿PŒ¿P·¿Q¿Q'¿Q?¿Qk¿Qª¿Q⁄¿Q˛¿R$¿RK¿Rx¿RΩ¿RÃ¿RŸ¿R‰¿RÌ¿RÙ¿R¯¿R˙¿R˚¿SK¿Sá¿Sã¿S—¿T!¿T]¿Tú¿T”¿TŸ¿U¿U+¿U:¿UM¿Uj¿UÑ¿Uä¿Uã¿U‘¿U˛¿V¿VA¿Va¿Vb¿VÆ¿V¥¿W¿WS¿W_¿Wx¿Wy¿WÖ¿WÀ¿X¿X ¿X!¿Xy¿X»¿X‚¿XË¿Y-¿Y3¿YC¿YI¿Yú¿YÆ¿Y˜¿ZP¿ZT¿ZU¿Z©¿ZÙ¿[¿[¿[m¿[õ¿[°¿[±¿[∑¿[Û¿\&¿\i¿\Æ¿\æ¿\⁄¿\ˆ¿]G¿]å¿]ﬂ¿^/¿^{¿^Õ¿^Ò¿_	¿_¿_¿_/¿_9¿_M¿_Q¿_S¿_T¿_¢¿_œ¿_”¿`$¿`V¿`Z¿`í¿`„¿a1¿ax¿a…¿b¿bb¿b¨¿bı¿cA¿c|¿cè¿cì¿c°¿c•¿cÛ¿d7¿d]¿d°¿d¢¿dÊ¿e6¿ek¿eo¿eæ¿f¿fW¿fö¿fÍ¿g'¿g+¿gx¿g¬¿h¿h=¿hA¿hí¿hŸ¿i¿i8¿i<¿iç¿iﬁ¿j,¿jN¿jR¿jõ¿j‰¿k2¿kÄ¿k—¿l¿lX¿l\¿l∂¿l∆¿lŸ¿m¿m;¿mA¿mj¿m≈¿m∆¿m˜¿m˝¿nE¿né¿nî¿n‡¿o1¿o}¿oŒ¿p¿pl¿pº¿p¯¿q¿q¿q#¿q)¿qv¿q¡¿r¿r`¿r™¿rœ¿rÂ¿rÊ¿s&¿s,¿su¿s≤¿s≥¿sˇ¿t,¿t2¿t{¿t»¿u¿u_¿ue¿uµ¿uª¿v¿v\¿v™¿vﬁ¿w¿w¿wF¿wL¿wï¿w›¿wﬁ¿x(¿xu¿xƒ¿y¿y¿yk¿y¿¿y’¿yÔ¿yı¿z<¿zp¿zÖ¿zõ¿zπ¿z“¿{-¿{A¿{Ö¿{’¿{‚¿|¿|k¿|v¿|¿|Ü¿|ä¿|ã¿|⁄¿|¯¿|˛¿}N¿}ò¿}û¿}Á¿~E¿~c¿~ô¿~∏¿¿¿S¿Ñ¿ß¿‹¿Ä-¿ÄZ¿Äò¿Ä∂¿Äÿ¿Äˇ¿Å¿Å¿Å=¿Åd¿Åv¿Å~¿Å¶¿Åﬂ¿ÅÓ¿Åˆ¿Ç¿Çb¿ÇÜ¿Çµ¿ÇÙ¿ÉA¿É[¿Éå¿Éî¿É·¿Ñ0¿ÑM¿ÑS¿Ñy¿Ñù¿Ñ°¿Ñ¢¿ÑÆ¿Ñ˚¿Ñ¸¿Ö¿ÖO¿Ö}¿ÖÅ¿ÖÇ¿Öé¿Ö”¿Ö˛¿Ü2¿Ü6¿Ü8¿Ü9¿ÜÄ¿Üù¿Üª¿ÜÁ¿á
¿á1¿áb¿áÑ¿áÖ¿áë¿á¶¿áΩ¿áÊ¿à¿àP¿àV¿àq¿àu¿àv¿àÇ¿àï¿à‚¿à˙¿â#¿âL¿âq¿âë¿âØ¿âÒ¿â˜¿ä¿ä¿ä¿ä¿ä>¿äa¿äã¿äô¿äü¿äﬂ¿ã¿ãQ¿ãs¿ãw¿ãx¿ãÑ¿ãΩ¿ã„¿å¿å+¿å1¿å5¿å6¿åV¿å±¿å”¿åˆ¿ç¿ç'¿ç+¿ç,¿çW¿çÇ¿çî¿çø¿ç„¿çÎ¿é#¿é5¿é9¿é:¿é`¿éã¿é≤¿é’¿è!¿è4¿è;¿èu¿èß¿èÎ¿ê¿êd¿ê¥¿êÊ¿ë¿ë&¿ëL¿ëñ¿ë¿íF¿íó¿í∂¿í¡¿íÀ¿í—¿í’¿í÷¿íı¿ì7¿ìK¿ìi¿ìå¿ìï¿ìú¿ì†¿ì°¿ì≠¿ì‘¿î¿îP¿îT¿îV¿îW¿îû¿î≥¿î∑¿ï	¿ïY¿ïß¿ïŒ¿ï˝¿ñ%¿ñ+¿ñf¿ñ¿ñù¿ñΩ¿ñ”¿ñÍ¿ñ˝¿ó¿ó=¿óS¿óc¿ói¿ój¿óò¿óû¿ó⁄¿óÛ¿óÙ¿òC¿òê¿ò∂¿ò”¿ò‘¿ô¿ô(¿ô)¿ô_¿ô}¿ô~¿ôÕ¿ô·¿ö¿ö¿öZ¿öy¿öô¿öö¿öŒ¿öÈ¿öÍ¿õD¿õa¿õb¿õ°¿õ∏¿õπ¿õ≈¿õÏ¿ú/¿ú^¿ú{¿úµ¿úº¿ú—¿ú˙¿ù¿ù.¿ùD¿ùp¿ùê¿ù≈¿ùÊ¿û ¿û#¿ûG¿ûf¿ûî¿ûÈ¿ü¿ü>¿üU¿üj¿ü}¿üå¿üô¿ü§¿ü≠¿ü∫¿ü–¿ü¯¿†¿†E¿†b¿†w¿†é¿†¥¿°¿°*¿°F¿°U¿°`¿°i¿°o¿°p¿°ê¿°…¿°„¿°ı¿¢¿¢*¿¢u¿¢ñ¿¢£¿¢”¿¢Ê¿£1¿£J¿£ç¿£®¿£€¿£Ï¿£˚¿§¿§2¿§E¿§ê¿§∞¿§Ω¿§∆¿§Õ¿§Ô¿•¿•/¿•O¿•m¿•v¿•|¿•ñ¿•ö¿•õ¿•ß¿•Ï¿¶¿¶+¿¶ä¿¶ë¿¶⁄¿ß+¿ß/¿ß1¿ß2¿ß}¿ßï¿ßÀ¿ß·¿ßˇ¿® ¿®=¿®`¿®Ä¿®ü¿®æ¿®›¿©¿©¿©	¿©T¿©m¿©n¿©®¿©Õ¿©Œ¿™¿™;¿™<¿™ã¿™ñ¿™∂¿™∑¿™Ï¿´
¿´¿´W¿´i¿´ë¿´í¿´‚¿¨¿¨¿¨%¿¨?¿¨@¿¨l¿¨å¿¨ç¿¨ô¿¨ﬂ¿≠.¿≠O¿≠p¿≠ã¿≠√¿≠«¿≠»¿≠‘¿Æ¿Æ4¿Æ~¿Æù¿ÆŒ¿Æ‹¿ÆÍ¿Ø
¿Øb¿Øà¿Ø∑¿ØÏ¿∞<¿∞l¿∞w¿∞Ü¿∞≥¿∞ª¿∞Á¿±¿±#¿±B¿±b¿±Ç¿±¢¿±≥¿±ª¿±»¿≤¿≤1¿≤P¿≤V¿≤W¿≤©¿≤º¿≤œ¿≤÷¿≥"¿≥Z¿≥¶¿≥ÿ¿¥#¿¥o¿¥¬¿µ¿µ[¿µg¿µó¿µﬂ¿µ˚¿∂¿∂$¿∂s¿∂≤¿∂‚¿∑¿∑¿∑X¿∑}¿∑ì¿∑¶¿∑»¿∑‘¿∑ﬁ¿∏¿∏2¿∏e¿∏v¿∏Ã¿∏¿π¿π¿πN¿πZ¿πd¿πl¿πr¿π§¿π⁄¿πı¿∫¿∫¿∫H¿∫h¿∫|¿∫ç¿∫¨¿∫∂¿∫◊¿ª¿ª3¿ªà¿ªæ¿ªÈ¿ª¸¿º¿º¿º/¿ºd¿ºn¿ºv¿º|¿ºï¿ºô¿ºö¿º¶¿º◊¿Ω
¿Ω@¿Ωn¿Ω®¿Ω‹¿æ¿æ@¿æ~¿æ∏¿æº¿æΩ¿æ˚¿ø¿øF¿øò¿ø≤¿ø∫¿ø¿¿ø‘¿øÿ¿ø⁄¿ø€¿¿¿¿¿¿j¿¿ä¿¿¥¿¿…¿¿Ê¿¡	¿¡(¿¡P¿¡l¿¡r¿¡s¿¡π¿¡◊¿¡ÿ¿¬¿¬¿¬3¿¬N¿¬O¿¬Æ¿¬À¿¬—¿√(¿√y¿√û¿√ü¿√À¿√Â¿√Ê¿ƒ'¿ƒ-¿ƒ]¿ƒ|¿ƒ}¿ƒâ¿ƒ¡¿ƒ√¿ƒƒ¿ƒˆ¿≈0¿≈1¿≈=¿≈P¿≈p¿≈Ö¿≈â¿≈ä¿≈ñ¿≈Ω¿∆¿∆o¿∆ø¿∆∆¿∆˚¿∆¸¿«B¿«°¿«ß¿«®¿«˛¿»/¿»n¿»x¿»~¿»¿»·¿…;¿…ü¿…˚¿ S¿ ß¿ ˇ¿ÀU¿Àê¿À∫¿À◊¿Àˇ¿Ã]¿ÃÑ¿Ã„¿Õ*¿Õm¿Õ¥¿Õ˙¿Œ(¿ŒT¿Œç¿Œƒ¿œ¿œC¿œD¿œí¿œ®¿œ”¿– ¿–9¿–t¿–}¿–Ñ¿–°¿–‰¿—¿—C¿—c¿—É¿—é¿—ñ¿—∏¿—ˆ¿“¿“:¿“E¿“M¿“S¿“T¿“£¿“Ú¿”¿”4¿”e¿”v¿”¶¿”◊¿”Ó¿”Ù¿”ı¿‘!¿‘8¿‘V¿‘l¿‘å¿‘Æ¿‘⁄¿’3¿’^¿’v¿’ö¿’¿¿÷ ¿÷!¿÷B¿÷x¿÷á¿÷≥¿÷ﬂ¿÷ˇ¿◊&¿◊T¿◊Ñ¿◊ª¿◊⁄¿ÿ¿ÿ[¿ÿé¿ÿ¬¿ÿÍ¿ÿˇ¿Ÿ¿Ÿ#¿Ÿ2¿Ÿ?¿ŸJ¿ŸS¿ŸZ¿Ÿ[¿ŸÑ¿Ÿ®¿Ÿ’¿Ÿ˙¿⁄/¿⁄I¿⁄R¿⁄X¿⁄Y¿⁄©¿⁄≠¿⁄Æ¿⁄Ê¿€¿€G¿€|¿€É¿€á¿€â¿€ä¿€¬¿€Î¿€˛¿‹¿‹5¿‹R¿‹r¿‹ï¿‹ª¿‹€¿›¿›#¿›D¿›J¿›K¿›q¿›ö¿›ª¿›Ÿ¿›˜¿ﬁ¿ﬁ8¿ﬁS¿ﬁx¿ﬁõ¿ﬁú¿ﬁ®¿ﬁœ¿ﬂ¿ﬂU¿ﬂπ¿‡¿‡i¿‡p¿‡∂¿·¿·¿·¿·p¿·°¿·‡¿·Í¿·¿·Ò¿‚0¿‚U¿‚™¿‚±¿‚≤¿‚⁄¿„ ¿„I¿„™¿„—¿‰0¿‰w¿‰∫¿Â¿ÂG¿Âu¿Â°¿Â⁄¿Ê¿ÊC¿ÊÅ¿ÊÇ¿Êû¿Ê∏¿Ê’¿Á¿Á6¿Ác¿Áë¿Áü¿Á∏¿Áπ¿Á·¿Ë¿Ëq¿Ë†¿Ë»¿Ë—¿ËÎ¿È¿È?¿ÈZ¿ÈÅ¿È†¿È∫¿ÈÁ¿Í;¿ÍJ¿Íh¿Íõ¿Íº¿Í‚¿Î¿Î@¿ÎÄ¿Î®¿Îπ¿Î»¿Î’¿Î‡¿ÎÈ¿Î¿ÎÒ¿Ï¿ÏX¿Ïu¿Ï∫¿Ï“¿Ï˛¿ÌD¿Ìp¿Ìï¿ÌΩ¿ÌÎ¿ÓA¿Óo¿Óï¿Ó«¿Ó¸¿Ô.¿ÔÇ¿Ôì¿Ô≥¿Ô¬¿Ôœ¿Ô⁄¿Ô„¿ÔÍ¿ÔÎ¿¿¿#¿$¿L¿d¿é¿£¿™¿Æ¿∞¿±¿Ú¿Ò!¿ÒW¿ÒÉ¿ÒÑ¿Òƒ¿Ò≈¿Ò—¿Ú¿Ú@¿ÚA¿ÚM¿ÚÇ¿ÚÑ¿ÚÖ¿Ú‘¿Ú‹¿Ú‡¿Û¿Û¿ÛO¿ÛS¿Û°¿Û´¿ÛÓ¿Û¸¿Ù¿Ù8¿Ùk¿Ùö¿Ùø¿Ù…¿Ù—¿Ù◊¿ÙË¿Ù¿ı4¿ıC¿ıE¿ıF¿ıç¿ı•¿ı»¿ıÂ¿ˆ¿ˆ¿ˆ8¿ˆY¿ˆx¿ˆô¿ˆ≠¿ˆ±¿ˆ≥¿ˆ¥¿ˆ˝¿˜¿˜O¿˜ò¿˜‡¿¯¿¯¿¯¿¯¿¯E¿¯í¿¯ﬂ¿˘*¿˘:¿˘R¿˘T¿˘U¿˘Ä¿˘Å¿˘ƒ¿˙¿˙0¿˙c¿˙d¿˙w¿˙§¿˙«¿˙‘¿˚¿˚d¿˚ó¿˚û¿˚ü¿˚⁄¿¸,¿¸-¿¸K¿¸L¿¸é¿¸è¿¸õ¿¸—¿˝¿˝¿˝¿˝)¿˝\¿˝ô¿˝ù¿˝û¿˝™¿˝‚¿˛)¿˛-¿˛.¿˛:¿˛v¿˛µ¿˛‹¿ˇ¿ˇ¿ˇ#¿ˇ'¿ˇ(¿ˇ4¿ˇz¿ˇ|¿ˇ}¿ˇØ¿ˇ’¿ˇ‚¿ ¿ -¿ `¿ g¿ h¿ Ü¿ á¿ …¿
¿¿¿N¿ë¿ï¿ñ¿≥¿¥¿◊¿ÿ¿‰¿¿J¿N¿O¿[¿í¿›¿¿F¿N¿Ç¿§¿¨¿‡¿¿
¿>¿`¿h¿à¿ê¿î¿ï¿°¿“¿¿R¿Ü¿é¿¬¿Î¿Û¿'¿P¿X¿å¿µ¿Ω¿‰¿Ï¿¿Ò¿¿¿¿H¿Å¿Ö¿Ü¿í¿√¿ ¿¿¿¿B¿à¿å¿ç¿ô¿“¿	 ¿	$¿	[¿	Ü¿	ê¿	π¿	¬¿	…¿	Õ¿	Œ¿	⁄¿
¿
<¿
`¿
ñ¿
À¿
’¿¿A¿K¿Å¿∂¿¿¿„¿Ï¿Û¿˜¿¯¿¿?¿î¿ò¿ô¿Æ¿Ø¿ª¿¿H¿L¿M¿Y¿Ø¿∞¿º¿¿¿ ¿T¿Æ¿ﬁ¿&¿*¿+¿7¿~¿¿∑¿Û¿6¿Ä¿‹¿1¿á¿À¿Û¿:¿@¿è¿›¿Ì¿C¿ù¿…¿˙¿¿^¿h¿ô¿¥¿Â¿Ô¿0¿E¿L¿P¿R¿S¿}¿ù¿™¿È¿:¿h¿o¿p¿´¿˝¿˛¿¿¿_¿`¿l¿¢¿È¿Ì¿Ó¿˙¿2¿y¿}¿~¿ä¿Ω¿˙¿˛¿ˇ¿¿G¿Ü¿—¿ÿ¿‹¿›¿È¿/¿1¿C¿D¿m   &_kDebugMenus_kDefaultSubmenuIconSize_kLabelItemDefaultSpacing_kLabelItemMinSpacing_kMenuTraversalShortcuts_kMenuVerticalMinPadding_kMenuViewPadding"_kTopLevelMenuHorizontalMinPadding_MenuAnchorScope
MenuAnchor_MenuAnchorStateMenuBarMenuItemButton_MenuItemButtonStateCheckboxMenuButtonRadioMenuButtonSubmenuButton_SubmenuButtonState_SubmenuDirectionalFocusAction_LocalizedShortcutLabeler_MenuBarAnchor_MenuBarAnchorStateMenuAcceleratorCallbackBindingMenuAcceleratorLabel_MenuAcceleratorLabelState_MenuItemLabel_MenuLayout
_MenuPanel_MenuPanelState_Submenu_MouseCursor_debugMenuInfo_isCupertino_usesSymbolicModifiers_platformSupportsAccelerators_MenuBarDefaultsM3_MenuButtonDefaultsM3_MenuDefaultsM3+flutter.material.MenuAnchor.alignmentOffsetÉBThe offset of the menu relative to the alignment origin determined by
[MenuStyle.alignment] on the [style] attribute and the ambient
[Directionality].

Use this for adjustments of the menu placement.

Increasing [Offset.dy] values of [alignmentOffset] move the menu position
down.

If the [MenuStyle.alignment] from [style] is not an [AlignmentDirectional]
(e.g. [Alignment]), then increasing [Offset.dx] values of
[alignmentOffset] move the menu position to the right.

If the [MenuStyle.alignment] from [style] is an [AlignmentDirectional],
then in a [TextDirection.ltr] [Directionality], increasing [Offset.dx]
values of [alignmentOffset] move the menu position to the right. In a
[TextDirection.rtl] directionality, increasing [Offset.dx] values of
[alignmentOffset] move the menu position to the left.

Defaults to [Offset.zero].'flutter.material.MenuBar.shortcuts_noteÑ†Menus using [MenuItemButton] can have a [SingleActivator] or
[CharacterActivator] assigned to them as their [MenuItemButton.shortcut],
which will display an appropriate shortcut hint. Even though the shortcut
labels are displayed in the menu, shortcuts are not automatically handled.
They must be available in whatever context they are appropriate, and handled
via another mechanism.

If shortcuts should be generally enabled, but are not easily defined in a
context surrounding the menu bar, consider registering them with a
[ShortcutRegistry] (one is already included in the [WidgetsApp], and thus
also [MaterialApp] and [CupertinoApp]), as shown in the example below. To be
sure that selecting a menu item and triggering the shortcut do the same
thing, it is recommended that they call the same callback.

{@tool dartpad} This example shows a [MenuBar] that contains a single top
level menu, containing three items: "About", a checkbox menu item for
showing a message, and "Quit". The items are identified with an enum value,
and the shortcuts are registered globally with the [ShortcutRegistry].

** See code in examples/api/lib/material/menu_anchor/menu_bar.0.dart **
{@end-tool},flutter.material.menu_anchor.closeOnActivate\Determines if the menu will be closed when a [MenuItemButton]
is pressed.

Defaults to true.@flutter.material.menu_anchor.menu_accelerator_child_builder.argsÉ$The arguments to the function are as follows:

* The `context` supplies the [BuildContext] to use.
* The `label` is the [MenuAcceleratorLabel.label] attribute for the relevant
  [MenuAcceleratorLabel] with the accelerator markers stripped out of it.
* The `index` is the index of the accelerator character within the
  `label.characters` that applies to this accelerator. If it is -1, then the
  accelerator should not be highlighted. Otherwise, the given character
  should be highlighted somehow in the rendered label (typically with an
  underscore). Importantly, `index` is not an index into the [String]
  `label`, it is an index into the [Characters] iterable returned by
  `label.characters`, so that it is in terms of user-visible characters
  (a.k.a. grapheme clusters), not Unicode code points.8flutter.material.MenuAcceleratorLabel.accelerator_sampleÇ{@tool dartpad} This example shows a [MenuBar] that handles keyboard
accelerators using [MenuAcceleratorLabel]. To use the accelerators, press
the Alt key to see which letters are underlined in the menu bar, and then
press the appropriate letter. Accelerators are not supported on macOS or iOS
since those platforms don't support them natively, so this demo will only
show a regular Material menu bar on those platforms.

** See code in examples/api/lib/material/menu_anchor/menu_accelerator_label.0.dart **
{@end-tool}9flutter.material.menu_anchor.menu_accelerator_label.labelÅÌTo indicate which letters in the label are to be used as accelerators, add
an "&" character before the character in the string. If more than one
character has an "&" in front of it, then the characters appearing earlier
in the string are preferred. To represent a literal "&", insert "&&" into
the string. All other ampersands will be removed from the string before
calling [MenuAcceleratorLabel.builder]. Bare ampersands at the end of the
string or before whitespace are stripped and ignored. †