ÄÛpoint	direction==toStringhashCode_currentOffset_currentLine_currentTextPosition_lineMetrics	_editable_isValidisValid_positionCache_getTextPositionForLinecurrentmoveNextmovePreviousmoveByOffset_foregroundRenderObject_backgroundRenderObjectdispose_updateForegroundPainterforegroundPainter_foregroundPainter_updatePainterpainter_painter_caretPainter_selectionPainter_autocorrectHighlightPainter_builtInForegroundPainters _cachedBuiltInForegroundPainters _createBuiltInForegroundPainters_builtInPainters_cachedBuiltInPainters_createBuiltInPaintersignorePointertextHeightBehaviortextWidthBasisdevicePixelRatio_devicePixelRatioobscuringCharacter_obscuringCharacterobscureText_obscureTextselectionHeightStyleselectionWidthStyletextSelectionDelegateselectionStartInViewport_selectionStartInViewportselectionEndInViewport_selectionEndInViewport_getTextPositionVerticalgetLineAtOffsetgetWordBoundarygetTextPositionAbovegetTextPositionBelow!_updateSelectionExtentsVisibility_setTextEditingValue_setSelectionmarkNeedsPaintsystemFontsDidChange	plainTexttext_textPainter_cachedAttributedValue_cachedCombinedSemanticsInfos_textIntrinsicsCache_textIntrinsics	textAligntextDirectionlocale
strutStylecursorColorbackgroundCursorColor_disposeShowCursor
showCursor_showCursor_showHideCursorhasFocus	_hasFocus	forceLine
_forceLinereadOnly	_readOnlymaxLines	_maxLinesminLines	_minLinesexpands_expandsselectionColortextScaleFactor
textScaler	selection
_selectionoffset_offsetcursorWidth_cursorWidthcursorHeight_cursorHeightpaintCursorAboveText_paintCursorOnTopcursorOffsetcursorRadiusstartHandleLayerLink_startHandleLayerLinkendHandleLayerLink_endHandleLayerLinkfloatingCursorAddedMarginfloatingCursorOn_floatingCursorOn_floatingCursorTextPositionenableInteractiveSelection_enableInteractiveSelectionselectionEnabledpromptRectColorsetPromptRectRangemaxScrollExtent_maxScrollExtent_caretMarginclipBehavior_clipBehavior_semanticsInfo_cachedChildNodesgetBoxesForSelectiondescribeSemanticsConfiguration_handleSetTextassembleSemanticsNode_createShowOnScreenFor_handleSetSelection#_handleMoveCursorForwardByCharacter$_handleMoveCursorBackwardByCharacter_handleMoveCursorForwardByWord_handleMoveCursorBackwardByWord_getNextWord_getPreviousWord_onlyWhitespaceattachdetachredepthChildrenvisitChildren_isMultiline_viewportAxis_paintOffset_viewportExtent_getMaxScrollExtent_hasVisualOverflowgetEndpointsForSelectiongetRectForComposingRangegetPositionForPointgetLocalRectForCaretcomputeMinIntrinsicWidthcomputeMaxIntrinsicWidthpreferredLineHeight_cachedLineBreakCount_countHardLineBreaks_preferredHeightcomputeMinIntrinsicHeightcomputeMaxIntrinsicHeightcomputeDistanceToActualBaselinehitTestSelfhitTestChildren_tap
_longPresshandleEvent_lastTapDownPosition_lastSecondaryTapDownPositionlastSecondaryTapDownPositionhandleSecondaryTapDownhandleTapDown_handleTapDown	handleTap
_handleTaphandleDoubleTaphandleLongPress_handleLongPressselectPositionselectPositionAtwordBoundaries
selectWordselectWordsInRangeselectWordEdgegetWordAtOffset_placeholderDimensions_adjustConstraints_computeTextMetricsIfNeeded_caretPrototype_computeCaretPrototype_snapToPhysicalPixelcomputeDryLayoutcomputeDryBaselineperformLayout_relativeOrigin_previousOffset_shouldResetOrigin_resetOriginOnLeft_resetOriginOnRight_resetOriginOnTop_resetOriginOnBottom"_resetFloatingCursorAnimationValue_calculateAdjustedCursorOffset$calculateBoundedFloatingCursorOffsetsetFloatingCursor_lineNumberForstartVerticalCaretMovement_paintContents_leaderLayerHandler_paintHandleLayersapplyPaintTransformpaint_clipRectLayerdescribeApproximatePaintClipdebugFillPropertiesdebugDescribeChildrenparentisRepaintBoundarysizedByParentshouldRepainthighlightPainthighlightColor_highlightColorhighlightedRange_highlightedRange_selectionHeightStyle_selectionWidthStyleshouldPaint_shouldPaintshowRegularCaret
caretPaintfloatingCursorPaint
caretColor_caretColor_cursorRadius_cursorOffset_backgroundCursorColorfloatingCursorRect_floatingCursorRectpaintRegularCursorpaintersaddListenerremoveListener
_kCaretGap_kCaretHeightOffset_kFloatingCursorSizeIncrease_kFloatingCursorRadius6_kShortestDistanceSquaredWithFloatingAndRegularCursorsTextSelectionPointVerticalCaretMovementRunRenderEditable_RenderEditableCustomPaintRenderEditablePainter_TextHighlightPainter_CaretPainter_CompositeRenderEditablePainterÅúBoxHeightStyleBoxWidthStyleLineMetricsSemanticsInputTypeTextBoxdouble
EdgeInsets	symmetric
horizontalverticalRadiuscircular	immutableOffsetTextDirectionoverrideboolObject	identicalruntimeTypepoint	directionStringltrrtlinthashTextPositioncurrentIteratorList_textPaintercomputeLineMetricsMapMapEntrydxbaselinegetPositionForOffsetlengthkeyvaluedy	RenderBox"RelayoutWhenSystemFontsChangeMixinContainerRenderObjectMixinTextParentData%RenderInlineChildrenContainerDefaultsTextLayoutMetrics	TextAlignstartViewportOffsetzero
InlineSpanColorValueNotifier	LayerLink
StrutStyle
Deprecated
TextScaler	noScalingTextSelectionTextHeightBehaviorTextWidthBasisparentLocaletightfromLTRB	TextRangeCliphardEdge
charactersTextPaintertext	textAligntextDirection
textScalerlinearlocalemaxLines
strutStyletextHeightBehaviortextWidthBasishighlightColorhighlightedRangeselectionHeightStyleselectionWidthStylepromptRectRange
caretColorcursorRadiuscursorOffsetbackgroundCursorColoraddAllchildrenvoidlayerdisposepainterspainter
adoptChildmarkNeedsLayoutmarkNeedsSemanticsUpdateTextSelectionDelegateValueListenablegetOffsetForCaret	translategetLineBoundary
baseOffsetextentOffsetendgetWordBoundarypreferredLineHeightisValidRectsizeoffsetaffinityinflatecontainsTextEditingValueSelectionChangedCauseuserUpdateTextEditingValuetextEditingValuecopyWithmin	selectionmarkNeedsPaintsystemFontsDidChange	plainTextAttributedStringInlineSpanSemanticsInformationellipsisjustifyCupertinoColorsinactiveGrayFloatingCursorDragStateattachedremoveListeneraddListenershouldPainttextScaleFactorCompositedTransformTargetLinkedHashMapKeySemanticsNodegetBoxesForSelectionmap	fromLTRBDtextBoxlefttoprightbottomtoListSemanticsConfigurationdescribeSemanticsConfigurationgetSemanticsInformationanyinfo
recognizerdefaultTargetPlatformTargetPlatformmacOSisSemanticBoundaryexplicitChildNodesStringBufferStringAttributesemanticsLabelstringAttributesinfoAttributerangeaddcopywritetoString
attributesattributedValue
isObscuredisMultiline	isFocusedisTextField
isReadOnly	inputTypeonSetSelection	onSetTexttextSelectiongetOffsetBeforeonMoveCursorBackwardByWordonMoveCursorBackwardByCharactergetOffsetAfteronMoveCursorForwardByWordonMoveCursorForwardByCharacter	collapsedkeyboardIterable
isNotEmpty
firstChildcombineSemanticsInfoisPlaceholder	elementAtisTagged PlaceholderSpanIndexSemanticsTag
parentData
childAfterisEmptyfirsttoRectskipexpandToIncludefromLTWHmaxwidthconstraintsmaxWidthheight	maxHeightfloorToDoubleceilToDoublesortKeyOrdinalSortKeyattributedLabelTapGestureRecognizerVoidCallbackDoubleTapGestureRecognizerhandleronTapisLinkLongPressGestureRecognizerGestureLongPressCallbackonLongPressparentPaintClipRect	intersectisHiddenremovekeys	UniqueKeyshowOnScreen
updateWithconfigrectchildrenInInversePaintOrder
descendantextentisCollapsedi
codeUnitAtisWhitespacePipelineOwnerattach
debugOwner	onTapDowndetachRenderObjectredepthChildredepthChildrenRenderObjectVisitorvisitChildrenAxispixelshasSizeSizeboxHeightStyleboxWidthStyleclampDoublelastfoldaccumincomingshiftglobalToLocalgetFullHeightForCaretiOS
heightDiffandroidfuchsialinuxwindowscaretHeighttopLeftPlaceholderDimensionslayoutInlineChildreninfinityBoxConstraintschildgetMinIntrinsicWidthChildLayoutHelpergetDryBaselinesetPlaceholderDimensionslayoutminWidthminIntrinsicWidthgetMaxIntrinsicWidthmaxIntrinsicWidthindexminLinesgetMaxIntrinsicHeightdryLayoutChildTextBaselinecomputeDistanceToActualBaseline	protectedBoxHitTestResultposition	GlyphInfogetClosestGlyphForOffsetgraphemeClusterLayoutBoundsgetSpanForPositiongraphemeClusterCodeUnitRangeHitTestTargetHitTestEntryspanhitTestInlineChildrenPointerEventBoxHitTestEntrydebugHandleEventPointerDownEventdebugNeedsLayout
addPointerTapDownDetailsglobalPositioncausetaponDoubleTap	doubleTap	longPressEditableTextTextEditingControllerfromtoWordBoundarywordBoundariesbaseTextAffinityupstreamvisibleForTestingfromPosition
downstreamlocalToGlobalisFiniteroundconstrainWidthconstrainHeightlayoutChildgetBaselinepositionInlineChildreninlinePlaceholderBoxesapplyViewportDimensionapplyContentDimensionsshouldResetOriginEndresetLerpValuelerpfloatingCursorRectinflateRectshowRegularCaretlineMetrics
lineNumberdescent_PaintingContext
paintChildpaintcanvaspaintInlineChildrenLayerHandleLeaderLayerlink	pushLayerMatrix4defaultApplyPaintTransformnonepushClipRectneedsCompositingclipBehavioroldLayerClipRectLayer	antiAliasantiAliasWithSaveLayerDiagnosticPropertiesBuilderdebugFillPropertiesColorPropertyDiagnosticsPropertyIntPropertydefaultValueDiagnosticsNodetoDiagnosticsNodenamestyleDiagnosticsTreeStyle
transitionshouldRepaint_computeTextMetricsIfNeededbiggestnotifyListenersforegroundPainterCustomPainterRenderCustomPaintChangeNotifierCanvasPaintcolordrawRectbox_paintOffsetgetLocalRectForCaretcenterdistanceSquaredRRectfromRectAndRadius	drawRRect_floatingCursorTextPositionwithOpacityiteratormoveNextIterator	RenderBox"RelayoutWhenSystemFontsChangeMixinContainerRenderObjectMixin%RenderInlineChildrenContainerDefaultsTextLayoutMetricsChangeNotifierRenderEditablePainterÊ`ÁN€‡w|Bet≠,    Ä·   dart:collection  Ä˚   ÅÅmathÅ	dart:mathÅ-ÅyBoxHeightStyleBoxWidthStyleLineMetricsSemanticsInputTypeTextBox Å   Å'Å*uiÅ*dart:ui  Å}   "package:characters/characters.dart  Å™   package:flutter/foundation.dart  Å‘   package:flutter/gestures.dart  Å¸   package:flutter/semantics.dart  Ç%   package:flutter/services.dart  ÇN   box.dart  Ça   custom_paint.dart  Ç}   
layer.dart  Çí   layout_helper.dart  ÇØ   object.dart  Ç≈   paragraph.dart  Çﬁ   viewport_offset.dart¿ º% ¿ƒå\ <ÄÜÄ§Ä•Ä÷ÄﬂÄ‡Ä˙ÅÅ{Å|Å©Å”Å˚Ç$ÇLÇMÇ`Ç|ÇëÇÆÇƒÇ›Ç¸Ç˝É&ÉXÉYÉßÉ⁄Ñ Ñ3ÑDÑGÑHÑÑªÑºÖÖ^Ö™ÖÍÜ3ÜÜÜáÜ–áá8áCá^áöá“á”àà^àtàuà∞à“à”àﬂââ$â7â=âiâ}âÉâ„âÁâËâÙä
ä*äSä|äîäõäüä†ä¨ä·ä„ä‰ã2ã~ãñãöã‰å1å~åÕççkçóçõçÈé8éàé◊è%èCèGènèxèÄèäè⁄ê'êvê∆ëëaërëvëƒíí`íÜíôíùíﬁì(ìxì…îî	î^îxî|î ïïhïÑï«ïÂï˘ññ/ñFñ_ñdñeñ~ñíñ∑ñ∏ñ„óóóóóaógóµóÀó—ò!ò]òròáòõò°ò˛ôNôäôæô÷ô‹ôÒôıôˆö8ögöhö≥ö»öÂõ<õ^õ{õÅõ©õ™úúfú∫úÀú‚úÈùù)ù-ù.ù:ùWùlùçùëùíùûù≤ù«ù˙ûûûsûäû≠ûÿûÈûÌûÓüüüUümüÇüüü≥üπ††/†R†}†é†í†ì†’†Ó†Ù°:°@°x°ù°Œ°Á¢%¢@¢Q¢[¢c¢p¢Æ¢Õ¢ﬁ¢Ë¢¢ˆ£"£&£(£)£v£ü£££Ì§=§f§j§π••X•¶•ı¶¶¶`¶±¶ıßß%ßQßêßæß·®3®9®w®}®Ã®“© ©n©±©∑™ ™™$™:™d™è™ß™…™Ó´´/´Z´q´Ñ´û´∫´’´Ê¨¨v¨≤¨∏¨⁄≠≠*≠N≠n≠â≠§≠–ÆÆ0ÆNÆbÆÄÆöÆ¥Æ€ØØ%ØkØÆØ‘∞ ∞@∞\∞É∞¨∞–∞˛±±N±±é±€≤≤≤(≤e≤™≤¥≤√≥≥s≥}≥∑≥⁄¥¥9¥N¥m¥î¥©µµ%µRµsµ§µÕµ◊∂∂3∂P∂k∂ä∂£∂∆∂Î∑∑]∑ä∑ø∑∏!∏D∏a∏Ä∏•∏À∏¸π3π4πkπüπ‚∫#∫$∫g∫¨∫≠∫Ÿªª7ªxªyª™ª«ª›ª·ª‚ª˝º4ºkºlºxºãº±ºŸº˝Ω%ΩIΩjΩõΩ¬ΩÎææ>æ_æ|æòæΩæ€æ¯øø ø5ø9ø:øøºø◊¿ @ ¿ @/¿ @à¿ @ó¿ @ò¿ @√¿ A¿ AB¿ AK¿ Au¿ A≠¿ A∫¿ Aı¿ A˚¿ B ¿ B$¿ B%¿ Bf¿ Bç¿ Bì¿ Bﬂ¿ C%¿ CP¿ Cñ¿ C√¿ D ¿ D,¿ D:¿ D@¿ Dj¿ Dn¿ Do¿ D™¿ DÁ¿ E¿ E!¿ EP¿ Eü¿ EÆ¿ EØ¿ E⁄¿ F6¿ FY¿ Fb¿ Få¿ Fƒ¿ F—¿ G¿ G¿ G-¿ G1¿ G2¿ Gz¿ G°¿ Gß¿ GÛ¿ H>¿ HY¿ Hã¿ HÆ¿ H·¿ I¿ I¿ I¿ I7¿ I;¿ I<¿ IQ¿ Iõ¿ I◊¿ Iÿ¿ Iˆ¿ JA¿ Jó¿ Jò¿ J‹¿ K+¿ Kp¿ K∑¿ K„¿ L5¿ L<¿ L@¿ LA¿ L{¿ L∂¿ LÒ¿ M.¿ MZ¿ MÉ¿ M©¿ Mƒ¿ Mˆ¿ Mˇ¿ N¿ N
¿ N¿ NV¿ Nf¿ Nl¿ Nπ¿ O¿ O4¿ O:¿ Oâ¿ O…¿ Oœ¿ P¿ P¿ P¿ PC¿ Pî¿ P ¿ P˛¿ Q¿ Q¿ Q?¿ QV¿ QZ¿ Q[¿ Qñ¿ Q⁄¿ R¿ R7¿ RE¿ RK¿ Rt¿ Rã¿ Rè¿ Rê¿ RΩ¿ R√¿ S¿ SA¿ S]¿ SÑ¿ S©¿ S∑¿ SΩ¿ S‹¿ SÛ¿ S˜¿ S¯¿ T:¿ T@¿ Ti¿ T°¿ Tø¿ TË¿ U¿ U¿ U$¿ UN¿ Uo¿ UÜ¿ Uä¿ Uã¿ UŒ¿ Uˆ¿ V¿ V+¿ VL¿ VZ¿ V`¿ Vz¿ Vù¿ VΩ¿ V¡¿ V¬¿ W¿ W¿ WQ¿ W©¿ Wﬂ¿ X¿ X¿ X¿ Xb¿ Xh¿ X¶¿ X˚¿ Y/¿ Yb¿ Yf¿ Yg¿ Yµ¿ Yı¿ Y˚¿ ZL¿ Zo¿ Zû¿ Zü¿ Zˆ¿ Z¸¿ [H¿ [ò¿ [„¿ [ˆ¿ [¸¿ \I¿ \î¿ \±¿ ]¿ ]W¿ ]X¿ ]≠¿ ]≥¿ ]ˇ¿ ^H¿ ^ó¿ ^±¿ ^∑¿ _¿ _O¿ _l¿ _ª¿ `¿ `¿ `M¿ `•¿ `ˇ¿ aT¿ aô¿ aù¿ aû¿ aº¿ aΩ¿ aˇ¿ b¿ bD¿ bá¿ b‘¿ bÎ¿ c6¿ c<¿ cÜ¿ cä¿ cã¿ c«¿ c”¿ d¿ d;¿ d?¿ d@¿ dá¿ dì¿ d–¿ e¿ ee¿ e§¿ eÌ¿ f+¿ fj¿ fn¿ fo¿ f∂¿ f¬¿ fˇ¿ gI¿ gî¿ g”¿ h¿ hY¿ hò¿ hú¿ hù¿ hπ¿ h∫¿ h˝¿ i¿ i;¿ ij¿ ió¿ i•¿ i´¿ iﬁ¿ iﬂ¿ j¿ jk¿ jÇ¿ jâ¿ j“¿ k ¿ kn¿ k®¿ k˘¿ lF¿ lp¿ l§¿ l»¿ l˙¿ l˚¿ m8¿ mÉ¿ mö¿ m°¿ m”¿ m˜¿ n'¿ n+¿ n,¿ nÇ¿ n…¿ nÕ¿ nŒ¿ o¿ o@¿ oé¿ o›¿ p*¿ pv¿ p«¿ pˇ¿ q¿ qY¿ q™¿ qÿ¿ r¿ rd¿ rm¿ rs¿ rç¿ rﬁ¿ rÎ¿ rÚ¿ rˆ¿ r˜¿ s¿ s¿ s9¿ sÅ¿ s∞¿ sﬂ¿ s„¿ s‰¿ s¿ t¿ t2¿ tV¿ tZ¿ t[¿ tú¿ t¢¿ t·¿ u¿ uZ¿ uå¿ uç¿ uÕ¿ u”¿ v¿ vF¿ vh¿ vî¿ v€¿ v˚¿ w!¿ w/¿ w5¿ wW¿ wv¿ wô¿ w√¿ w⁄¿ w˙¿ w˛¿ wˇ¿ x$¿ xH¿ x|¿ xù¿ x»¿ x˚¿ y(¿ yQ¿ yz¿ yü¿ yÃ¿ z¿ z?¿ zC¿ zD¿ zw¿ z¨¿ zœ¿ z˙¿ {¿ {¿ {2¿ {I¿ {M¿ {N¿ {t¿ {z¿ {Ω¿ {˛¿ |¿ |R¿ |°¿ |Ô¿ }8¿ }à¿ }ò¿ }◊¿ ~¿ ~f¿ ~®¿ ~”¿ ¿ ¿ ¿ >¿ U¿ u¿ y¿ z¿ À¿ ◊¿ ›¿ Ä2¿ ÄÄ¿ Ä–¿ Ä¯¿ Ä˛¿ ÅJ¿ ÅZ¿ Åá¿ Å•¿ ÅÕ¿ Å€¿ Å·¿ Ç¿ Ç¿ Ç¿ Ç¿ Çf¿ Çà¿ Ç¡¿ ÇÁ¿ É¿ É!¿ É'¿ ÉL¿ Éc¿ Ég¿ Éh¿ Éô¿ Éœ¿ ÉÒ¿ Ñ¿ Ñ¿ Ñ¿ Ñf¿ Ñã¿ Ñë¿ Ñ÷¿ Ñ‹¿ Ö¿ Ö¿ Ö/¿ Ö5¿ ÖÑ¿ Öò¿ Ö„¿ Ü¿ Ü@¿ ÜD¿ ÜE¿ Ü`¿ Üa¿ ÜÑ¿ Üπ¿ Ü‹¿ á
¿ á*¿ á8¿ á>¿ áR¿ áÖ¿ áã¿ á©¿ á∆¿ áË¿ áÓ¿ à¿ à¿ à4¿ àd¿ àj¿ àn¿ ào¿ àä¿ àº¿ à¿¿ à¡¿ àÚ¿ â¿ â.¿ âK¿ âi¿ âw¿ â}¿ âî¿ â¥¿ â∏¿ âπ¿ ä¿ ä2¿ äM¿ äk¿ ää¿ äò¿ äû¿ ä∂¿ äÕ¿ ä—¿ ä“¿ ã¿ ã&¿ ã@¿ ã]¿ ã{¿ ãâ¿ ãè¿ ã¶¿ ã∆¿ ã ¿ ãÀ¿ å¿ å ¿ åj¿ åÜ¿ åå¿ åÕ¿ å”¿ ç!¿ çq¿ çÆ¿ ç–¿ ç‚¿ ç„¿ é6¿ éS¿ é{¿ éò¿ é¶¿ é¨¿ é√¿ éƒ¿ è¿ èd¿ èé¿ è¡¿ èÿ¿ è‹¿ è›¿ ê¿ ê4¿ êF¿ êG¿ êö¿ ê∑¿ êﬂ¿ ê¸¿ ë
¿ ë¿ ë'¿ ë>¿ ëB¿ ëC¿ ëw¿ ëó¿ ë®¿ ëƒ¿ ë‡¿ ëÓ¿ ëÙ¿ í
¿ í!¿ í%¿ í&¿ íZ¿ íõ¿ í¿¿ íÓ¿ íÚ¿ íÛ¿ ì9¿ ìU¿ ì[¿ ìì¿ ìô¿ ìÍ¿ î	¿ î¿ î7¿ î§¿ îﬁ¿ î‚¿ ï ¿ ï/¿ ïN¿ ïª¿ ïı¿ ï˘¿ ñ¿ ñJ¿ ñN¿ ñO¿ ñÜ¿ ñæ¿ ñ„¿ ó¿ ó¿ ó#¿ óH¿ ó_¿ óc¿ ód¿ óó¿ óù¿ óﬂ¿ óÂ¿ ò)¿ òT¿ òÇ¿ òü¿ ò«¿ òÊ¿ òÙ¿ ò˙¿ ô¿ ôB¿ ôX¿ ôx¿ ô|¿ ô}¿ ô≥¿ ôπ¿ ö	¿ öU¿ öù¿ ö≈¿ öﬂ¿ õ¿ õ ¿ õ.¿ õ4¿ õH¿ õv¿ õ|¿ õë¿ õ•¿ õ–¿ õ÷¿ õÌ¿ õÒ¿ õÚ¿ ú¿ ú@¿ ú]¿ ú¿ ú†¿ úÆ¿ ú¥¿ úŒ¿ úÂ¿ úÈ¿ úÍ¿ ù¿ ù¿ ùp¿ ùv¿ ù—¿ û ¿ ûå¿ ûœ¿ ûË¿ ü¿ ü.¿ ü<¿ üB¿ ü]¿ üt¿ üx¿ üy¿ ü¡¿ †¿ †¿ †^¿ †Ü¿ †õ¿ †—¿ †Î¿ °¿ °:¿ °H¿ °N¿ °m¿ °≠¿ °⁄¿ °˝¿ ¢C¿ ¢u¿ ¢ì¿ ¢ó¿ ¢ò¿ ¢ÿ¿ £&¿ £,¿ £p¿ £π¿ §
¿ §R¿ §g¿ §†¿ §√¿ §Î¿ §Ô¿ §¿ •'¿ •-¿ •^¿ •ò¿ •º¿ •‰¿ •Ë¿ •È¿ ¶¿ ¶ ¿ ¶k¿ ¶¡¿ ß ¿ ß#¿ ßQ¿ ß{¿ ßâ¿ ßè¿ ß≤¿ ß»¿ ßÃ¿ ßÕ¿ ß¸¿ ®¿ ®M¿ ®°¿ ®‹¿ ®˝¿ ©)¿ ©Q¿ ©_¿ ©e¿ ©Ü¿ ©ú¿ ©†¿ ©°¿ ©Ï¿ ™¿ ™¿ ™`¿ ™f¿ ™v¿ ™|¿ ™À¿ ™ﬂ¿ ´¿ ´¿ ´O¿ ´Å¿ ´£¿ ´‘¿ ´’¿ ¨¿ ¨¿ ¨X¿ ¨õ¿ ¨√¿ ≠¿ ≠D¿ ≠y¿ ≠¿ ≠√¿ ≠˛¿ Æ4¿ ÆV¿ Æù¿ Æ¬¿ ÆÚ¿ Ø"¿ Ø0¿ Ø6¿ Ø_¿ Øv¿ Øñ¿ Øö¿ Øõ¿ Ø‚¿ ∞¿ ∞¿ ∞b¿ ∞•¿ ∞Õ¿ ±¿ ±N¿ ±É¿ ±â¿ ±Ÿ¿ ±˝¿ ≤¿ ≤V¿ ≤ü¿ ≤•¿ ≤È¿ ≥.¿ ≥u¿ ≥≥¿ ≥—¿ ¥¿ ¥¿ ¥¿ ¥A¿ ¥G¿ ¥ñ¿ ¥¿ µ@¿ µÉ¿ µ–¿ µ˘¿ ∂5¿ ∂9¿ ∂:¿ ∂ó¿ ∂”¿ ∂Ÿ¿ ∑(¿ ∑.¿ ∑ã¿ ∑‹¿ ∏¿ ∏K¿ ∏O¿ ∏P¿ ∏à¿ ∏é¿ ∏◊¿ π¿ π?¿ πq¿ πê¿ πë¿ π»¿ π…¿ πˇ¿ ∫¿ ∫(¿ ∫R¿ ∫x¿ ∫ô¿ ∫ª¿ ∫ÿ¿ ∫¿ ª¿ ª¿ ª¿ ª¿ ª^¿ ª}¿ ªµ¿ ª∂¿ º¿ ºQ¿ ºê¿ º∫¿ ºÚ¿ ºÛ¿ Ω>¿ ΩÖ¿ Ω≤¿ Ω∏¿ Ω˜¿ æ7¿ æZ¿ ær¿ æõ¿ æ©¿ æ€¿ ø¿ ø2¿ ø_¿ øç¿ ø¨¿ øπ¿ ø√¿ ø÷¿ ø⁄¿ ø€¿ øÁ¿ ¿.¿ ¿`¿ ¿£¿ ¿Ú¿ ¡@¿ ¡_¿ ¡ñ¿ ¡˜¿ ¬0¿ ¬X¿ ¬©¿ ¬œ¿ ¬‹¿ √ ¿ √%¿ √3¿ √9¿ √c¿ √|¿ √÷¿ √Â¿ ƒ¿ ƒ1¿ ƒw¿ ƒƒ¿ ≈¿ ≈T¿ ≈ï¿ ≈±¿ ≈”¿ ≈ı¿ ∆,¿ ∆_¿ ∆r¿ ∆É¿ ∆í¿ ∆û¿ ∆Ω¿ ∆ﬂ¿ ∆È¿ «G¿ «O¿ «U¿ «`¿ «í¿ «≥¿ «÷¿ «¸¿ »¿ »4¿ »R¿ »ü¿ »Ÿ¿ …	¿ …
¿ …2¿ …e¿ …k¿ …l¿ …ç¿ …∂¿ …º¿ …Ω¿ …˙¿  "¿  m¿  |¿  ≈¿ À¿ À!¿ Àk¿ Àz¿ À¡¿ Ã¿ Ã¿ Ã!¿ Ã%¿ Ã&¿ ÃK¿ ÃÅ¿ Ãﬁ¿ Õ¿ Õ¿ Õ¿ Õ¿ Õ¿ Õ:¿ ÕR¿ Õu¿ Õõ¿ Õ°¿ Õ„¿ Œ"¿ ŒV¿ Œl¿ ŒÜ¿ Œô¿ Œ∑¿ Œœ¿ ŒÚ¿ œS¿ œ†¿ œ¯¿ –-¿ –H¿ –x¿ –Å¿ –¢¿ –£¿ –√¿ —¿ —X¿ —á¿ —ú¿ —√¿ “¿ “^¿ “∞¿ “›¿ ”¿ ”¿ ”(¿ ”L¿ ”k¿ ”z¿ ”ª¿ ‘¿ ‘-¿ ‘A¿ ‘K¿ ‘u¿ ‘ß¿ ‘·¿ ’¿ ’J¿ ’T¿ ’ó¿ ’€¿ ’˘¿ ÷¿ ÷@¿ ÷v¿ ÷Æ¿ ÷π¿ ◊¿ ◊X¿ ◊}¿ ◊®¿ ◊“¿ ◊˝¿ ÿ)¿ ÿ4¿ ÿi¿ ÿé¿ ÿ¬¿ ÿÛ¿ Ÿ'¿ ŸY¿ Ÿå¿ Ÿù¿ Ÿ¿¿ ⁄	¿ ⁄^¿ ⁄Å¿ ⁄Æ¿ ⁄Ÿ¿ ⁄Á¿ €L¿ €s¿ €™¿ €∏¿ €Õ¿ €‡¿ €Û¿ ‹B¿ ‹L¿ ‹|¿ ‹œ¿ ›¿ ›'¿ ›R¿ ›à¿ ›ÿ¿ ›È¿ ﬁ¿ ﬁo¿ ﬁy¿ ﬁä¿ ﬁ∏¿ ﬁÿ¿ ﬂ	¿ ﬂ,¿ ﬂ4¿ ﬂ:¿ ﬂa¿ ﬂ∞¿ ﬂ¥¿ ﬂµ¿ ﬂÁ¿ ﬂ˜¿ ‡2¿ ‡i¿ ‡p¿ ‡t¿ ‡u¿ ‡º¿ ‡¸¿ ·B¿ ·C¿ ·y¿ ·∑¿ ·ª¿ ·º¿ ·ˇ¿ ‚¿ ‚r¿ ‚í¿ ‚†¿ ‚¶¿ ‚˙¿ „¿ „V¿ „|¿ „É¿ „á¿ „à¿ „Ã¿ „Î¿ ‰@¿ ‰`¿ ‰n¿ ‰t¿ ‰»¿ ‰€¿ Â$¿ ÂJ¿ ÂQ¿ ÂU¿ ÂV¿ Âî¿ Â≥¿ Ê¿ ÊE¿ Êa¿ Êo¿ Êu¿ Ê ¿ Ê›¿ Á(¿ ÁN¿ ÁU¿ ÁY¿ ÁZ¿ Áô¿ Á∏¿ Ë¿ ËX¿ Ëx¿ ËÜ¿ Ëå¿ ËÂ¿ Ë¯¿ ÈG¿ Èm¿ Èt¿ Èx¿ Èy¿ È°¿ È¥¿ Í¿ Í?¿ ÍT¿ Í\¿ ÍÅ¿ Íó¿ Íü¿ Íπ¿ Íø¿ Í√¿ Íƒ¿ Í¿ Î
¿ Îd¿ Îï¿ Î™¿ Î≤¿ Î◊¿ ÎÌ¿ Îı¿ Ï¿ Ï¿ Ï,¿ Ï0¿ Ï1¿ Ï{¿ Ïå¿ Ïë¿ Ï’¿ Ì'¿ Ìi¿ Ìì¿ Ì«¿ Ì¯¿ Ó/¿ ÓE¿ ÓM¿ ÓS¿ Ód¿ Óh¿ Ói¿ Óu¿ Óö¿ Ó≥¿ Óﬂ¿ Ô¿ Ô¿ Ô¿ ÔF¿ Ôm¿ Ôç¿ ÔÏ¿ ¿ ,¿ Z¿ ^¿ _¿ k¿ }¿ ë¿ ´¿ ◊¿ Ò¿ Ò¿ ÒC¿ Òj¿ Òn¿ Òo¿ Ò{¿ Òñ¿ ÒŸ¿ Ú¿ Ú?¿ Úd¿ Új¿ Úç¿ Ú≤¿ Ú∏¿ Ú’¿ ÚŸ¿ Ú⁄¿ ÚÊ¿ Û¿ Û]¿ Û†¿ Û√¿ Û„¿ ÛÈ¿ Ù¿ Ù,¿ Ù2¿ ÙT¿ ÙX¿ ÙY¿ ÙÉ¿ ÙÑ¿ Ù–¿ Ù—¿ ı¿ ı;¿ ım¿ ır¿ ıs¿ ıí¿ ıß¿ ıÀ¿ ı¿ ˆ¿ ˆ¿ ˆ¿ ˆ ¿ ˆQ¿ ˆf¿ ˆä¿ ˆ“¿ ˜¿ ˜!¿ ˜%¿ ˜&¿ ˜y¿ ˜»¿ ¯¿ ¯¿ ¯l¿ ¯r¿ ¯√¿ ˘¿ ˘`¿ ˘¨¿ ˘¯¿ ˘˛¿ ˙¿ ˙¿ ˙U¿ ˙é¿ ˙›¿ ˚ ¿ ˚¿ ˚.¿ ˚/¿ ˚R¿ ˚p¿ ˚ç¿ ˚æ¿ ˚◊¿ ¸¿ ¸=¿ ¸L¿ ¸e¿ ¸Ø¿ ˝¿ ˝l¿ ˝∞¿ ˝Ω¿ ˝ÿ¿ ˛;¿ ˛R¿ ˛k¿ ˛ ¿ ˛·¿ ˇ¿ ˇ>¿ ˇu¿ ˇ~¿ ˇÑ¿ ˇà¿ ˇâ¿ ˇÿ¿ 	¿ ¿ ^¿ l¿ r¿ √¿ Â¿¿H¿[¿a¿Ñ¿Ö¿À¿¿>¿h¿o¿p¿Å¿ê¿†¿Õ¿¿%¿D¿H¿I¿ë¿ó¿ß¿≠¿ı¿'¿s¿ò¿‘¿˜¿S¿W¿X¿¶¿∂¿º¿Ã¿“¿¿d¿©¿Ê¿,¿K¿Ö¿®¿Ÿ¿7¿~¿⁄¿€¿	¿	¿	!¿	T¿	[¿	õ¿	ú¿	˝¿
"¿
A¿
b¿
ô¿
⁄¿
˝¿¿A¿\¿x¿É¿¶¿…¿Í¿¿e¿∑¿¿6¿m¿©¿Ã¿Ê¿&¿A¿X¿c¿i¿j¿ô¿ﬁ¿‚¿„¿Ô¿"¿v¿ç¿ƒ¿¿.¿5¿z¿ñ¿“¿¿*¿.¿/¿;¿n¿¬¿Ÿ¿¿l¿£¿Â¿¿¿Y¿u¿µ¿ı¿¿,¿0¿1¿è¿≈¿¿¿*¿T¿à¿ß¿¡¿«¿⁄¿¿=¿X¿t¿è¿”¿Ó¿	¿¿'¿-¿W¿[¿\¿Ü¿Ø¿‰¿(¿d¿e¿Å¿•¿À¿"¿1¿â¿Ì¿ı¿(¿.¿/¿z¿…¿Ÿ¿Ú¿A¿è¿œ¿%¿|¿Ç¿¢¿∫¿¿¿˝¿Q¿i¿π¿ ¿€¿‚¿Ê¿Á¿Û¿E¿F¿R¿Ö¿≥¿œ¿ﬁ¿¿2¿;¿B¿f¿j¿k¿w¿π¿‹¿ ¿ #¿ $¿ 0¿ ]¿ ^¿ j¿ w¿ ≈¿!¿!Z¿!¶¿!˜¿"F¿"ä¿"¥¿"‘¿#+¿#`¿#Æ¿#º¿#–¿#Á¿$¿$4¿$I¿$W¿$ò¿$û¿$¢¿$£¿$≈¿$Û¿$Ù¿% ¿%@¿%l¿%ë¿%≤¿%≥¿%œ¿&¿&.¿&T¿&\¿&b¿&f¿&g¿&á¿&∞¿&±¿'¿'M¿'Z¿'o¿'º¿'Ω¿'Ò¿'˜¿(E¿(h¿(†¿(”¿)¿)¿)¿)b¿)´¿)ª¿)¡¿*¿*6¿*e¿*ò¿*ú¿*ù¿*Õ¿*È¿+¿+	¿+
¿+X¿+ù¿+≠¿+≥¿+˛¿,#¿,8¿,n¿,r¿,s¿,â¿,•¿,∂¿,∫¿,ª¿-	¿-Z¿-j¿-p¿-æ¿-Á¿.¿.:¿.>¿.?¿.ç¿.ﬁ¿.Ó¿.Ù¿/@¿/k¿/Ü¿/æ¿/¬¿/√¿/ﬂ¿/˚¿0¿0¿0¿0R¿0X¿0ö¿0Ë¿16¿1Ö¿1ã¿1—¿2¿2-¿2m¿2Æ¿2≤¿2≥¿2Û¿2˘¿3J¿3u¿3Ÿ¿3¸¿4E¿4o¿4v¿4õ¿4¸¿4˝¿5-¿5u¿5v¿5¨¿5 ¿5Ï¿6¿6¿6¿6C¿6G¿6H¿6É¿6≈¿6∆¿7¿7
¿7I¿7Ö¿7»¿7Ã¿7Õ¿8*¿80¿8ã¿8ë¿8€¿9¿9¿9P¿9l¿9Ü¿9ñ¿9¿¿9«¿9Í¿:3¿:]¿:d¿:¶¿: ¿:›¿:¯¿;K¿;l¿;π¿;˛¿;ˇ¿<¿<'¿<É¿<›¿=¿=¿=¿=¿=#¿=$¿=`¿=f¿=•¿=Â¿>¿>2¿>w¿>≤¿>π¿>¸¿?!¿?J¿?å¿?ô¿?˙¿@ ¿@(¿@,¿@-¿@t¿@ä¿@ü¿@ÿ¿A(¿AW¿AÄ¿A—¿A⁄¿A‡¿B/¿BF¿Bë¿Bó¿B⁄¿B˘¿C¿C<¿C}¿C¨¿C–¿C˚¿D¿D#¿D$¿Ds¿D¡¿D˙¿E¿EP¿E°¿E∂¿E’¿F&¿Fj¿Fë¿F≤¿Fÿ¿G¿G>¿GÖ¿Gì¿GÓ¿G˙¿HY¿H~¿Hò¿H¿¿I$¿I2¿Iì¿Iü¿Iƒ¿IÁ¿J
¿J/¿J@¿JH¿JN¿JO¿Jô¿Jù¿Jû¿JÍ¿JÔ¿K>¿Ké¿K’¿L¿L¿LG¿Lb¿Lâ¿Lê¿L›¿M)¿M6¿Mo¿M©¿M∞¿M¥¿Mµ¿N¿N¿N¿Nk¿N¥¿N˛¿ON¿O^¿Oc¿O¥¿O˛¿PL¿PÄ¿P∫¿Pø¿Q¿Q[¿Q§¿Qø¿QÊ¿R)¿RO¿Ru¿R|¿RΩ¿R¡¿R¬¿Rﬂ¿R‡¿S-¿S2¿S|¿S«¿SŸ¿S˚¿T ¿T?¿T`¿T≤¿T’¿T¯¿U¿U<¿Ue¿Ut¿Uì¿U™¿Uﬁ¿UÈ¿UÔ¿UÛ¿UÙ¿VB¿Va¿Vñ¿V”¿W¿W ¿W?¿Wó¿W¶¿W≈¿X¿X,¿X3¿X7¿X8¿XD¿XQ¿Xë¿X‘¿X˙¿Y ¿Y'¿Y;¿Y]¿Y{¿Yõ¿Y«¿YÛ¿Y˛¿Z¿Z>¿ZW¿Zi¿Zå¿Z·¿[>¿[B¿[C¿[O¿[™¿[Ì¿\¿\9¿\@¿\T¿\v¿\î¿\¥¿\‡¿]¿]¿]¿]W¿]ù¿]°¿]¢¿]Æ¿]«¿^ ¿^3¿^O¿^t¿^ô¿^†¿^„¿_	¿_/¿_6¿_G¿_Ä¿_∏¿_˙¿`¿`¿`2¿`D¿`g¿`¥¿`Ì¿a$¿ax¿aò¿a¡¿aﬁ¿b¿b<¿bE¿bL¿bM¿bì¿bÓ¿bÔ¿c@¿cA¿cz¿c≥¿c¥¿cÌ¿d!¿d[¿d_¿d`¿d∞¿e¿eF¿en¿eâ¿e´¿eŒ¿eÚ¿f¿f9¿fg¿fh¿fº¿g¿gx¿g°¿g•¿g¶¿g˘¿gˇ¿h¿h¿hd¿hx¿h€¿i¿i?¿i^¿iì¿i±¿i€¿j¿j7¿jã¿jÁ¿jË¿k¿k;¿kA¿kB¿ka¿kÆ¿k¥¿kµ¿kÿ¿l¿l¿l¿lm¿l¥¿lÍ¿mG¿mi¿mß¿n¿n(¿n.¿nc¿nø¿n‡¿o¿o~¿o¢¿o®¿o©¿oÓ¿p3¿pu¿pó¿p¨¿p≥¿p¥¿pı¿q¿q_¿qÅ¿qá¿q«¿qÁ¿r1¿rT¿rZ¿r[¿rÇ¿rÉ¿rû¿r¢¿r£¿rÔ¿s¿s¿s"¿s(¿sw¿sã¿s•¿s»¿s‚¿t¿t#¿t*¿tZ¿t¿tù¿tæ¿t‚¿u¿u&¿uJ¿uP¿ué¿u«¿u‰¿v¿vc¿vã¿v¨¿w¿w:¿wr¿wö¿wª¿w»¿w˜¿w˝¿xN¿xR¿xS¿x∂¿x˚¿y/¿yÉ¿yª¿yÈ¿z¿z1¿zd¿zo¿zw¿z}¿z“¿zÙ¿{¿{}¿{Ñ¿{à¿{â¿{⁄¿|¿|¿|f¿|¿|Ö¿|Œ¿|‘¿}%¿}i¿}o¿}ª¿~¿~G¿~õ¿~Á¿=¿d¿p¿¿î¿´¿ƒ¿À¿œ¿–¿Ä¿ÄJ¿ÄK¿Ä~¿Ä∏¿Äæ¿Äø¿Äˇ¿Å?¿Å@¿Åà¿Å“¿Åı¿Ç(¿Ç.¿Ç/¿Çh¿Çõ¿Çú¿Çø¿ÇÚ¿Ç¯¿Ç¸¿Ç˝¿ÉP¿ÉQ¿Él¿Éâ¿É±¿Éƒ¿É ¿Éˆ¿Ñ¿ÑB¿Ñv¿Ñ}¿Ñ™¿ÑÃ¿ÑÔ¿Ñˆ¿ÖC¿Öd¿Öê¿Ö©¿Ö‹¿Ü¿Ü¿Ü2¿Ü|¿Üë¿Ü¶¿ÜØ¿Üÿ¿ÜÒ¿á=¿áR¿ág¿áp¿áv¿áz¿á{¿áá¿á»¿à¿à&¿à,¿à^¿àb¿àc¿ào¿à¶¿à…¿â¿â7¿âQ¿âa¿â}¿âï¿âπ¿â·¿âÍ¿â˜¿ä¿äA¿äG¿ä|¿äÆ¿ä˛¿ã¿ã¿ã	¿ã[¿ã\¿ãh¿ã£¿ãø¿ã’¿ãÍ¿å¿å¿åG¿åÜ¿åå¿åê¿åë¿åù¿å‚¿ç¿çL¿ç§¿ç€¿é¿éj¿éØ¿é√¿è(¿è/¿èÜ¿è÷¿ê!¿ê%¿ê&¿ê2¿êd¿êÇ¿êö¿êÒ¿ê¯¿ê¸¿ê˛¿êˇ¿ë4¿ëí¿ëì¿ëü¿ë‡¿ë·¿ëÌ¿í¿í¿í ¿íB¿íC¿íu¿íò¿í…¿íË¿íˆ¿í¸¿í˝¿ì4¿ìM¿ìN¿ìÖ¿ìù¿ì£¿ì§¿ì∏¿ìÍ¿î¿î¿î!¿î"¿î.¿îe¿îï¿î±¿îÍ¿ï¿ïC¿ïv¿ï|¿ïÄ¿ïÅ¿ïç¿ï≤¿ïÀ¿ïˆ¿ï˙¿ï˚¿ñ¿ñ¿ñG¿ñ[¿ñ_¿ñ`¿ñl¿ñy¿ñœ¿ñ—¿ñ“¿ó¿ó:¿ó>¿óç¿óﬁ¿ò-¿ò~¿òœ¿òˆ¿ò˙¿ô<¿ôâ¿ô…¿ö¿ö=¿öA¿öO¿öS¿ö§¿öÍ¿õ1¿õw¿õ ¿ú¿úV¿ú¿úÖ¿úÕ¿ù¿ùk¿ù´¿ù±¿ù˝¿ûB¿ûí¿ûü¿ûŸ¿û⁄¿ü¿ü¿üf¿ü¥¿üˇ¿†¿†V¿†•¿†›¿°$¿°&¿°'¿°c¿°±¿°›¿¢¿¢¿¢.¿¢/¿¢_¿¢y¿¢°¿¢»¿¢÷¿¢‹¿¢¸¿£¿£¿£¿£P¿£p¿£û¿£«¿£’¿£€¿£˝¿§¿§¿§¿§c¿§i¿§®¿§Ô¿•4¿•j¿•î¿•¢¿•®¿•À¿•‚¿•Ê¿•Á¿¶1¿¶7¿¶u¿¶π¿¶˚¿ß/¿ßX¿ßf¿ßl¿ßé¿ß•¿ß©¿ß™¿ß∂¿ß˛¿®-¿®V¿®ï¿®£¿®©¿®™¿®Ã¿©¿©O¿©ñ¿©¬¿©Ï¿©Û¿©Ù¿™¿™2¿™>¿™T¿™Ñ¿™ÿ¿™¿™˘¿™ˇ¿´¿´¿´¿´K¿´s¿´á¿´ç¿´¨¿´Ì¿´Û¿¨'¿¨_¿¨õ¿¨ﬂ¿≠¿≠#¿≠%¿≠&¿≠Z¿≠m¿≠n¿≠ñ¿≠≤¿≠“¿≠Ú¿Æ ¿Æ¿Æ ¿Æ7¿Æ;¿Æ<¿Æ{¿Æì¿Æò¿Æ„¿Ø ¿Ø!¿Ø"¿ØF¿Øx¿Øy¿Ø°¿Ø∑¿Øÿ¿∞¿∞¿∞¿∞¿∞3¿∞J¿∞N¿∞O¿∞|¿∞ï¿∞π¿∞€¿∞È¿∞Ô¿±
¿±!¿±%¿±&¿±R¿±x¿±õ¿±Ω¿±À¿±—¿±Ï¿≤¿≤¿≤¿≤F¿≤g¿≤ì¿≤À¿≤Ÿ¿≤ﬂ¿≤‡¿≥¿≥ ¿≥9¿≥?¿≥C¿≥D¿≥{¿≥ò¿≥¿¿≥Ë¿≥ˆ¿≥¸¿¥¿¥4¿¥8¿¥9¿¥T¿¥g¿¥ä¿¥†¿¥ø¿¥≈¿µ¿µ-¿µU¿µ|¿µÃ¿∂$¿∂6¿∂@¿∂H¿∂s¿∂ò¿∂¥¿∂Á¿∂ˆ¿∑F¿∑x¿∑Ä¿∑Ü¿∑ä¿∑ã¿∑ó¿∑ﬂ¿∏#¿∏$¿∏c¿∏d¿∏±¿∏ø¿∏≈¿∏∆¿π¿π¿π#¿πF¿πd¿πÉ¿πß¿πª¿πÊ¿∫J¿∫K¿∫i¿∫∫¿∫¿¿∫¡¿ª¿ª$¿ªy¿ªá¿ªç¿ªé¿ª§¿ªÔ¿º'¿º.¿º2¿º3¿º?¿ºz¿º¢¿º∂¿ºº¿ºΩ¿º‹¿ºˆ¿º¸¿Ω(¿ΩZ¿Ωñ¿Ω∆¿Ω˙¿æ.¿æt¿æ≤¿æ∂¿æ∏¿æπ¿æˇ¿ø<¿ø=¿øk¿øl¿øx¿ø§¿ø‡¿¿¿¿¿¿¿¿¿¿¿¿K¿¿á¿¿Ø¿¿µ¿¿π¿¿∫¿¿∆¿¡¿¡J¿¡}¿¡É¿¡á¿¡à¿¡î¿¡œ¿¡˜¿¬¿¬¿¬L¿¬Ü¿¬ô¿¬ü¿¬†¿¬˜¿√B¿√Å¿√≈¿√⁄¿√‚¿√Ë¿√È¿√˚¿√ˇ¿ƒ   0/// @docImport 'package:flutter/cupertino.dart';Ä‡   Ä˙ÅÅ ÅÅ+Å*Å-ÅyÅ|   Å©   Å”   Å˚   Ç$   ÇM   Ç`   Ç|   Çë   ÇÆ   Çƒ   Ç›     ÜáÑ[áIáIÄ∞/// Represents the coordinates of the point in a selection, and the text
/// direction at that point, relative to top left of the [RenderEditable] that
/// holds the selection. á`qá¢ á¢á¥ 9/// Creates a description of a point in a text selection.áµ
áªá∫  á¡á«á∆   á’ÄùàmàmÄÜ/// Coordinates of the lower left or lower right corner of the selection,
/// relative to the top left of the [RenderEditable] object. àwYà«à«8/// Direction of the text at this edge of the selection. ä¢>ä∂ä∂   ä¢ä£à’ÅàÔàÔ  àÚà˙à˘  à’à÷âÍÄ¥â˝â˝   âÍâÎá8á9ä‰òCïäïääü/// The consecutive sequence of [TextPosition]s that the caret should move to
/// when the user navigates the paragraph using the upward arrow key or the
/// downward arrow key.
///
/// {@template flutter.rendering.RenderEditable.verticalArrowKeyMovement}
/// When the user presses the upward arrow key or the downward arrow key, on
/// many platforms (macOS for instance), the caret will move to the previous
/// line or the next line, while maintaining its original horizontal location.
/// When it encounters a shorter line, the caret moves to the closest horizontal
/// location within that line, and restores the original horizontal location
/// when a long enough line is encountered.
///
/// Additionally, the caret will move to the beginning of the document if the
/// upward arrow key is pressed and the caret is already on the first line. If
/// the downward arrow key is pressed next, the caret will restore its original
/// horizontal location and move to the second line. Similarly the caret moves
/// to the end of the document if the downward arrow key is pressed when it's
/// already on the last line.
///
/// Consider a left-aligned paragraph:
///   aa|
///   a
///   aaa
/// where the caret was initially placed at the end of the first line. Pressing
/// the downward arrow key once will move the caret to the end of the second
/// line, and twice the arrow key moves to the third line after the second "a"
/// on that line. Pressing the downward arrow key again, the caret will move to
/// the end of the third line (the end of the document). Pressing the upward
/// arrow key in this state will result in the caret moving to the end of the
/// second line.
///
/// Vertical caret runs are typically interrupted when the layout of the text
/// changes (including when the text itself changes), or when the selection is
/// changed by other input events or programmatically (for example, when the
/// user pressed the left arrow key).
/// {@endtemplate}
///
/// The [movePrevious] method moves the caret location (which is
/// [VerticalCaretMovementRun.current]) to the previous line, and in case
/// the caret is already on the first line, the method does nothing and returns
/// false. Similarly the [moveNext] method moves the caret to the next line, and
/// returns false if the caret is already on the last line.
///
/// The [moveByOffset] method takes a pixel offset from the current position to move
/// the caret up or down.
///
/// If the underlying paragraph's layout changes, [isValid] becomes false and
/// the [VerticalCaretMovementRun] must not be used. The [isValid] property must
/// be checked before calling [movePrevious], [moveNext] and [moveByOffset],
/// or accessing [current]. ï…Äöï…ï·ï‚ï„ï‚ ïÈïÔïÓ  ï˝ññ  ñññ  ñ3ñ9ñ8  ñJñPñO   ñgñnñn  ñÄñÑñÑ  ñî!ñ°ñ°  ñ∫'ñ’ñ’  ñÂñ˙ñ˙  óóó óô¯mö'ö' 
öcödö>öbö?öDöLöaöMöUó!Ç”òhòhÅ//// Whether this [VerticalCaretMovementRun] can still continue.
///
/// A [VerticalCaretMovementRun] run is valid if the underlying text layout
/// hasn't changed.
///
/// The [current] value and the [movePrevious], [moveNext] and [moveByOffset]
/// methods must not be accessed when [isValid] is false.   ù0`ùMùM   ù0ù1öjÇ¬öâöâ  ö°ö¶ö•   ùîÅXù•ù•   ùîùïûÅ°ü\ü\`/// Move back to the previous element.
///
/// Returns true and updates [current] if successful.   †ïÇê°°Äÿ/// Move forward or backward by a number of elements determined
/// by pixel [offset].
///
/// If [offset] is negative, move backward; otherwise move forward.
///
/// Returns true and updates [current] if successful. °å°î°ì    £)¿m‘¶˚¶˚ÉÀ/// Displays some text in a scrollable container with a potentially blinking
/// cursor and with gesture recognizers.
///
/// This is the renderer for an editable text field. It does not directly
/// provide affordances for editing the text, but it does handle text selection
/// and manipulation of the text cursor.
///
/// The [text] is displayed, scrolled by the given [offset], aligned according
/// to [textAlign]. The [maxLines] property controls whether the text displays
/// on one line or many. The [selection], if it is not collapsed, is painted in
/// the [selectionColor]. If it _is_ collapsed, then it represents the cursor
/// position. The cursor is shown while [showCursor] is true. It is painted in
/// the [cursorColor].
///
/// Keyboard handling, IME handling, scrolling, toggling the [showCursor] value
/// to actually blink the cursor, and other features not mentioned above are the
/// responsibility of higher layers and not handled by this object. ß„ì˝™ ™™! Ç/// Creates a render object that implements the visual aspects of a text field.
///
/// The [textAlign] argument defaults to [TextAlign.start].
///
/// If [showCursor] is not specified, then it defaults to hiding the cursor.
///
/// The [maxLines] property can be set to null to remove the restriction on
/// the number of lines. By default, it is 1, meaning this is a single-line
/// text field. If it is not null, it must be greater than zero.
///
/// Use [ViewportOffset.zero] for the [offset] if there is no need for
/// scrolling.+™(™5™4  ™>$™V™U  ™h%™s™r  ™ì™õ™ö  ™´™≥™≤  ™Õ™„™‚  ™Ú™˘™¯  ´'´´  ´3%´G´F  ´^´d´c  ´u´{´z  ´à´é´ç  ´¢´Ø´Æ  ´æ´∆´≈  ´ŸÄˇ¨ƒ¨√  ¨ﬁ,¨Í¨È  ≠≠ ≠  ≠.≠G≠F  ≠R≠X≠W  ≠r≠x≠w  ≠ç≠ì≠í  ≠®&≠Ω≠º  ≠‘5≠‰≠„  ÆÆÆ  Æ4Æ:Æ9  ÆRÆ[ÆZ  ÆfÆnÆm  ÆÑÆçÆå  ÆûÆßÆ¶  Æ∏!ÆæÆΩ  Æﬂ!ÆÁÆÊ  ØØØ  Ø)@Ø<Ø;  Øo=ØÅØÄ  Ø≤ ØπØ∏  ØÿFØﬁØ›  ∞$∞0∞/  ∞D∞L∞K  ∞`!∞f∞e  ∞á#∞ñ∞ï  ∞∞∞»∞«  ∞‘(∞Ï∞Î  ±±±  Å™~™á™à´n´ó´Ÿ´⁄´‰¨∂´Ï¨¨|¨’¨ˆ≠ ≠≠g≠Ç≠û≠ÙÆÆÆ+ÆGÆ{Æ‘ÆıÆ˚Æ¸Ø ØRØTØUØcØdØñØòØôØ¶ØßØ˘Øˇ∞	∞
∞∞∞∞∞∞∞t∞x∞y±$±*±K±<±4±+±7±H±?±J±U±[±|±m±e±\±h±y±p±{±Ü±å±Ÿ≤±¿±™±ó±®±°±ò±§±≠±æ±∑±Æ±∫±√±ÿ±Õ±ƒ±–±‰≤ ≤&≤c≤±≤:≤1≤2≤=≤b≤O≤G≤>≤J≤[≤R≤^≤n≤ª≤¡≥≥z≤¯≤Ã≤’≤ˆ≤÷≤‚≤Ï≤Ì≥≤˚≥≥≥Ñ≥ä≥¥≥∞≥ã≥ù≥û≥®≥©≥≥≥æ≥ƒ≥◊≥—≥≈≥‘≥·≥Á¥≥˝≥ı≥Ë≥¯¥¥ ¥¥*¥¥,¥7µ‘¥F¥B¥H¥`¥W¥b¥É¥v¥Ö¥ß¥ù¥Ÿ¥˛¥¡¥∂¥ƒ¥Œ¥œ¥€¥Â¥Ê¥Ï¥¸¥Ìµ µµµµ6µ.µFµJµAµ8µDµHµLµeµ[µgµéµ|µêµªµ≠µΩµÍµﬁµ˜µÏµ˙∂∂∂∂∂∂∂'∂∂)∂D∂:∂F∂`∂W∂b∂}∂r∂∂ô∂ë∂õ∂∑∂™∂π∂€∂Õ∂›∑∂Ú∑∑?∑#∑A∑v∑d∑x∑ß∑ë∑©∑⁄∑∆∑‹∏∑˜∏∏5∏(∏7∏U∏K∏W∏s∏h∏u∏ï∏á∏ó∏∂∏¨∏¡∏∏∏ƒ∏Â∏“∏Ú∏Á∏ı<ª‰Nºº/// Child render objects º63ºRºR  ¿ Cò)¿ CØ¿ CØ  ¿ Hç¿ H§¿ H§  ¿ Iù8¿ I∂¿ I∂ ¿ I∆¿ I”¿ I‘¿ I¯G¿ J¿ J ¿ J(¿ J=¿ J>¿ JCR¿ J_¿ J_ ¿ J~¿ Jì¿ Jî¿ K-A¿ KN¿ KN  ¿ L∏7¿ LŸ¿ LŸ  ¿ NÇ	¿ P	¿ P	Å‡/// Whether the [handleEvent] will propagate pointer events to selection
/// handlers.
///
/// If this property is true, the [handleEvent] assumes that this renderer
/// will be notified of input gestures via [handleTapDown], [handleTap],
/// [handleDoubleTap], and [handleLongPress].
///
/// If there are any gesture recognizers in the text span, the [handleEvent]
/// will still propagate pointer events to those recognizers.
///
/// The default value of this property is false. ¿ SC¿ SJ¿ SJ  ¿ T£¿ T™¿ T™  ¿ U¯¿ U˝¿ U˝  ¿ YiÅ3¿ Zá¿ ZáÄ˝/// The object that controls the text selection, used by this render object
/// for implementing cut, copy, and paste keyboard shortcuts.
///
/// It will make cut, copy and paste functionality work with the most recently
/// set [TextSelectionDelegate]. ¿ ]O¿ ] ¿ ]  ¿ ]<¿ ]I¿ ]N¿ ]J¿ ]O¿ ]T¿ ]P¿ _ΩM¿ _◊¿ _◊ ¿ _Ò¿ _˛¿ `¿ _ˇ¿ `¿ `	¿ `¿ vH¿ vZ¿ vZ  ¿ vj(¿ v|¿ v|  ¿ vñC¿ vº¿ vº  ¿ x!¿ x¿ x  ¿ ÜG¿ ÜL¿ ÜL  ¿ Üª¿ Üœ¿ Üœ  ¿ â¿ â¿ â ¿ â'¿ ä4¿ ä9¿ ä9 ¿ äF¿ ã(¿ ã-¿ ã- ¿ ã9¿ ç“¿ ç◊¿ ç◊  ¿ ê6¿ ê;¿ ê;  ¿ ëô¿ ëû¿ ëû  ¿ òÑ¿ òì¿ òì  ¿ ö«¿ ö÷¿ ö÷  ¿ úB¿ úI¿ úI ¿ úX¿ û—¿ ûŸ¿ ûŸ  ¿ †”¿ †ÿ¿ †ÿ  ¿ ß¿ ß¿ ß  ¿ ®ﬁ¿ ®Ë¿ ®Ë  ¿ ©£Åb¿ ™Ï¿ ™ÏÅ+/// The padding applied to text field. Used to determine the bounds when
/// moving the floating cursor.
///
/// Defaults to a padding with left, top and right set to 4, bottom to 5.
///
/// See also:
///
///  * [FloatingCursorDragState], which explains the floating cursor feature
///    in detail. ¿ ´É¿ ´à¿ ´à ¿ ´ú¿ ´•-¿ ´∑¿ ´∑  ¿ Æü!¿ Æ•¿ Æ•  ¿ πs¿ πz¿ πz ¿ πç¿ ∫T"¿ ∫Y¿ ∫Y ¿ ∫i¿ ∫m¿ ∫n¿ ªÄî¿ ª•¿ ª•[/// Collected during [describeSemanticsConfiguration], used by
/// [assembleSemanticsNode]. ¿ ºº4¿ ºﬂ¿ ºﬂ  ¿¿¿  ¿$•¿$ø¿$ø  ¿$«*¿$Á¿$Á  ¿&i¿&q¿&q  ¿&â%¿&ë¿&ë  ¿K◊3¿KÙ¿KÙ  ¿Rƒ¿RŒ¿RŒ  ¿eH$¿eO¿eO ¿ea¿eg¿eh¿ep¿ex¿ex  ¿eã¿eê¿eê ¿e•¿e≠¿e≤¿e≤ ¿e«¿e– ¿e’¿e’ ¿eÎ¿eÙ¿e˘¿e˘ ¿f¿f!¿f¿f ¿f2¿f;*¿fC¿fC  ¿ÇˇO¿É¿É ¿É4¿É?¿ÉK¿É@¿ÉL¿ÉM¿ãN¿ã,¿ã, ¿ã=¿ãH¿ãV¿ãI¿ãW¿ãX^¿ B'Ån¿ Cm¿ CmÅ/// The [RenderEditablePainter] to use for painting above this
/// [RenderEditable]'s text content.
///
/// The new [RenderEditablePainter] will replace the previously specified
/// foreground painter, and schedule a repaint if the new painter's
/// `shouldRepaint` method returns true.   ¿ C≈Ä®¿ C…¿ C…  ¿ C€!¿ CÛ¿ CÚ   ¿ G4ÅV¿ Hv¿ HvÅ/// Sets the [RenderEditablePainter] to use for painting beneath this
/// [RenderEditable]'s text content.
///
/// The new [RenderEditablePainter] will replace the previously specified
/// painter, and schedule a repaint if the new painter's `shouldRepaint`
/// method returns true.   ¿ H∞Ää¿ H¥¿ H¥  ¿ Hº!¿ H‘¿ H”   ¿ JöÄê¿ Jæ¿ Jæ    ¿ LCr¿ Lg¿ Lg    ¿ Px¿ P]¿ P]'/// {@macro dart.ui.textHeightBehavior}   ¿ PñÄ√¿ Pö¿ Pö  ¿ P≠¿ P¬¿ P¡   ¿ Q]|¿ Q´¿ Q´8/// {@macro flutter.painting.textPainter.textWidthBasis}   ¿ Q‹Ä≤¿ Q‡¿ Q‡  ¿ QÔ¿ Qˇ¿ Q˛   ¿ RíÄÆ¿ S¿ Sv/// The pixel ratio of the current device.
///
/// Should be obtained by querying MediaQuery for the devicePixelRatio.   ¿ S_Äó¿ Sc¿ Sc  ¿ St¿ S|¿ S{   ¿ S˙Ä¶¿ Tv¿ Tvj/// Character used for obscuring text if [obscureText] is true.
///
/// Must have a length of exactly one.   ¿ T¡Ä»¿ T≈¿ T≈  ¿ Tÿ¿ T‡¿ Tﬂ   ¿ Uçh¿ UŸ¿ UŸ@/// Whether to hide the text being edited (e.g., for passwords).   ¿ VÄ≥¿ V¿ V  ¿ V
¿ V#¿ V"   ¿ VƒÄ‰¿ Wi¿ WiÄà/// Controls how tall the selection highlight boxes are computed to be.
///
/// See [ui.BoxHeightStyle] for details on available styles.   ¿ W´k¿ WØ¿ WØ  ¿ Wƒ¿ W◊¿ W÷   ¿ XÄ‡¿ XΩ¿ XΩÄá/// Controls how wide the selection highlight boxes are computed to be.
///
/// See [ui.BoxWidthStyle] for details on available styles.   ¿ X˝h¿ Y¿ Y  ¿ Y¿ Y'¿ Y&   ¿ Z°Çb¿ \Õ¿ \ÕÅ˝/// Track whether position of the start of the selected text is within the viewport.
///
/// For example, if the text contains "Hello World", and the user selects
/// "Hello", then scrolls so only "World" is visible, this will become false.
/// If the user scrolls back so that the "H" is visible again, this will
/// become true.
///
/// This bool indicates whether the text is scrolled so that the handle is
/// inside the text field viewport, as opposed to whether it is actually
/// visible on the screen.   ¿ ]ZÇ`¿ _à¿ _àÅˇ/// Track whether position of the end of the selected text is within the viewport.
///
/// For example, if the text contains "Hello World", and the user selects
/// "World", then scrolls so only "Hello" is visible, this will become
/// 'false'. If the user scrolls back so that the "d" is visible again, this
/// will become 'true'.
///
/// This bool indicates whether the text is scrolled so that the handle is
/// inside the text field viewport, as opposed to whether it is actually
/// visible on the screen.   ¿ t]Å.¿ ug¿ ugÄÙ/// Returns a plain text version of the text in [TextPainter].
///
/// If [obscureText] is true, returns the obscured text. See
/// [obscureText] and [obscuringCharacter].
/// In order to get the styled text as an [InlineSpan] tree, use [text].   ¿ uèÄ∂¿ v+¿ v+ÄÖ/// The text to paint in the form of a tree of [InlineSpan]s.
///
/// In order to get the plain text representation, use [plainText].   ¿ v›Å ¿ v·¿ v·  ¿ vÊ¿ vÛ¿ vÚ   ¿ x&Ç¿ x6¿ x6    ¿ zFe¿ zá¿ zá0/// How the text should be aligned horizontally.   ¿ zÆÄû¿ z≤¿ z≤  ¿ zº¿ z«¿ z∆   ¿ {PÉW¿ ~z¿ ~zÇ3/// The directionality of the text.
///
/// This decides how the [TextAlign.start], [TextAlign.end], and
/// [TextAlign.justify] values of [textAlign] are interpreted.
///
/// This is also used to disambiguate how to render bidirectional text. For
/// example, if the [text] is an English phrase followed by a Hebrew phrase,
/// in a [TextDirection.ltr] context the English phrase will be on the left
/// and the Hebrew phrase to its right, while in a [TextDirection.rtl]
/// context, the English phrase will be on the right and the Hebrew phrase on
/// its left.   ¿ ~™ÄŒ¿ ~Æ¿ ~Æ  ¿ ~º¿ ~À¿ ~    ¿ |Ç
¿ Åh¿ ÅhÅÕ/// Used by this renderer's internal [TextPainter] to select a locale-specific
/// font.
///
/// In some cases the same Unicode character may be rendered differently depending
/// on the locale. For example the 'È™®' character is rendered differently in
/// the Chinese and Japanese locales. In these cases the [locale] may be used
/// to select a locale-specific font.
///
/// If this value is null, a system-dependent algorithm is used to select
/// the font.   ¿ ÅâÄì¿ Åç¿ Åç  ¿ Åî¿ Åù¿ Åú   ¿ Ç Ä†¿ Çö¿ Çöe/// The [StrutStyle] used by the renderer's internal [TextPainter] to
/// determine the strut to use.   ¿ Ç√Ä£¿ Ç«¿ Ç«  ¿ Ç“¿ Çﬂ¿ Çﬁ   ¿ Éjd¿ É¶¿ É¶./// The color to use when painting the cursor.   ¿ É—I¿ É’¿ É’  ¿ É·¿ ÉÈ¿ ÉË   ¿ ÑÅƒ¿ Ö•¿ Ö•Åe/// The color to use when painting the cursor aligned to the text while
/// rendering the floating cursor.
///
/// Typically this would be set to [CupertinoColors.inactiveGray].
///
/// If this is null, the background cursor is not painted.
///
/// See also:
///
///  * [FloatingCursorDragState], which explains the floating cursor feature
///    in detail.   ¿ ÖÂ^¿ ÖÈ¿ ÖÈ  ¿ Öˇ¿ Ü¿ Ü   ¿ ÜcU¿ Üû¿ Üû /// Whether to paint the cursor.   ¿ ÜﬁÅè¿ Ü‚¿ Ü‚  ¿ ÜÌ¿ á¿ á   ¿ à√P¿ à˝¿ à˝./// Whether the editable is currently focused.   ¿ â0Äá¿ â4¿ â4  ¿ â=
¿ âC¿ âB   ¿ âªv¿ ä¿ äR/// Whether this rendering object will take a full line regardless the text width.   ¿ äOÄÅ¿ äS¿ äS  ¿ ä]
¿ äc¿ äb   ¿ ä‘Q¿ ã¿ ã//// Whether this rendering object is read only.   ¿ ãBÄá¿ ãF¿ ãF  ¿ ãO
¿ ãU¿ ãT   ¿ ãÕÇ¿ çπ¿ çπÅŒ/// The maximum number of lines for the text to span, wrapping if necessary.
///
/// If this is 1 (the default), the text will not wrap, but will extend
/// indefinitely instead.
///
/// If this is null, there is no limit to the number of lines.
///
/// When this is not null, the intrinsic height of the render object is the
/// height of one line of text multiplied by this value. In other words, this
/// also controls the height of the actual editing widget.   ¿ çÂÅˆ¿ é<¿ é<P/// The value may be null. If it is not null, then it must be greater than zero. ¿ éE
¿ éK¿ éJ   ¿ èﬂT¿ ê¿ ê2/// {@macro flutter.widgets.editableText.minLines}   ¿ êIÄ¯¿ ê†¿ ê†P/// The value may be null. If it is not null, then it must be greater than zero. ¿ ê©
¿ êØ¿ êÆ   ¿ ëEQ¿ ëÇ¿ ëÇ1/// {@macro flutter.widgets.editableText.expands}   ¿ ë™z¿ ëÆ¿ ëÆ  ¿ ë∂
¿ ëº¿ ëª   ¿ í(r¿ íg¿ íg1/// The color to use when painting the selection.   ¿ íùT¿ í°¿ í°  ¿ í∞¿ í∏¿ í∑   ¿ íıÇ*¿ îÔ¿ îÔÅ/// Deprecated. Will be removed in a future version of Flutter. Use
/// [textScaler] instead.
///
/// The number of font pixels for each logical pixel.
///
/// For example, if the text scale factor is 1.5, text will be 50% larger than
/// the specified font size.  ¿ î¿ î¿ î¿ î‡¿ î¿ î;¿ î®¿ ï"Å+¿ ïˇ¿ ïˇ  ¿ ñ¿ ñ¿ ñ  ¿ ï"¿ ï#¿ ï-¿ ï˜¿ ï3¿ ïR¿ ïø¿ ñQl¿ ñó¿ ñó4/// {@macro flutter.painting.textPainter.textScaler}   ¿ ñ¿Ä¢¿ ñƒ¿ ñƒ  ¿ ñœ¿ ñ€¿ ñ⁄   ¿ ófÅ¿ òi¿ òiÄ„/// The region of text that is selected, if any.
///
/// The caret position is represented by a collapsed selection.
///
/// If [selection] is null, there is no selection and attempts to
/// manipulate the selection will throw.   ¿ ò°Ä⁄¿ ò•¿ ò•  ¿ òØ¿ òø¿ òæ   ¿ ôÅE¿ ö≤¿ ö≤Å/// The offset at which the text should be painted.
///
/// If the text content is larger than the editable line itself, the editable
/// line clips the text. This property controls which part of the text is
/// visible by shifting the text by the given offset before clipping.   ¿ ö·Å¿ öÂ¿ öÂ  ¿ öÏ¿ ö¸¿ ö˚   ¿ õÙK¿ ú#¿ ú#!/// How thick the cursor will be.   ¿ ú_Äâ¿ úc¿ úc  ¿ úo¿ úw¿ úv   ¿ úÏÅ‚¿ ûô¿ ûôÅ)/// How tall the cursor will be.
///
/// This can be null, in which case the getter will actually return [preferredLineHeight].
///
/// Setting this to itself fixes the value to the current [preferredLineHeight]. Setting
/// this to null returns the behavior of deferring to [preferredLineHeight].   ¿ ûÍÄç¿ ûÓ¿ ûÓ  ¿ û˚¿ ü¿ ü   ¿ ü{ÅU¿ †¶¿ †¶Å/// {@template flutter.rendering.RenderEditable.paintCursorAboveText}
/// If the cursor should be painted on top of the text or underneath it.
///
/// By default, the cursor should be painted on top for iOS platforms and
/// underneath for Android platforms.
/// {@endtemplate}   ¿ †ÌÅ©¿ †Ò¿ †Ò  ¿ °
¿ °¿ °   ¿ ¢öÇ¿ §t¿ §tÅæ/// {@template flutter.rendering.RenderEditable.cursorOffset}
/// The offset that is used, in pixels, when painting the cursor on screen.
///
/// By default, the cursor position should be set to an offset of
/// (-[cursorWidth] * 0.5, 0.0) on iOS platforms and (0, 0) on Android
/// platforms. The origin from where the offset is applied to is the arbitrary
/// location where the cursor ends up being rendered from by default.
/// {@endtemplate}   ¿ §¢L¿ §¶¿ §¶  ¿ §≥¿ §ª¿ §∫   ¿ §ÚÄ•¿ •l¿ •lg/// How rounded the corners of the cursor should be.
///
/// A null value is the same as [Radius.zero].   ¿ •öM¿ •û¿ •û  ¿ •´¿ •¥¿ •≥   ¿ •ÎÅ¿ ¶—¿ ¶—Äœ/// The [LayerLink] of start selection handle.
///
/// [RenderEditable] is responsible for calculating the [Offset] of this
/// [LayerLink], which will be used as [CompositedTransformTarget] of start handle.   ¿ ß%Ä¶¿ ß)¿ ß)  ¿ ß>¿ ßI¿ ßH   ¿ ßœÅ¿ ®±¿ ®±ÄÀ/// The [LayerLink] of end selection handle.
///
/// [RenderEditable] is responsible for calculating the [Offset] of this
/// [LayerLink], which will be used as [CompositedTransformTarget] of end handle.   ¿ ®ˇÄ†¿ ©¿ ©  ¿ ©¿ ©!¿ ©    ¿ ´
v¿ ´Z¿ ´ZD/// Returns true if the floating cursor is visible, false otherwise.   ¿ ´◊Ç≈¿ Æb¿ ÆbÇf/// Whether to allow the user to change the selection.
///
/// Since [RenderEditable] does not handle selection manipulation
/// itself, this actually only affects whether the accessibility
/// hints provided to the system (via
/// [describeSemanticsConfiguration]) will enable selection
/// manipulation. It's the responsibility of this object's owner
/// to provide selection manipulation affordances.
///
/// This field is used by [selectionEnabled] (which then controls
/// the accessibility hints mentioned above). When null,
/// [obscureText] is used to determine the value of
/// [selectionEnabled] instead.   ¿ ÆƒÄ’¿ Æ»¿ Æ»  ¿ Æ„¿ ÆÍ¿ ÆÈ   ¿ ØùÑn¿ ≥æ¿ ≥æÉÔ/// Whether interactive selection are enabled based on the values of
/// [enableInteractiveSelection] and [obscureText].
///
/// Since [RenderEditable] does not handle selection manipulation
/// itself, this actually only affects whether the accessibility
/// hints provided to the system (via
/// [describeSemanticsConfiguration]) will enable selection
/// manipulation. It's the responsibility of this object's owner
/// to provide selection manipulation affordances.
///
/// By default, [enableInteractiveSelection] is null, [obscureText] is false,
/// and this getter returns true.
///
/// If [enableInteractiveSelection] is null and [obscureText] is true, then this
/// getter returns false. This is the common case for password fields.
///
/// If [enableInteractiveSelection] is non-null then its value is
/// returned. An application might [enableInteractiveSelection] to
/// true to enable interactive selection for a password field, or to
/// false to unconditionally disable interactive selection.   ¿ ¥Å¿¿ µê¿ µêÄÇ/// The color used to paint the prompt rectangle.
///
/// The prompt rectangle will only be requested on non-web iOS applications.   ¿ µ“f¿ µ÷¿ µ÷  ¿ µÊ¿ µÓ¿ µÌ   ¿ ∏RÅ¿ πL¿ πLÄ‰/// The maximum amount the text is allowed to scroll.
///
/// This value is only valid after layout and can change as additional
/// text is entered or removed in order to accommodate expanding when
/// [expands] is set to true.   ¿ πì4¿ πû¿ πû    ¿ πÀÄÜ¿ ∫3¿ ∫3X/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.hardEdge].   ¿ ∫zÄ°¿ ∫~¿ ∫~  ¿ ∫ã
¿ ∫ë¿ ∫ê   ¿ Ù['¿ Ùd¿ Ùd    ¿ ÙÜI¿ Ùè¿ Ùè    ¿ Ù”Äû¿ Ùﬁ¿ Ùﬁ    ¿ ıuÄ©¿ ıÄ¿ ıÄ    ¿ ˜ S¿ ˜”¿ ˜”    ¿3Ä◊¿“¿“Äè/// An estimate of the height of a line in the text. See [TextPainter.preferredLineHeight].
/// This does not require the layout to be updated.   ¿&≥Å¿'}¿'}Äµ/// {@template flutter.rendering.RenderEditable.lastSecondaryTapDownPosition}
/// The position of the most recent secondary tap down event on this text
/// input.
/// {@endtemplate}   ¿6Jz¿6ñ¿6ñ8/// {@macro flutter.painting.TextPainter.wordBoundaries}   RºnÇ ºº   ºnºoø<ÇÁøAøA  øZ!ørøq   ¿ DqÇø¿ Dv¿ Dv  ¿ DÖ!¿ Dù¿ Dú   ¿ KrÄÕ¿ Kí¿ Kí    ¿ LÛÅ¿ M¿ M    ¿ `Åç¿ `\¿ `\=/// Returns the TextPosition above or below the given offset. ¿ `u¿ `É¿ `Ç  ¿ `å¿ `î¿ `ì   ¿ aøÅ ¿ b¿ b?/// {@macro flutter.services.TextLayoutMetrics.getLineAtOffset} ¿ b+¿ b9¿ b8  ¿ b¿ b¿ cçÄ±¿ cﬂ¿ cﬂ9/// {@macro flutter.painting.TextPainter.getWordBoundary} ¿ cÔ¿ c˝¿ c¸  ¿ c…¿ c ¿ dBÇ+¿ d¢¿ d¢D/// {@macro flutter.services.TextLayoutMetrics.getTextPositionAbove} ¿ d∑¿ d≈¿ dƒ  ¿ dâ¿ dä¿ fqÇ*¿ f—¿ f—D/// {@macro flutter.services.TextLayoutMetrics.getTextPositionBelow} ¿ fÊ¿ fÙ¿ fÛ  ¿ f∏¿ fπ¿ hºÖn¿ h¡¿ h¡  ¿ h„¿ hÎ¿ hÍ   ¿ n.Äû¿ n3¿ n3  ¿ nH¿ nZ¿ nY  ¿ nc¿ nz¿ ny   ¿ n–Ñ%¿ n’¿ n’  ¿ n„¿ nÚ¿ nÒ  ¿ o ¿ o¿ o   ¿ r˘ÄÈ¿ s
¿ s
   ¿ r˘¿ r˙¿ sÊs¿ s˜¿ s˜   ¿ sÊ¿ sÁ¿ àqN¿ àv¿ àv    ¿ ∂<Ç¿ ∑„¿ ∑„ÅD/// Dismisses the currently displayed prompt rectangle and displays a new prompt rectangle
/// over [newRange] in the given color [promptRectColor].
///
/// The prompt rectangle will only be requested on non-web iOS applications.
///
/// When set to null, the currently displayed prompt rectangle (if any) will be dismissed. ¿ ∑ˆ¿ ∏¿ ∏   ¿ ºıÇ‰¿ æ¿ æÄ˘/// Returns a list of rects that bound the given selection, and the text
/// direction. The text direction is used by the engine to calculate
/// the closest position to a given point.
///
/// See [TextPainter.getBoxesForSelection] for more details. ¿ æ¿ æ+¿ æ*   ¿ ø›åG¿ øÓ¿ øÓ  ¿ ¿¿ ¿%¿ ¿$  ¿ ø›¿ øﬁ¿ Ã(ÄÊ¿ Ã-¿ Ã-  ¿ Ã<¿ ÃD¿ ÃC   ¿ Õí°¿ Õ#¿ Õ#  ¿ Õ>¿ ÕM¿ ÕL  ¿ ÕV¿ Õn¿ Õm  ¿ Õy ¿ Õí¿ Õë  ¿ Õ¿ Õ¿ ﬂ∑Äº¿ ﬂ≈¿ ﬂ≈  ¿ ﬂ‹¿ ﬂ·¿ ﬂ‡   ¿ ·Eu¿ ·J¿ ·J  ¿ ·^¿ ·m¿ ·l   ¿ ·æÅ»¿ ·√¿ ·√  ¿ ·Á¿ ·Ì¿ ·Ï   ¿ „äÅ ¿ „è¿ „è  ¿ „¥¿ „∫¿ „π   ¿ ÂXÇ ¿ Â]¿ Â]  ¿ Â|¿ ÂÇ¿ ÂÅ   ¿ Á\Ç¿ Áa¿ Áa  ¿ ÁÅ¿ Áá¿ ÁÜ   ¿ È{ÅG¿ ÈÜ¿ ÈÜ  ¿ Èì
¿ Èò¿ Èó   ¿ Í∆Åi¿ Í—¿ Í—  ¿ Í‚
¿ ÍÁ¿ ÍÊ   ¿ ÌkÄ¸¿ Ìp¿ Ìp  ¿ ÌÄ¿ Ìã¿ Ìä   ¿ ÓkÅÚ¿ Ó|¿ Ó|  ¿ ÓÉ¿ Óí¿ Óë  ¿ Ók¿ Ól¿ aÅ¿ r¿ r   ¿ a¿ b¿ ÒqÅg¿ ÒÇ¿ ÒÇ   ¿ Òq¿ Òr¿ Ú‹Å{¿ ÚÌ¿ ÚÌ  ¿ Ú˚¿ Û¿ Û  ¿ Ú‹¿ Ú›¿ ˆ"Å¿ ˆ)¿ ˆ)  ¿ ˆ=¿ ˆC¿ ˆB   ¿ ¯!áf¿ ˙©¿ ˙©ÇV/// Returns the local coordinates of the endpoints of the given selection.
///
/// If the selection is collapsed (and therefore occupies a single point), the
/// returned list is of length one. Otherwise, the selection is not collapsed
/// and the returned list is of length two. In this case, however, the two
/// points might actually be co-located (e.g., because of a bidirectional
/// selection that contains some text but whose ends meet in the middle).
///
/// See also:
///
///  * [getLocalRectForCaret], which is the equivalent but for
///    a [TextPosition] rather than a [TextSelection]. ¿ ˙¬¿ ˙—¿ ˙–   ¿ ˇãÉº¿ Ì¿ ÌÅK/// Returns the smallest [Rect], in the local coordinate system, that covers
/// the text within the [TextRange] specified.
///
/// This method is used to calculate the approximate position of the IME bar
/// on iOS.
///
/// Returns null if [TextRange.isValid] is false for the given `range`, or the
/// given `range` is collapsed. ¿¿¿   ¿KÇ¿ß¿ßÅ>/// Returns the position in the text for the given global coordinate.
///
/// See also:
///
///  * [getLocalRectForCaret], which is the reverse operation, taking
///    a [TextPosition] and returning a [Rect].
///  * [TextPainter.getPositionForOffset], which is the equivalent method
///    for a [TextPainter] object. ¿ª¿√¿¬   ¿Zâá¿R¿RÅ‹/// Returns the [Rect] in local coordinates for the caret at the given text
/// position.
///
/// See also:
///
///  * [getPositionForPoint], which is the reverse operation, taking
///    an [Offset] in global coordinates and returning a [TextPosition].
///  * [getEndpointsForSelection], which is the equivalent but for
///    a selection rather than a particular text position.
///  * [TextPainter.getOffsetForCaret], the equivalent method for a
///    [TextPainter] object. ¿g¿u¿t   ¿ÂÇH¿¯¿¯  ¿¿¿  ¿Â¿Ê¿1Ç˛¿D¿D  ¿]¿e¿d  ¿1¿2¿,Ç.¿0¿0  ¿E¿M¿L   ¿^Üá¿e¿e  ¿v¿~¿}   ¿È[¿¸¿¸  ¿¿¿  ¿È¿Í¿HÅ!¿[¿[  ¿u¿}¿|  ¿H¿I¿mÄµ¿Ä¿Ä  ¿†¿Æ¿≠  ¿m¿n¿ &6¿ 7¿ 7  ¿ C¿ K¿ J  ¿ &¿ '¿ `ÑA¿ ~¿ ~  ¿ é¿ †¿ ü  ¿ ®¿ π¿ ∏  ¿ `¿ a¿ l¿ m¿$ˆÅo¿%¿%  ¿%¿%!¿%   ¿%'¿%8¿%7  ¿$ˆ¿$˜¿'øÅS¿(o¿(oÄ¢/// Tracks the position of a secondary tap event.
///
/// Should be called before attempting to change the selection based on the
/// position of a secondary tap. ¿(Ü¿(ñ¿(ï   ¿)ÅÖ¿*=¿*=Å/// If [ignorePointer] is false (the default) then this method is called by
/// the internal gesture recognizer's [TapGestureRecognizer.onTapDown]
/// callback.
///
/// When [ignorePointer] is true, an ancestor widget must respond to tap
/// down events by calling this method. ¿*K¿*[¿*Z   ¿*üi¿*§¿*§  ¿*≥¿*√¿*¬   ¿+Åe¿,*¿,*Å/// If [ignorePointer] is false (the default) then this method is called by
/// the internal gesture recognizer's [TapGestureRecognizer.onTap]
/// callback.
///
/// When [ignorePointer] is true, an ancestor widget must respond to tap
/// events by calling this method.   ¿,uD¿,z¿,z    ¿,ΩÅÄ¿-Ó¿-ÓÅ/// If [ignorePointer] is false (the default) then this method is called by
/// the internal gesture recognizer's [DoubleTapGestureRecognizer.onDoubleTap]
/// callback.
///
/// When [ignorePointer] is true, an ancestor widget must respond to double
/// tap events by calling this method.   ¿.AÅÄ¿/r¿/rÅ/// If [ignorePointer] is false (the default) then this method is called by
/// the internal gesture recognizer's [LongPressGestureRecognizer.onLongPress]
/// callback.
///
/// When [ignorePointer] is true, an ancestor widget must respond to long
/// press events by calling this method.   ¿/≈P¿/ ¿/     ¿0Çò¿24¿24Ç/// Move selection to the location of the last tap down.
///
/// {@template flutter.rendering.RenderEditable.selectPosition}
/// This method is mainly used to translate user inputs in global positions
/// into a [TextSelection]. When used in conjunction with a [EditableText],
/// the selection change is fed back into [TextEditingController.selection].
///
/// If you have a [TextEditingController], it's generally easier to
/// programmatically manipulate its `value` or `selection` directly.
/// {@endtemplate} ¿2D$¿2d¿2c   ¿2µÉë¿3|¿3|Äπ/// Select text between the global positions [from] and [to].
///
/// [from] corresponds to the [TextSelection.baseOffset], and [to] corresponds
/// to the [TextSelection.extentOffset]. ¿3é¿3ü¿3û  ¿3§
¿3≠¿3¨  ¿3∞$¿3–¿3œ   ¿6»Å¿7P¿7P|/// Select a word around the location of the last tap down.
///
/// {@macro flutter.rendering.RenderEditable.selectPosition} ¿7\$¿7|¿7{   ¿7œÖS¿9W¿9WÅr/// Selects the set words of a paragraph that intersect a given range of global positions.
///
/// The set of words selected are not strictly bounded by the range of global positions.
///
/// The first and last endpoints of the selection will always be at the
/// beginning and end of a word respectively.
///
/// {@macro flutter.rendering.RenderEditable.selectPosition} ¿9p¿9Å¿9Ä  ¿9ä
¿9ì¿9í  ¿9ö$¿9∫¿9π   ¿=&É¿=¨¿=¨z/// Move the selection to the beginning or end of a word.
///
/// {@macro flutter.rendering.RenderEditable.selectPosition} ¿=º$¿=‹¿=€   ¿@/äm¿@Ø¿@ØX/// Returns a [TextSelection] that encompasses the word at the given
/// [TextPosition]. ¿@ø¿@Õ¿@Ã  ¿@å¿@ç¿LÅ§¿L2¿L2  ¿LK¿LS¿LR  ¿Lf!¿Ln¿Lm  ¿L]¿Lx¿L~¿L¿Q¡Äˇ¿Q∆¿Q∆    ¿S4Çæ¿S‡¿S‡Ä†/// On iOS, the cursor is taller than the cursor on Android. The height
/// of the cursor for iOS is approximate and obtained through an eyeball
/// comparison.   ¿VcÅ”¿Vj¿Vj  ¿V¿Vá¿VÜ   ¿X:É¿XX¿XX  ¿Xi$¿XÉ¿XÇ  ¿X:¿X;¿XF¿XG¿[EÇ[¿[X¿[X  ¿[k$¿[Ö¿[Ñ  ¿[ë¿[ü¿[û  ¿[E¿[F¿]§Ü∫¿]µ¿]µ   ¿]§¿]•¿fjÅ:¿fx¿fx  ¿fó¿fü¿fû  ¿f¶¿f¨¿f´   ¿g®ä˘¿hÅ¿hÅÄ≈/// Returns the position within the text field closest to the raw cursor offset.
///
/// See also:
///
///  * [FloatingCursorDragState], which explains the floating cursor feature
///    in detail. ¿h¶¿hÆ¿h≠  ¿hø¿h∆¿h≈   ¿r•Ö¨¿sí¿síÄŸ/// Sets the screen position of the floating cursor and the text position
/// closest to the cursor.
///
/// See also:
///
///  * [FloatingCursorDragState], which explains the floating cursor feature
///    in detail. ¿s©¿s¬¿s¡  ¿sÃ¿s‘¿s”  ¿sÊ¿sÙ¿sÛ  ¿t¿t¿t   ¿xUÉ2¿xk¿xk  ¿xz¿xà¿xá  ¿xñ¿x¨¿x´   ¿{ãÑC¿~b¿~bÇ°/// Starts a [VerticalCaretMovementRun] at the given location in the text, for
/// handling consecutive vertical caret movements.
///
/// This can be used to handle consecutive upward/downward arrow key movements
/// in an input field.
///
/// {@macro flutter.rendering.RenderEditable.verticalArrowKeyMovement}
///
/// The [VerticalCaretMovementRun.isValid] property indicates whether the text
/// layout has changed and the vertical caret run is invalidated.
///
/// The caller should typically discard a [VerticalCaretMovementRun] when
/// its [VerticalCaretMovementRun.isValid] becomes false, or on other
/// occasions where the vertical caret run should be interrupted. ¿~}¿~ã¿~ä   ¿“É)¿◊¿◊  ¿Ê¿˜¿ˆ  ¿ˇ¿Ä¿Ä   ¿ÉSÑ&¿ÉX¿ÉX  ¿Ép¿ÉÅ¿ÉÄ  ¿Éç"¿Éß¿É¶  ¿Éµ¿ÉΩ¿Éº   ¿á}Ä‰¿áé¿áé  ¿á¢¿á≠¿á¨  ¿á≥¿áº¿áª  ¿á}¿á~¿àeÇ¢¿àv¿àv  ¿à|¿àç¿àå  ¿àï¿àù¿àú  ¿àe¿àf¿ã^Å1¿ãp¿ãp  ¿ãç¿ãõ¿ãö  ¿ã^¿ã_¿åìÉë¿å§¿å§  ¿å∏&¿å’¿å‘  ¿åì¿åî¿ê(Ä”¿êJ¿êJ   ¿ê(¿ê) ¿êˇÖ—¿ë¿ë  ¿ë6[¿ë6 ¿ë6¿ëP  ¿ëR¿ëj¿ëi  ¿ë~¿ëu¿ëÄ¿ëâ¿ëé¿ëè¿íw¿íé¿íé  ¿ëïJ¿ëµ¿ëµ   ¿ëï¿ëñ¿ë„/¿ë¯¿ë¯   ¿ë„¿ë‰¿í+¿í+¿í+   ¿í¿í¿íE/¿í`¿í`    ¿íöÅÜ¿íû¿íû  ¿í¶¿íæ¿íΩ   ¿î$Å[¿î5¿î5  ¿î;¿îL¿îK  ¿îT¿î\¿î[  ¿î$¿î%¿ïÉv¿ïî¿ïî  ¿ïõ¿ï™¿ï©  ¿ïÉ¿ïÑ¿ï˝a¿ñ¿ñ   ¿ï˝¿ï˛¿ñbl¿ñÄ¿ñÄ  ¿ñë$¿ñ´¿ñ™  ¿ñb¿ñc¿ñn¿ño ¿ñ“äS¿õŸ¿õŸÑ˜/// An interface that paints within a [RenderEditable]'s bounds, above or
/// beneath its text content.
///
/// This painter is typically used for painting auxiliary content that depends
/// on text layout metrics (for instance, for painting carets and text highlight
/// blocks). It can paint independently from its [RenderEditable], allowing it
/// to repaint without triggering a repaint on the entire [RenderEditable] stack
/// when only auxiliary content changes (e.g. a blinking cursor) are present. It
/// will be scheduled to repaint when:
///
///  * It's assigned to a new [RenderEditable] (replacing a prior
///    [RenderEditablePainter]) and the [shouldRepaint] method returns true.
///  * Any of the [RenderEditable]s it is attached to repaints.
///  * The [notifyListeners] method is called, which typically happens when the
///    painter's attributes change.
///
/// See also:
///
///  * [RenderEditable.foregroundPainter], which takes a [RenderEditablePainter]
///    and sets it as the foreground painter of the [RenderEditable].
///  * [RenderEditable.painter], which takes a [RenderEditablePainter]
///    and sets it as the background painter of the [RenderEditable].
///  * [CustomPainter], a similar class which paints within a [RenderCustomPaint].    ¿ú
ÇŒ¿û¶¿û¶Ç~/// Determines whether repaint is needed when a new [RenderEditablePainter]
/// is provided to a [RenderEditable].
///
/// If the new instance represents different information than the old
/// instance, then the method should return true, otherwise it should return
/// false. When [oldDelegate] is null, this method should always return true
/// unless the new painter initially does not paint anything.
///
/// If the method returns false, then the [paint] call might be optimized
/// away. However, the [paint] method will get called whenever the
/// [RenderEditable]s it attaches to repaint, even if [shouldRepaint] returns
/// false. ¿û¥"¿ûÃ¿ûÀ   ¿û‹ÇG¿†‰¿†‰Å/// Paints within the bounds of a [RenderEditable].
///
/// The given [Canvas] has the same coordinate space as the [RenderEditable],
/// which may be different from the coordinate space the [RenderEditable]'s
/// [TextPainter] uses, when the text moves inside the [RenderEditable].
///
/// Paint operations performed outside of the region defined by the [canvas]'s
/// origin and the [size] parameter may get clipped, when [RenderEditable]'s
/// [RenderEditable.clipBehavior] is not [Clip.none]. ¿†Í¿†Ú¿†Ò  ¿†˘	¿†ˇ¿†˛  ¿°¿°¿°    ¿°'ã˝¿°-¿°-  ¿°eÄü¿°e ¿°e¿°z  ¿°|¿°à¿°á  ¿°ô¿°°¿°†  ¿°…¿°∑¿°À¿°Û¿°„¿°ı¿¢$¿¢¿¢ ¿¢%¿¢*¿¢+¿¢a¿¢h¿¢h  ¿£R¿£]¿£]  ¿§ÒA¿•¿• ¿•¿•¿•¿•,¿•-¿¶ª>¿¶Ã¿¶Ã ¿¶„¿¶Â¿¶Ê¿¶Û¿¶Ù¿¢1-¿¢<¿¢<    ¿¢{Äõ¿¢¿¢  ¿¢é¿¢ñ¿¢ï   ¿£5¿£)¿£)    ¿£rÄ•¿£v¿£v  ¿£á¿£ì¿£í   ¿§Ä”¿§¿¿§¿Äà/// Controls how tall the selection highlight boxes are computed to be.
///
/// See [ui.BoxHeightStyle] for details on available styles.   ¿•6ÄØ¿•:¿•:  ¿•O¿•b¿•a   ¿•ÈÄœ¿¶å¿¶åÄá/// Controls how wide the selection highlight boxes are computed to be.
///
/// See [ui.BoxWidthStyle] for details on available styles.   ¿¶˝Ä´¿ß¿ß  ¿ß¿ß'¿ß&   ¿ß¨ÉV¿ßΩ¿ßΩ  ¿ß√¿ßÀ¿ß   ¿ß“	¿ßÿ¿ß◊  ¿ß›¿ßÌ¿ßÏ  ¿ß¨¿ß≠¿´Ç¿´¿´  ¿´%"¿´=¿´<  ¿´¿´ ¿≠&ëë¿≠,¿≠,  ¿≠\¿≠\ ¿≠\¿≠i    	¿≠ò¿≠ù¿≠ù ¿≠¨¿Ø¿Ø¿Ø ¿Ø¿Ø$ ¿Ø0¿Ø0 ¿Ø=¿ØB¿ØC¿ØH.¿ØY¿ØY ¿Øo¿Øt¿Øu¿Ø£¿Ø™¿Ø™  ¿∞~¿∞Ü¿∞Ü  ¿±T"¿±[¿±[ ¿±k¿±q¿±r¿≤H¿≤O¿≤O  ¿≥}¿≥É¿≥É  ¿≠p%¿≠y¿≠y    ¿≠¥ÄÜ¿≠∏¿≠∏  ¿≠ƒ
¿≠ ¿≠…   ¿Ø{%¿ØÜ¿ØÜ    ¿ØπÄî¿ØΩ¿ØΩ  ¿Ø»¿Ø–¿Øœ   ¿∞Q*¿∞]¿∞]    ¿∞óÄç¿∞õ¿∞õ  ¿∞®¿∞±¿∞∞   ¿±()¿±3¿±3    ¿±zÄå¿±~¿±~  ¿±ã¿±ì¿±í   ¿≤
;¿≤¿≤    ¿≤iÄŸ¿≤m¿≤m  ¿≤É¿≤ã¿≤ä   ¿≥F4¿≥P¿≥P    ¿≥öÄù¿≥û¿≥û  ¿≥±¿≥∏¿≥∑   ¿¥;ÉN¿¥@¿¥@  ¿¥X¿¥`¿¥_  ¿¥k¿¥{¿¥z  ¿¥é¿¥ï¿¥î  ¿¥§¿¥≤¿¥±   ¿∑çÑ§¿∑û¿∑û  ¿∑§¿∑¨¿∑´  ¿∑≥	¿∑π¿∑∏  ¿∑æ¿∑Œ¿∑Õ  ¿∑ç¿∑é¿º5ÇÄ¿ºF¿ºF  ¿ºT"¿ºl¿ºk  ¿º5¿º6 ¿æπÖG¿æø¿æø  ¿ø:¿ø ¿ø¿ø   ¿ø"¿ø1¿ø0   ¿ø?*¿øa¿øa   ¿ønÄ†¿ø¿ø  ¿øã¿øô¿øò  ¿øn¿øo¿¿Ä¶¿¿#¿¿#  ¿¿2¿¿@¿¿?  ¿¿¿¿¿¿ºÄ ¿¿Õ¿¿Õ  ¿¿”¿¿€¿¿⁄  ¿¿‚	¿¿Ë¿¿Á  ¿¿Ì¿¿˝¿¿¸  ¿¿º¿¿Ω¿¡äÇt¿¡õ¿¡õ  ¿¡©"¿¡¡¿¡¿  ¿¡ä¿¡ã          Ç˝É
É
 ÉÉ&&É3É3 ÉIÉ⁄kÉÎÉÎ Ñ
ÑÑÑÑDÑ,Ñ"Ñ.Ñ=Ñ5Ñ?Ñ:ÑåÑå Ñ•Ñ´Ñ¨Ñ¥Ñ∏ÑµÜ3QÜ@Ü@ Ü~ÜyÜÄ   ÄÆ  package:flutter/cupertino.dart å\ <ÄÜÄ§Ä•Ä÷ÄﬂÄ‡Ä˙ÅÅ{Å|Å©Å”Å˚Ç$ÇLÇMÇ`Ç|ÇëÇÆÇƒÇ›Ç¸Ç˝É&ÉXÉYÉßÉ⁄Ñ Ñ3ÑDÑGÑHÑÑªÑºÖÖ^Ö™ÖÍÜ3ÜÜÜáÜ–áá8áCá^áöá“á”àà^àtàuà∞à“à”àﬂââ$â7â=âiâ}âÉâ„âÁâËâÙä
ä*äSä|äîäõäüä†ä¨ä·ä„ä‰ã2ã~ãñãöã‰å1å~åÕççkçóçõçÈé8éàé◊è%èCèGènèxèÄèäè⁄ê'êvê∆ëëaërëvëƒíí`íÜíôíùíﬁì(ìxì…îî	î^îxî|î ïïhïÑï«ïÂï˘ññ/ñFñ_ñdñeñ~ñíñ∑ñ∏ñ„óóóóóaógóµóÀó—ò!ò]òròáòõò°ò˛ôNôäôæô÷ô‹ôÒôıôˆö8ögöhö≥ö»öÂõ<õ^õ{õÅõ©õ™úúfú∫úÀú‚úÈùù)ù-ù.ù:ùWùlùçùëùíùûù≤ù«ù˙ûûûsûäû≠ûÿûÈûÌûÓüüüUümüÇüüü≥üπ††/†R†}†é†í†ì†’†Ó†Ù°:°@°x°ù°Œ°Á¢%¢@¢Q¢[¢c¢p¢Æ¢Õ¢ﬁ¢Ë¢¢ˆ£"£&£(£)£v£ü£££Ì§=§f§j§π••X•¶•ı¶¶¶`¶±¶ıßß%ßQßêßæß·®3®9®w®}®Ã®“© ©n©±©∑™ ™™$™:™d™è™ß™…™Ó´´/´Z´q´Ñ´û´∫´’´Ê¨¨v¨≤¨∏¨⁄≠≠*≠N≠n≠â≠§≠–ÆÆ0ÆNÆbÆÄÆöÆ¥Æ€ØØ%ØkØÆØ‘∞ ∞@∞\∞É∞¨∞–∞˛±±N±±é±€≤≤≤(≤e≤™≤¥≤√≥≥s≥}≥∑≥⁄¥¥9¥N¥m¥î¥©µµ%µRµsµ§µÕµ◊∂∂3∂P∂k∂ä∂£∂∆∂Î∑∑]∑ä∑ø∑∏!∏D∏a∏Ä∏•∏À∏¸π3π4πkπüπ‚∫#∫$∫g∫¨∫≠∫Ÿªª7ªxªyª™ª«ª›ª·ª‚ª˝º4ºkºlºxºãº±ºŸº˝Ω%ΩIΩjΩõΩ¬ΩÎææ>æ_æ|æòæΩæ€æ¯øø ø5ø9ø:øøºø◊¿ @ ¿ @/¿ @à¿ @ó¿ @ò¿ @√¿ A¿ AB¿ AK¿ Au¿ A≠¿ A∫¿ Aı¿ A˚¿ B ¿ B$¿ B%¿ Bf¿ Bç¿ Bì¿ Bﬂ¿ C%¿ CP¿ Cñ¿ C√¿ D ¿ D,¿ D:¿ D@¿ Dj¿ Dn¿ Do¿ D™¿ DÁ¿ E¿ E!¿ EP¿ Eü¿ EÆ¿ EØ¿ E⁄¿ F6¿ FY¿ Fb¿ Få¿ Fƒ¿ F—¿ G¿ G¿ G-¿ G1¿ G2¿ Gz¿ G°¿ Gß¿ GÛ¿ H>¿ HY¿ Hã¿ HÆ¿ H·¿ I¿ I¿ I¿ I7¿ I;¿ I<¿ IQ¿ Iõ¿ I◊¿ Iÿ¿ Iˆ¿ JA¿ Jó¿ Jò¿ J‹¿ K+¿ Kp¿ K∑¿ K„¿ L5¿ L<¿ L@¿ LA¿ L{¿ L∂¿ LÒ¿ M.¿ MZ¿ MÉ¿ M©¿ Mƒ¿ Mˆ¿ Mˇ¿ N¿ N
¿ N¿ NV¿ Nf¿ Nl¿ Nπ¿ O¿ O4¿ O:¿ Oâ¿ O…¿ Oœ¿ P¿ P¿ P¿ PC¿ Pî¿ P ¿ P˛¿ Q¿ Q¿ Q?¿ QV¿ QZ¿ Q[¿ Qñ¿ Q⁄¿ R¿ R7¿ RE¿ RK¿ Rt¿ Rã¿ Rè¿ Rê¿ RΩ¿ R√¿ S¿ SA¿ S]¿ SÑ¿ S©¿ S∑¿ SΩ¿ S‹¿ SÛ¿ S˜¿ S¯¿ T:¿ T@¿ Ti¿ T°¿ Tø¿ TË¿ U¿ U¿ U$¿ UN¿ Uo¿ UÜ¿ Uä¿ Uã¿ UŒ¿ Uˆ¿ V¿ V+¿ VL¿ VZ¿ V`¿ Vz¿ Vù¿ VΩ¿ V¡¿ V¬¿ W¿ W¿ WQ¿ W©¿ Wﬂ¿ X¿ X¿ X¿ Xb¿ Xh¿ X¶¿ X˚¿ Y/¿ Yb¿ Yf¿ Yg¿ Yµ¿ Yı¿ Y˚¿ ZL¿ Zo¿ Zû¿ Zü¿ Zˆ¿ Z¸¿ [H¿ [ò¿ [„¿ [ˆ¿ [¸¿ \I¿ \î¿ \±¿ ]¿ ]W¿ ]X¿ ]≠¿ ]≥¿ ]ˇ¿ ^H¿ ^ó¿ ^±¿ ^∑¿ _¿ _O¿ _l¿ _ª¿ `¿ `¿ `M¿ `•¿ `ˇ¿ aT¿ aô¿ aù¿ aû¿ aº¿ aΩ¿ aˇ¿ b¿ bD¿ bá¿ b‘¿ bÎ¿ c6¿ c<¿ cÜ¿ cä¿ cã¿ c«¿ c”¿ d¿ d;¿ d?¿ d@¿ dá¿ dì¿ d–¿ e¿ ee¿ e§¿ eÌ¿ f+¿ fj¿ fn¿ fo¿ f∂¿ f¬¿ fˇ¿ gI¿ gî¿ g”¿ h¿ hY¿ hò¿ hú¿ hù¿ hπ¿ h∫¿ h˝¿ i¿ i;¿ ij¿ ió¿ i•¿ i´¿ iﬁ¿ iﬂ¿ j¿ jk¿ jÇ¿ jâ¿ j“¿ k ¿ kn¿ k®¿ k˘¿ lF¿ lp¿ l§¿ l»¿ l˙¿ l˚¿ m8¿ mÉ¿ mö¿ m°¿ m”¿ m˜¿ n'¿ n+¿ n,¿ nÇ¿ n…¿ nÕ¿ nŒ¿ o¿ o@¿ oé¿ o›¿ p*¿ pv¿ p«¿ pˇ¿ q¿ qY¿ q™¿ qÿ¿ r¿ rd¿ rm¿ rs¿ rç¿ rﬁ¿ rÎ¿ rÚ¿ rˆ¿ r˜¿ s¿ s¿ s9¿ sÅ¿ s∞¿ sﬂ¿ s„¿ s‰¿ s¿ t¿ t2¿ tV¿ tZ¿ t[¿ tú¿ t¢¿ t·¿ u¿ uZ¿ uå¿ uç¿ uÕ¿ u”¿ v¿ vF¿ vh¿ vî¿ v€¿ v˚¿ w!¿ w/¿ w5¿ wW¿ wv¿ wô¿ w√¿ w⁄¿ w˙¿ w˛¿ wˇ¿ x$¿ xH¿ x|¿ xù¿ x»¿ x˚¿ y(¿ yQ¿ yz¿ yü¿ yÃ¿ z¿ z?¿ zC¿ zD¿ zw¿ z¨¿ zœ¿ z˙¿ {¿ {¿ {2¿ {I¿ {M¿ {N¿ {t¿ {z¿ {Ω¿ {˛¿ |¿ |R¿ |°¿ |Ô¿ }8¿ }à¿ }ò¿ }◊¿ ~¿ ~f¿ ~®¿ ~”¿ ¿ ¿ ¿ >¿ U¿ u¿ y¿ z¿ À¿ ◊¿ ›¿ Ä2¿ ÄÄ¿ Ä–¿ Ä¯¿ Ä˛¿ ÅJ¿ ÅZ¿ Åá¿ Å•¿ ÅÕ¿ Å€¿ Å·¿ Ç¿ Ç¿ Ç¿ Ç¿ Çf¿ Çà¿ Ç¡¿ ÇÁ¿ É¿ É!¿ É'¿ ÉL¿ Éc¿ Ég¿ Éh¿ Éô¿ Éœ¿ ÉÒ¿ Ñ¿ Ñ¿ Ñ¿ Ñf¿ Ñã¿ Ñë¿ Ñ÷¿ Ñ‹¿ Ö¿ Ö¿ Ö/¿ Ö5¿ ÖÑ¿ Öò¿ Ö„¿ Ü¿ Ü@¿ ÜD¿ ÜE¿ Ü`¿ Üa¿ ÜÑ¿ Üπ¿ Ü‹¿ á
¿ á*¿ á8¿ á>¿ áR¿ áÖ¿ áã¿ á©¿ á∆¿ áË¿ áÓ¿ à¿ à¿ à4¿ àd¿ àj¿ àn¿ ào¿ àä¿ àº¿ à¿¿ à¡¿ àÚ¿ â¿ â.¿ âK¿ âi¿ âw¿ â}¿ âî¿ â¥¿ â∏¿ âπ¿ ä¿ ä2¿ äM¿ äk¿ ää¿ äò¿ äû¿ ä∂¿ äÕ¿ ä—¿ ä“¿ ã¿ ã&¿ ã@¿ ã]¿ ã{¿ ãâ¿ ãè¿ ã¶¿ ã∆¿ ã ¿ ãÀ¿ å¿ å ¿ åj¿ åÜ¿ åå¿ åÕ¿ å”¿ ç!¿ çq¿ çÆ¿ ç–¿ ç‚¿ ç„¿ é6¿ éS¿ é{¿ éò¿ é¶¿ é¨¿ é√¿ éƒ¿ è¿ èd¿ èé¿ è¡¿ èÿ¿ è‹¿ è›¿ ê¿ ê4¿ êF¿ êG¿ êö¿ ê∑¿ êﬂ¿ ê¸¿ ë
¿ ë¿ ë'¿ ë>¿ ëB¿ ëC¿ ëw¿ ëó¿ ë®¿ ëƒ¿ ë‡¿ ëÓ¿ ëÙ¿ í
¿ í!¿ í%¿ í&¿ íZ¿ íõ¿ í¿¿ íÓ¿ íÚ¿ íÛ¿ ì9¿ ìU¿ ì[¿ ìì¿ ìô¿ ìÍ¿ î	¿ î¿ î7¿ î§¿ îﬁ¿ î‚¿ ï ¿ ï/¿ ïN¿ ïª¿ ïı¿ ï˘¿ ñ¿ ñJ¿ ñN¿ ñO¿ ñÜ¿ ñæ¿ ñ„¿ ó¿ ó¿ ó#¿ óH¿ ó_¿ óc¿ ód¿ óó¿ óù¿ óﬂ¿ óÂ¿ ò)¿ òT¿ òÇ¿ òü¿ ò«¿ òÊ¿ òÙ¿ ò˙¿ ô¿ ôB¿ ôX¿ ôx¿ ô|¿ ô}¿ ô≥¿ ôπ¿ ö	¿ öU¿ öù¿ ö≈¿ öﬂ¿ õ¿ õ ¿ õ.¿ õ4¿ õH¿ õv¿ õ|¿ õë¿ õ•¿ õ–¿ õ÷¿ õÌ¿ õÒ¿ õÚ¿ ú¿ ú@¿ ú]¿ ú¿ ú†¿ úÆ¿ ú¥¿ úŒ¿ úÂ¿ úÈ¿ úÍ¿ ù¿ ù¿ ùp¿ ùv¿ ù—¿ û ¿ ûå¿ ûœ¿ ûË¿ ü¿ ü.¿ ü<¿ üB¿ ü]¿ üt¿ üx¿ üy¿ ü¡¿ †¿ †¿ †^¿ †Ü¿ †õ¿ †—¿ †Î¿ °¿ °:¿ °H¿ °N¿ °m¿ °≠¿ °⁄¿ °˝¿ ¢C¿ ¢u¿ ¢ì¿ ¢ó¿ ¢ò¿ ¢ÿ¿ £&¿ £,¿ £p¿ £π¿ §
¿ §R¿ §g¿ §†¿ §√¿ §Î¿ §Ô¿ §¿ •'¿ •-¿ •^¿ •ò¿ •º¿ •‰¿ •Ë¿ •È¿ ¶¿ ¶ ¿ ¶k¿ ¶¡¿ ß ¿ ß#¿ ßQ¿ ß{¿ ßâ¿ ßè¿ ß≤¿ ß»¿ ßÃ¿ ßÕ¿ ß¸¿ ®¿ ®M¿ ®°¿ ®‹¿ ®˝¿ ©)¿ ©Q¿ ©_¿ ©e¿ ©Ü¿ ©ú¿ ©†¿ ©°¿ ©Ï¿ ™¿ ™¿ ™`¿ ™f¿ ™v¿ ™|¿ ™À¿ ™ﬂ¿ ´¿ ´¿ ´O¿ ´Å¿ ´£¿ ´‘¿ ´’¿ ¨¿ ¨¿ ¨X¿ ¨õ¿ ¨√¿ ≠¿ ≠D¿ ≠y¿ ≠¿ ≠√¿ ≠˛¿ Æ4¿ ÆV¿ Æù¿ Æ¬¿ ÆÚ¿ Ø"¿ Ø0¿ Ø6¿ Ø_¿ Øv¿ Øñ¿ Øö¿ Øõ¿ Ø‚¿ ∞¿ ∞¿ ∞b¿ ∞•¿ ∞Õ¿ ±¿ ±N¿ ±É¿ ±â¿ ±Ÿ¿ ±˝¿ ≤¿ ≤V¿ ≤ü¿ ≤•¿ ≤È¿ ≥.¿ ≥u¿ ≥≥¿ ≥—¿ ¥¿ ¥¿ ¥¿ ¥A¿ ¥G¿ ¥ñ¿ ¥¿ µ@¿ µÉ¿ µ–¿ µ˘¿ ∂5¿ ∂9¿ ∂:¿ ∂ó¿ ∂”¿ ∂Ÿ¿ ∑(¿ ∑.¿ ∑ã¿ ∑‹¿ ∏¿ ∏K¿ ∏O¿ ∏P¿ ∏à¿ ∏é¿ ∏◊¿ π¿ π?¿ πq¿ πê¿ πë¿ π»¿ π…¿ πˇ¿ ∫¿ ∫(¿ ∫R¿ ∫x¿ ∫ô¿ ∫ª¿ ∫ÿ¿ ∫¿ ª¿ ª¿ ª¿ ª¿ ª^¿ ª}¿ ªµ¿ ª∂¿ º¿ ºQ¿ ºê¿ º∫¿ ºÚ¿ ºÛ¿ Ω>¿ ΩÖ¿ Ω≤¿ Ω∏¿ Ω˜¿ æ7¿ æZ¿ ær¿ æõ¿ æ©¿ æ€¿ ø¿ ø2¿ ø_¿ øç¿ ø¨¿ øπ¿ ø√¿ ø÷¿ ø⁄¿ ø€¿ øÁ¿ ¿.¿ ¿`¿ ¿£¿ ¿Ú¿ ¡@¿ ¡_¿ ¡ñ¿ ¡˜¿ ¬0¿ ¬X¿ ¬©¿ ¬œ¿ ¬‹¿ √ ¿ √%¿ √3¿ √9¿ √c¿ √|¿ √÷¿ √Â¿ ƒ¿ ƒ1¿ ƒw¿ ƒƒ¿ ≈¿ ≈T¿ ≈ï¿ ≈±¿ ≈”¿ ≈ı¿ ∆,¿ ∆_¿ ∆r¿ ∆É¿ ∆í¿ ∆û¿ ∆Ω¿ ∆ﬂ¿ ∆È¿ «G¿ «O¿ «U¿ «`¿ «í¿ «≥¿ «÷¿ «¸¿ »¿ »4¿ »R¿ »ü¿ »Ÿ¿ …	¿ …
¿ …2¿ …e¿ …k¿ …l¿ …ç¿ …∂¿ …º¿ …Ω¿ …˙¿  "¿  m¿  |¿  ≈¿ À¿ À!¿ Àk¿ Àz¿ À¡¿ Ã¿ Ã¿ Ã!¿ Ã%¿ Ã&¿ ÃK¿ ÃÅ¿ Ãﬁ¿ Õ¿ Õ¿ Õ¿ Õ¿ Õ¿ Õ:¿ ÕR¿ Õu¿ Õõ¿ Õ°¿ Õ„¿ Œ"¿ ŒV¿ Œl¿ ŒÜ¿ Œô¿ Œ∑¿ Œœ¿ ŒÚ¿ œS¿ œ†¿ œ¯¿ –-¿ –H¿ –x¿ –Å¿ –¢¿ –£¿ –√¿ —¿ —X¿ —á¿ —ú¿ —√¿ “¿ “^¿ “∞¿ “›¿ ”¿ ”¿ ”(¿ ”L¿ ”k¿ ”z¿ ”ª¿ ‘¿ ‘-¿ ‘A¿ ‘K¿ ‘u¿ ‘ß¿ ‘·¿ ’¿ ’J¿ ’T¿ ’ó¿ ’€¿ ’˘¿ ÷¿ ÷@¿ ÷v¿ ÷Æ¿ ÷π¿ ◊¿ ◊X¿ ◊}¿ ◊®¿ ◊“¿ ◊˝¿ ÿ)¿ ÿ4¿ ÿi¿ ÿé¿ ÿ¬¿ ÿÛ¿ Ÿ'¿ ŸY¿ Ÿå¿ Ÿù¿ Ÿ¿¿ ⁄	¿ ⁄^¿ ⁄Å¿ ⁄Æ¿ ⁄Ÿ¿ ⁄Á¿ €L¿ €s¿ €™¿ €∏¿ €Õ¿ €‡¿ €Û¿ ‹B¿ ‹L¿ ‹|¿ ‹œ¿ ›¿ ›'¿ ›R¿ ›à¿ ›ÿ¿ ›È¿ ﬁ¿ ﬁo¿ ﬁy¿ ﬁä¿ ﬁ∏¿ ﬁÿ¿ ﬂ	¿ ﬂ,¿ ﬂ4¿ ﬂ:¿ ﬂa¿ ﬂ∞¿ ﬂ¥¿ ﬂµ¿ ﬂÁ¿ ﬂ˜¿ ‡2¿ ‡i¿ ‡p¿ ‡t¿ ‡u¿ ‡º¿ ‡¸¿ ·B¿ ·C¿ ·y¿ ·∑¿ ·ª¿ ·º¿ ·ˇ¿ ‚¿ ‚r¿ ‚í¿ ‚†¿ ‚¶¿ ‚˙¿ „¿ „V¿ „|¿ „É¿ „á¿ „à¿ „Ã¿ „Î¿ ‰@¿ ‰`¿ ‰n¿ ‰t¿ ‰»¿ ‰€¿ Â$¿ ÂJ¿ ÂQ¿ ÂU¿ ÂV¿ Âî¿ Â≥¿ Ê¿ ÊE¿ Êa¿ Êo¿ Êu¿ Ê ¿ Ê›¿ Á(¿ ÁN¿ ÁU¿ ÁY¿ ÁZ¿ Áô¿ Á∏¿ Ë¿ ËX¿ Ëx¿ ËÜ¿ Ëå¿ ËÂ¿ Ë¯¿ ÈG¿ Èm¿ Èt¿ Èx¿ Èy¿ È°¿ È¥¿ Í¿ Í?¿ ÍT¿ Í\¿ ÍÅ¿ Íó¿ Íü¿ Íπ¿ Íø¿ Í√¿ Íƒ¿ Í¿ Î
¿ Îd¿ Îï¿ Î™¿ Î≤¿ Î◊¿ ÎÌ¿ Îı¿ Ï¿ Ï¿ Ï,¿ Ï0¿ Ï1¿ Ï{¿ Ïå¿ Ïë¿ Ï’¿ Ì'¿ Ìi¿ Ìì¿ Ì«¿ Ì¯¿ Ó/¿ ÓE¿ ÓM¿ ÓS¿ Ód¿ Óh¿ Ói¿ Óu¿ Óö¿ Ó≥¿ Óﬂ¿ Ô¿ Ô¿ Ô¿ ÔF¿ Ôm¿ Ôç¿ ÔÏ¿ ¿ ,¿ Z¿ ^¿ _¿ k¿ }¿ ë¿ ´¿ ◊¿ Ò¿ Ò¿ ÒC¿ Òj¿ Òn¿ Òo¿ Ò{¿ Òñ¿ ÒŸ¿ Ú¿ Ú?¿ Úd¿ Új¿ Úç¿ Ú≤¿ Ú∏¿ Ú’¿ ÚŸ¿ Ú⁄¿ ÚÊ¿ Û¿ Û]¿ Û†¿ Û√¿ Û„¿ ÛÈ¿ Ù¿ Ù,¿ Ù2¿ ÙT¿ ÙX¿ ÙY¿ ÙÉ¿ ÙÑ¿ Ù–¿ Ù—¿ ı¿ ı;¿ ım¿ ır¿ ıs¿ ıí¿ ıß¿ ıÀ¿ ı¿ ˆ¿ ˆ¿ ˆ¿ ˆ ¿ ˆQ¿ ˆf¿ ˆä¿ ˆ“¿ ˜¿ ˜!¿ ˜%¿ ˜&¿ ˜y¿ ˜»¿ ¯¿ ¯¿ ¯l¿ ¯r¿ ¯√¿ ˘¿ ˘`¿ ˘¨¿ ˘¯¿ ˘˛¿ ˙¿ ˙¿ ˙U¿ ˙é¿ ˙›¿ ˚ ¿ ˚¿ ˚.¿ ˚/¿ ˚R¿ ˚p¿ ˚ç¿ ˚æ¿ ˚◊¿ ¸¿ ¸=¿ ¸L¿ ¸e¿ ¸Ø¿ ˝¿ ˝l¿ ˝∞¿ ˝Ω¿ ˝ÿ¿ ˛;¿ ˛R¿ ˛k¿ ˛ ¿ ˛·¿ ˇ¿ ˇ>¿ ˇu¿ ˇ~¿ ˇÑ¿ ˇà¿ ˇâ¿ ˇÿ¿ 	¿ ¿ ^¿ l¿ r¿ √¿ Â¿¿H¿[¿a¿Ñ¿Ö¿À¿¿>¿h¿o¿p¿Å¿ê¿†¿Õ¿¿%¿D¿H¿I¿ë¿ó¿ß¿≠¿ı¿'¿s¿ò¿‘¿˜¿S¿W¿X¿¶¿∂¿º¿Ã¿“¿¿d¿©¿Ê¿,¿K¿Ö¿®¿Ÿ¿7¿~¿⁄¿€¿	¿	¿	!¿	T¿	[¿	õ¿	ú¿	˝¿
"¿
A¿
b¿
ô¿
⁄¿
˝¿¿A¿\¿x¿É¿¶¿…¿Í¿¿e¿∑¿¿6¿m¿©¿Ã¿Ê¿&¿A¿X¿c¿i¿j¿ô¿ﬁ¿‚¿„¿Ô¿"¿v¿ç¿ƒ¿¿.¿5¿z¿ñ¿“¿¿*¿.¿/¿;¿n¿¬¿Ÿ¿¿l¿£¿Â¿¿¿Y¿u¿µ¿ı¿¿,¿0¿1¿è¿≈¿¿¿*¿T¿à¿ß¿¡¿«¿⁄¿¿=¿X¿t¿è¿”¿Ó¿	¿¿'¿-¿W¿[¿\¿Ü¿Ø¿‰¿(¿d¿e¿Å¿•¿À¿"¿1¿â¿Ì¿ı¿(¿.¿/¿z¿…¿Ÿ¿Ú¿A¿è¿œ¿%¿|¿Ç¿¢¿∫¿¿¿˝¿Q¿i¿π¿ ¿€¿‚¿Ê¿Á¿Û¿E¿F¿R¿Ö¿≥¿œ¿ﬁ¿¿2¿;¿B¿f¿j¿k¿w¿π¿‹¿ ¿ #¿ $¿ 0¿ ]¿ ^¿ j¿ w¿ ≈¿!¿!Z¿!¶¿!˜¿"F¿"ä¿"¥¿"‘¿#+¿#`¿#Æ¿#º¿#–¿#Á¿$¿$4¿$I¿$W¿$ò¿$û¿$¢¿$£¿$≈¿$Û¿$Ù¿% ¿%@¿%l¿%ë¿%≤¿%≥¿%œ¿&¿&.¿&T¿&\¿&b¿&f¿&g¿&á¿&∞¿&±¿'¿'M¿'Z¿'o¿'º¿'Ω¿'Ò¿'˜¿(E¿(h¿(†¿(”¿)¿)¿)¿)b¿)´¿)ª¿)¡¿*¿*6¿*e¿*ò¿*ú¿*ù¿*Õ¿*È¿+¿+	¿+
¿+X¿+ù¿+≠¿+≥¿+˛¿,#¿,8¿,n¿,r¿,s¿,â¿,•¿,∂¿,∫¿,ª¿-	¿-Z¿-j¿-p¿-æ¿-Á¿.¿.:¿.>¿.?¿.ç¿.ﬁ¿.Ó¿.Ù¿/@¿/k¿/Ü¿/æ¿/¬¿/√¿/ﬂ¿/˚¿0¿0¿0¿0R¿0X¿0ö¿0Ë¿16¿1Ö¿1ã¿1—¿2¿2-¿2m¿2Æ¿2≤¿2≥¿2Û¿2˘¿3J¿3u¿3Ÿ¿3¸¿4E¿4o¿4v¿4õ¿4¸¿4˝¿5-¿5u¿5v¿5¨¿5 ¿5Ï¿6¿6¿6¿6C¿6G¿6H¿6É¿6≈¿6∆¿7¿7
¿7I¿7Ö¿7»¿7Ã¿7Õ¿8*¿80¿8ã¿8ë¿8€¿9¿9¿9P¿9l¿9Ü¿9ñ¿9¿¿9«¿9Í¿:3¿:]¿:d¿:¶¿: ¿:›¿:¯¿;K¿;l¿;π¿;˛¿;ˇ¿<¿<'¿<É¿<›¿=¿=¿=¿=¿=#¿=$¿=`¿=f¿=•¿=Â¿>¿>2¿>w¿>≤¿>π¿>¸¿?!¿?J¿?å¿?ô¿?˙¿@ ¿@(¿@,¿@-¿@t¿@ä¿@ü¿@ÿ¿A(¿AW¿AÄ¿A—¿A⁄¿A‡¿B/¿BF¿Bë¿Bó¿B⁄¿B˘¿C¿C<¿C}¿C¨¿C–¿C˚¿D¿D#¿D$¿Ds¿D¡¿D˙¿E¿EP¿E°¿E∂¿E’¿F&¿Fj¿Fë¿F≤¿Fÿ¿G¿G>¿GÖ¿Gì¿GÓ¿G˙¿HY¿H~¿Hò¿H¿¿I$¿I2¿Iì¿Iü¿Iƒ¿IÁ¿J
¿J/¿J@¿JH¿JN¿JO¿Jô¿Jù¿Jû¿JÍ¿JÔ¿K>¿Ké¿K’¿L¿L¿LG¿Lb¿Lâ¿Lê¿L›¿M)¿M6¿Mo¿M©¿M∞¿M¥¿Mµ¿N¿N¿N¿Nk¿N¥¿N˛¿ON¿O^¿Oc¿O¥¿O˛¿PL¿PÄ¿P∫¿Pø¿Q¿Q[¿Q§¿Qø¿QÊ¿R)¿RO¿Ru¿R|¿RΩ¿R¡¿R¬¿Rﬂ¿R‡¿S-¿S2¿S|¿S«¿SŸ¿S˚¿T ¿T?¿T`¿T≤¿T’¿T¯¿U¿U<¿Ue¿Ut¿Uì¿U™¿Uﬁ¿UÈ¿UÔ¿UÛ¿UÙ¿VB¿Va¿Vñ¿V”¿W¿W ¿W?¿Wó¿W¶¿W≈¿X¿X,¿X3¿X7¿X8¿XD¿XQ¿Xë¿X‘¿X˙¿Y ¿Y'¿Y;¿Y]¿Y{¿Yõ¿Y«¿YÛ¿Y˛¿Z¿Z>¿ZW¿Zi¿Zå¿Z·¿[>¿[B¿[C¿[O¿[™¿[Ì¿\¿\9¿\@¿\T¿\v¿\î¿\¥¿\‡¿]¿]¿]¿]W¿]ù¿]°¿]¢¿]Æ¿]«¿^ ¿^3¿^O¿^t¿^ô¿^†¿^„¿_	¿_/¿_6¿_G¿_Ä¿_∏¿_˙¿`¿`¿`2¿`D¿`g¿`¥¿`Ì¿a$¿ax¿aò¿a¡¿aﬁ¿b¿b<¿bE¿bL¿bM¿bì¿bÓ¿bÔ¿c@¿cA¿cz¿c≥¿c¥¿cÌ¿d!¿d[¿d_¿d`¿d∞¿e¿eF¿en¿eâ¿e´¿eŒ¿eÚ¿f¿f9¿fg¿fh¿fº¿g¿gx¿g°¿g•¿g¶¿g˘¿gˇ¿h¿h¿hd¿hx¿h€¿i¿i?¿i^¿iì¿i±¿i€¿j¿j7¿jã¿jÁ¿jË¿k¿k;¿kA¿kB¿ka¿kÆ¿k¥¿kµ¿kÿ¿l¿l¿l¿lm¿l¥¿lÍ¿mG¿mi¿mß¿n¿n(¿n.¿nc¿nø¿n‡¿o¿o~¿o¢¿o®¿o©¿oÓ¿p3¿pu¿pó¿p¨¿p≥¿p¥¿pı¿q¿q_¿qÅ¿qá¿q«¿qÁ¿r1¿rT¿rZ¿r[¿rÇ¿rÉ¿rû¿r¢¿r£¿rÔ¿s¿s¿s"¿s(¿sw¿sã¿s•¿s»¿s‚¿t¿t#¿t*¿tZ¿t¿tù¿tæ¿t‚¿u¿u&¿uJ¿uP¿ué¿u«¿u‰¿v¿vc¿vã¿v¨¿w¿w:¿wr¿wö¿wª¿w»¿w˜¿w˝¿xN¿xR¿xS¿x∂¿x˚¿y/¿yÉ¿yª¿yÈ¿z¿z1¿zd¿zo¿zw¿z}¿z“¿zÙ¿{¿{}¿{Ñ¿{à¿{â¿{⁄¿|¿|¿|f¿|¿|Ö¿|Œ¿|‘¿}%¿}i¿}o¿}ª¿~¿~G¿~õ¿~Á¿=¿d¿p¿¿î¿´¿ƒ¿À¿œ¿–¿Ä¿ÄJ¿ÄK¿Ä~¿Ä∏¿Äæ¿Äø¿Äˇ¿Å?¿Å@¿Åà¿Å“¿Åı¿Ç(¿Ç.¿Ç/¿Çh¿Çõ¿Çú¿Çø¿ÇÚ¿Ç¯¿Ç¸¿Ç˝¿ÉP¿ÉQ¿Él¿Éâ¿É±¿Éƒ¿É ¿Éˆ¿Ñ¿ÑB¿Ñv¿Ñ}¿Ñ™¿ÑÃ¿ÑÔ¿Ñˆ¿ÖC¿Öd¿Öê¿Ö©¿Ö‹¿Ü¿Ü¿Ü2¿Ü|¿Üë¿Ü¶¿ÜØ¿Üÿ¿ÜÒ¿á=¿áR¿ág¿áp¿áv¿áz¿á{¿áá¿á»¿à¿à&¿à,¿à^¿àb¿àc¿ào¿à¶¿à…¿â¿â7¿âQ¿âa¿â}¿âï¿âπ¿â·¿âÍ¿â˜¿ä¿äA¿äG¿ä|¿äÆ¿ä˛¿ã¿ã¿ã	¿ã[¿ã\¿ãh¿ã£¿ãø¿ã’¿ãÍ¿å¿å¿åG¿åÜ¿åå¿åê¿åë¿åù¿å‚¿ç¿çL¿ç§¿ç€¿é¿éj¿éØ¿é√¿è(¿è/¿èÜ¿è÷¿ê!¿ê%¿ê&¿ê2¿êd¿êÇ¿êö¿êÒ¿ê¯¿ê¸¿ê˛¿êˇ¿ë4¿ëí¿ëì¿ëü¿ë‡¿ë·¿ëÌ¿í¿í¿í ¿íB¿íC¿íu¿íò¿í…¿íË¿íˆ¿í¸¿í˝¿ì4¿ìM¿ìN¿ìÖ¿ìù¿ì£¿ì§¿ì∏¿ìÍ¿î¿î¿î!¿î"¿î.¿îe¿îï¿î±¿îÍ¿ï¿ïC¿ïv¿ï|¿ïÄ¿ïÅ¿ïç¿ï≤¿ïÀ¿ïˆ¿ï˙¿ï˚¿ñ¿ñ¿ñG¿ñ[¿ñ_¿ñ`¿ñl¿ñy¿ñœ¿ñ—¿ñ“¿ó¿ó:¿ó>¿óç¿óﬁ¿ò-¿ò~¿òœ¿òˆ¿ò˙¿ô<¿ôâ¿ô…¿ö¿ö=¿öA¿öO¿öS¿ö§¿öÍ¿õ1¿õw¿õ ¿ú¿úV¿ú¿úÖ¿úÕ¿ù¿ùk¿ù´¿ù±¿ù˝¿ûB¿ûí¿ûü¿ûŸ¿û⁄¿ü¿ü¿üf¿ü¥¿üˇ¿†¿†V¿†•¿†›¿°$¿°&¿°'¿°c¿°±¿°›¿¢¿¢¿¢.¿¢/¿¢_¿¢y¿¢°¿¢»¿¢÷¿¢‹¿¢¸¿£¿£¿£¿£P¿£p¿£û¿£«¿£’¿£€¿£˝¿§¿§¿§¿§c¿§i¿§®¿§Ô¿•4¿•j¿•î¿•¢¿•®¿•À¿•‚¿•Ê¿•Á¿¶1¿¶7¿¶u¿¶π¿¶˚¿ß/¿ßX¿ßf¿ßl¿ßé¿ß•¿ß©¿ß™¿ß∂¿ß˛¿®-¿®V¿®ï¿®£¿®©¿®™¿®Ã¿©¿©O¿©ñ¿©¬¿©Ï¿©Û¿©Ù¿™¿™2¿™>¿™T¿™Ñ¿™ÿ¿™¿™˘¿™ˇ¿´¿´¿´¿´K¿´s¿´á¿´ç¿´¨¿´Ì¿´Û¿¨'¿¨_¿¨õ¿¨ﬂ¿≠¿≠#¿≠%¿≠&¿≠Z¿≠m¿≠n¿≠ñ¿≠≤¿≠“¿≠Ú¿Æ ¿Æ¿Æ ¿Æ7¿Æ;¿Æ<¿Æ{¿Æì¿Æò¿Æ„¿Ø ¿Ø!¿Ø"¿ØF¿Øx¿Øy¿Ø°¿Ø∑¿Øÿ¿∞¿∞¿∞¿∞¿∞3¿∞J¿∞N¿∞O¿∞|¿∞ï¿∞π¿∞€¿∞È¿∞Ô¿±
¿±!¿±%¿±&¿±R¿±x¿±õ¿±Ω¿±À¿±—¿±Ï¿≤¿≤¿≤¿≤F¿≤g¿≤ì¿≤À¿≤Ÿ¿≤ﬂ¿≤‡¿≥¿≥ ¿≥9¿≥?¿≥C¿≥D¿≥{¿≥ò¿≥¿¿≥Ë¿≥ˆ¿≥¸¿¥¿¥4¿¥8¿¥9¿¥T¿¥g¿¥ä¿¥†¿¥ø¿¥≈¿µ¿µ-¿µU¿µ|¿µÃ¿∂$¿∂6¿∂@¿∂H¿∂s¿∂ò¿∂¥¿∂Á¿∂ˆ¿∑F¿∑x¿∑Ä¿∑Ü¿∑ä¿∑ã¿∑ó¿∑ﬂ¿∏#¿∏$¿∏c¿∏d¿∏±¿∏ø¿∏≈¿∏∆¿π¿π¿π#¿πF¿πd¿πÉ¿πß¿πª¿πÊ¿∫J¿∫K¿∫i¿∫∫¿∫¿¿∫¡¿ª¿ª$¿ªy¿ªá¿ªç¿ªé¿ª§¿ªÔ¿º'¿º.¿º2¿º3¿º?¿ºz¿º¢¿º∂¿ºº¿ºΩ¿º‹¿ºˆ¿º¸¿Ω(¿ΩZ¿Ωñ¿Ω∆¿Ω˙¿æ.¿æt¿æ≤¿æ∂¿æ∏¿æπ¿æˇ¿ø<¿ø=¿øk¿øl¿øx¿ø§¿ø‡¿¿¿¿¿¿¿¿¿¿¿¿K¿¿á¿¿Ø¿¿µ¿¿π¿¿∫¿¿∆¿¡¿¡J¿¡}¿¡É¿¡á¿¡à¿¡î¿¡œ¿¡˜¿¬¿¬¿¬L¿¬Ü¿¬ô¿¬ü¿¬†¿¬˜¿√B¿√Å¿√≈¿√⁄¿√‚¿√Ë¿√È¿√˚¿√ˇ¿ƒ   
_kCaretGap_kCaretHeightOffset_kFloatingCursorSizeIncrease_kFloatingCursorRadius6_kShortestDistanceSquaredWithFloatingAndRegularCursorsTextSelectionPointVerticalCaretMovementRunRenderEditable_RenderEditableCustomPaintRenderEditablePainter_TextHighlightPainter_CaretPainter_CompositeRenderEditablePainter9flutter.rendering.RenderEditable.verticalArrowKeyMovementÜ,When the user presses the upward arrow key or the downward arrow key, on
many platforms (macOS for instance), the caret will move to the previous
line or the next line, while maintaining its original horizontal location.
When it encounters a shorter line, the caret moves to the closest horizontal
location within that line, and restores the original horizontal location
when a long enough line is encountered.

Additionally, the caret will move to the beginning of the document if the
upward arrow key is pressed and the caret is already on the first line. If
the downward arrow key is pressed next, the caret will restore its original
horizontal location and move to the second line. Similarly the caret moves
to the end of the document if the downward arrow key is pressed when it's
already on the last line.

Consider a left-aligned paragraph:
  aa|
  a
  aaa
where the caret was initially placed at the end of the first line. Pressing
the downward arrow key once will move the caret to the end of the second
line, and twice the arrow key moves to the third line after the second "a"
on that line. Pressing the downward arrow key again, the caret will move to
the end of the third line (the end of the document). Pressing the upward
arrow key in this state will result in the caret moving to the end of the
second line.

Vertical caret runs are typically interrupted when the layout of the text
changes (including when the text itself changes), or when the selection is
changed by other input events or programmatically (for example, when the
user pressed the left arrow key).5flutter.rendering.RenderEditable.paintCursorAboveTextÄ≠If the cursor should be painted on top of the text or underneath it.

By default, the cursor should be painted on top for iOS platforms and
underneath for Android platforms.-flutter.rendering.RenderEditable.cursorOffsetÅVThe offset that is used, in pixels, when painting the cursor on screen.

By default, the cursor position should be set to an offset of
(-[cursorWidth] * 0.5, 0.0) on iOS platforms and (0, 0) on Android
platforms. The origin from where the offset is applied to is the arbitrary
location where the cursor ends up being rendered from by default.=flutter.rendering.RenderEditable.lastSecondaryTapDownPositionLThe position of the most recent secondary tap down event on this text
input./flutter.rendering.RenderEditable.selectPositionÅZThis method is mainly used to translate user inputs in global positions
into a [TextSelection]. When used in conjunction with a [EditableText],
the selection change is fed back into [TextEditingController.selection].

If you have a [TextEditingController], it's generally easier to
programmatically manipulate its `value` or `selection` directly. 