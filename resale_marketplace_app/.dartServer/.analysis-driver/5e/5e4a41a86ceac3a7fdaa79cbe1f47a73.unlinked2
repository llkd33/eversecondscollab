x_stateonUserTapAlwaysCalled	onUserTapmagnifierConfigurationgroupId
controller	focusNode
decorationkeyboardTypetextInputActiontextCapitalizationstyle
strutStyle	textAligntextAlignVerticaltextDirection	autofocusstatesControllerobscuringCharacterobscureTextautocorrectsmartDashesTypesmartQuotesTypeenableSuggestionsmaxLinesminLinesexpandsreadOnlytoolbarOptions
showCursornoMaxLength	maxLengthmaxLengthEnforcement	onChangedonEditingCompleteonSubmittedonAppPrivateCommandinputFormattersenabledignorePointerscursorWidthcursorHeightcursorRadiuscursorOpacityAnimatescursorColorcursorErrorColorselectionHeightStyleselectionWidthStylekeyboardAppearancescrollPaddingenableInteractiveSelectionselectionControlsdragStartBehaviorselectionEnabledonTaponTapAlwaysCalledonTapOutsideonTapUpOutsidemouseCursorbuildCounterscrollPhysicsscrollControllerautofillHintsclipBehaviorrestorationIdscribbleEnabledstylusHandwritingEnabledenableIMEPersonalizedLearningcontentInsertionConfigurationcontextMenuBuildercanRequestFocusundoController_defaultContextMenuBuilderspellCheckConfigurationmaterialMisspelledTextStyle*defaultSpellCheckSuggestionsToolbarBuilder#inferAndroidSpellCheckConfigurationcreateStatedebugFillProperties_controller_effectiveController
_focusNode_effectiveFocusNode_effectiveMaxLengthEnforcement_isHoveringneedsCounter_showSelectionHandles _selectionGestureDetectorBuilderforcePressEnablededitableTextKey
_isEnabled_currentLength_hasIntrinsicError	_hasError_errorColor_getEffectiveDecoration	initState_canRequestFocusdidChangeDependenciesdidUpdateWidgetrestoreState_registerController_createLocalControllerdispose_editableText_requestKeyboard_shouldShowSelectionHandles_handleFocusChanged_handleSelectionChanged_handleSelectionHandleTapped_handleHover_internalStatesController_handleStatesControllerChange_statesController_initStatesController
autofillIdautofilltextInputConfiguration_getInputStyleForStatebuild	InputCounterWidgetBuilder)_TextFieldSelectionGestureDetectorBuilder	TextField_TextFieldState_m2StateInputStyle_m2CounterErrorStyle_m3StateInputStyle_m3InputStyle_m3CounterErrorStyleÅåBoxHeightStyleBoxWidthStyleiOSHorizontalOffsetSmartDashesTypeSmartQuotesTypeTextCapitalizationTextInputActionTextInputTypebuildCounterWidgetBuildContextintbool#TextSelectionGestureDetectorBuilderstatedelegateoverridewidgetonTapAlwaysCalledvoidonTapcallMaterialForm	FormFieldTextFormFieldEditableTextAutomaticKeepAliveClientMixinwantKeepAliveTextEditingControllerdisposeListViewCustomScrollViewInputDecorationOutlineInputBordertextScaffold
ScrollableScrollNotificationObserverTextSelectionOverlayInputDecoratorStatefulWidgetnoMaxLengthMaxLengthEnforcementnone LengthLimitingTextInputFormattertight	TextAlignstart
DeprecatedallDragStartBehaviorStringCliphardEdgedefaultStylusHandwritingEnabledlengthdisabledenabled	identicalnewline	multilineCupertinoTextMagnifierTextMagnifierTextMagnifierConfigurationObject	FocusNode
FocusScopedone	TextTheme	bodyLarge	ThemeDatauseMaterial3titleMediumdisabledColor	TextStyle
StrutStyleTextAlignVerticalTextDirectionWidgetStatehoverederrorfocusedWidgetStatesControllervalueStatesetStateWidgetStatePropertyupdateMaterialStatesControllerToolbarOptions
errorStyleValueChangedVoidCallbacknextpreviousAppPrivateCommandCallbackListTextInputFormatterdoubleRadiusDefaultSelectionStylecursorColorplatformTargetPlatformiOSmacOSCupertinoThemeDataprimaryColorColorSchemeprimarycolorSchemeColorcolor
brightness
Brightness
EdgeInsetsTextSelectionControlsGestureDetectorListenerGestureTapCallback	TapRegionTapRegionCallbackTapRegionUpCallbackWidgetStateMouseCursorresolvetextableMouseCursorcountercounterText	SemanticsTextsemanticsLabelScrollPhysicsScrollControllerIterableRestorableTextEditingControllerRestorationBucketRestorationScopeRestorationManagerContentInsertionConfigurationAdaptiveTextSelectionToolbarBrowserContextMenuEditableTextContextMenuBuilderUndoHistoryControllerEditableTextStatedefaultTargetPlatformSystemContextMenuisSupportededitableTexteditableTextStateSpellCheckConfigurationmisspelledTextStyleCupertinoTextFieldcupertinoMisspelledTextStyle
decorationTextDecoration	underlinedecorationColorColorsreddecorationStyleTextDecorationStylewavy#spellCheckSuggestionsToolbarBuilder*defaultSpellCheckSuggestionsToolbarBuildervisibleForTesting%CupertinoSpellCheckSuggestionsToolbarandroidfuchsialinuxwindowsSpellCheckSuggestionsToolbarcopyWithmaterialMisspelledTextStyleDiagnosticPropertiesBuilderdebugFillPropertiesaddDiagnosticsPropertydefaultValueEnumPropertyIntPropertyDoublePropertyColorPropertyEdgeInsetsGeometryFlagPropertyifFalseallowedMimeTypes!kDefaultContentInsertionMimeTypesRestorationMixin+TextSelectionGestureDetectorBuilderDelegateAutofillClient
controller	focusNodemaxLengthEnforcementgetDefaultMaxLengthEnforcementThemeofcontext	maxLength	GlobalKeyselectionEnabled
charactersrestorePending	errorTextcursorErrorColorMaterialLocalizationsapplyDefaultsinputDecorationThemehintMaxLinesmaxLineshasFocuscurrentLength	isFocused	container
liveRegionchildclamp remainingTextFieldCharacterCountcounterStylesemanticCounterText	initStatecanRequestFocusaddListenerNavigationMode
MediaQuerymaybeNavigationModeOftraditionaldirectionaldidChangeDependenciesdidUpdateWidgetunregisterFromRestorationremoveListenerreadOnly	selectionisCollapsedstatesControllerMaterialStateregisterForRestorationTextEditingValue	fromValuerestorationIdcurrentStaterequestKeyboardSelectionChangedCauseshouldShowSelectionToolbarkeyboard	longPressstylusHandwriting
isNotEmptyTextSelectionbringIntoViewextentdraghideToolbartoggleToolbar
autofillIdautofillTextInputConfigurationautofillHintstoListgrowableAutofillConfigurationuniqueIdentifiercurrentEditingValuehintTexttextInputConfigurationautofillConfigurationMaterialStateProperty	resolveAsmergedebugCheckHasMaterial"debugCheckHasMaterialLocalizationsdebugCheckHasDirectionalitystyleinheritfontSizetextBaseline	textThemekeyboardAppearanceinputFormattersinferIOSSpellCheckConfigurationspellCheckConfiguration#inferAndroidSpellCheckConfigurationselectionControlscursorOpacityAnimatesOffsetcursorRadiusCupertinoTheme$cupertinoTextSelectionHandleControlscupertinoThemeselectionColorwithOpacitycirculardevicePixelRatioOf+cupertinoDesktopTextSelectionHandleControlsrequestFocusunfocus#materialTextSelectionHandleControls"desktopTextSelectionHandleControlsRepaintBoundaryUnmanagedRestorationScopebucketkeytoolbarOptions
showCursorshowSelectionHandlesundoControllerkeyboardTypetextInputActiontextCapitalization
strutStyle	textAligntextDirection	autofocusobscuringCharacterobscureTextautocorrectsmartDashesTypesmartQuotesTypeenableSuggestionsminLinesexpands	onChangedonSelectionChangedonEditingCompleteonSubmittedonAppPrivateCommandgroupIdonSelectionHandleTappedonTapOutsideonTapUpOutsiderendererIgnoresPointermouseCursordefercursorWidthcursorHeightselectionHeightStyleselectionWidthStylecursorOffsetpaintCursorAboveTextbackgroundCursorColorCupertinoColorsinactiveGrayscrollPaddingenableInteractiveSelectiondragStartBehaviorscrollControllerscrollPhysicsautofillClientautocorrectionTextRectColorclipBehaviorscribbleEnabledstylusHandwritingEnabledenableIMEPersonalizedLearningcontentInsertionConfigurationcontextMenuBuildermagnifierConfigurationadaptiveMagnifierConfigurationAnimatedBuilder	animation
Listenablebuilder	baseStyletextAlignVertical
isHoveringisEmptyMaterialStateMouseCursorMouseRegioncursoronEnterPointerEnterEventonExitPointerExitEventTextFieldTapRegionIgnorePointerignoringignorePointersmaxValueLengthcurrentValueLengthisValid	collapsedoffsetonDidGainAccessibilityFocusonDidLoseAccessibilityFocusonFocusbuildGestureDetectorbehaviorHitTestBehaviortranslucentMaterialStateTextStyleresolveWithSetstatescontains	bodySmall#TextSelectionGestureDetectorBuilderStatefulWidgetStateRestorationMixin+TextSelectionGestureDetectorBuilderDelegateAutofillClientﬁx¢r˛⁄ıÙõ¿Ówïf/ÑCÑúSmartDashesTypeSmartQuotesTypeTextCapitalizationTextInputActionTextInputType Ñpackage:flutter/services.dart ÅsÅïBoxHeightStyleBoxWidthStyle Å]   ÅmÅpuiÅpdart:ui  Åô   package:flutter/cupertino.dart  Å¬   package:flutter/foundation.dart  ÅÏ   package:flutter/gestures.dart  Ç   package:flutter/rendering.dart  Ç=   package:flutter/services.dart  Çf   $adaptive_text_selection_toolbar.dart  Çï   color_scheme.dart  Ç±   colors.dart  Ç«   
debug.dart  Ç‹   desktop_text_selection.dart  É   input_decorator.dart  É!   magnifier.dart  É:   material_localizations.dart  É`   material_state.dartÉõÉ≥iOSHorizontalOffset É~   selectable_text.dart  É∂   $spell_check_suggestions_toolbar.dart  ÉÂ   text_selection.dart  Ñ   
theme.dart¿ é ¿
á: <ÄÜÄ§Ä•Ä…ÄÈÅ	Å0ÅRÅ[Å\ÅóÅòÅ¡ÅÎÇÇ<ÇdÇeÇîÇ∞Ç∆Ç€ÉÉ É9É_É}ÉµÉ‰ÑÑÑÑ?ÑûÑüÑ∑Ñ’ÑÙÑıÖ.ÖRÖhÖóÖµÖ∂ÖÒÜÜÜ`ÜÜÄÜ—á#áBáJáKá©á˜àà+à,àLàMàYàûàüà´à¿à·àÂàÁàËâ
ââ_âyâ}âÕäägäçäëä÷ã%ãsã¡ãÌãÒå@åëå€ç(çuçyç…ç˝ééPétéxé±é˛èOèüè≠è¿èƒêêhê{êêÕëëdëùë°ë∑ëªëœíípíÜíäí◊íÁíÎìììSì°ì¿ìƒìÿî(î6î:îáîóîõîœî”ïï;ï?ïéïŸñ*ñvñÑñàñÿóóóPóÑóàóÕòòlò{òòªòøò˜ò˚ôô]ôôÉô–ô‡ô‰öööTöööÍõ7õcõgõuõyõ∫ú	ú9úàú’ù ù2ùrù◊ûEû≥üü4ü`üfü∏üÓüÙ†D†ì†ü†•†Û°C°r°x°¬¢¢V¢°¢Í£+£t£z£ø£˘§§p§∑§˝••T•†•Î•˚¶¶P¶Ñ¶ä¶÷ß'ßvß|ßåßíß⁄®!®5®D®e®z®é®ß®÷®˜©©H©X©m©ì©Ø©«©‚©Û™™Y™_™x™ç™©™ƒ™Á´´"´H´n´ë´®´ª´’´È¨¨¨8¨N¨l¨Ü¨ò¨±¨Õ¨‰¨˚≠≠1≠L≠Ö≠º≠ŸÆÆDÆjÆÜÆñÆ∫Æ—ÆÍØ ØØ2ØJØuØùØƒØ‹ØÌ∞∞Z∞`∞Å∞”±±<±]±±†±œ±Ë≤J≤c≤≈≤ˆ≥'≥6≥É≥∑≥¡≥–¥¥R¥\¥≤µµèµûµﬂµ˝∂8∂™∂¥∂ ∑%∑Ñ∑Ö∑√∑…∏∏e∏Æ∏¥∏„∏È∏ˇπXπ^π¥π∆∫∫∫7∫O∫P∫v∫|∫ƒ∫Ô∫ª"ª(ªsª∏ªæººGºMº[ºìºùº£ºﬂºÂΩ3ΩMΩSΩaΩ•ΩØΩµΩÒΩ˜æ	ææXæ{æÅæ—øøfø≠øÈ¿ @+¿ @t¿ @z¿ @ ¿ A¿ A:¿ A;¿ Ao¿ Au¿ Aø¿ B¿ B	¿ BM¿ Bù¿ B¬¿ B√¿ B¸¿ C ¿ C!¿ C]¿ Cñ¿ Cú¿ C›¿ D#¿ D8¿ Db¿ Dc¿ D¢¿ D—¿ D“¿ E¿ E
¿ EU¿ E[¿ EØ¿ E˘¿ Eˇ¿ FQ¿ Fû¿ F‘¿ FÓ¿ FÔ¿ G&¿ GF¿ GG¿ G}¿ Gö¿ Gõ¿ G‹¿ H
¿ H¿ HE¿ Hk¿ Hl¿ H¢¿ H∫¿ Hª¿ I¿ IW¿ Iç¿ Iì¿ I…¿ J
¿ JU¿ Jë¿ J√¿ J…¿ K¿ Ke¿ K∏¿ K˚¿ LH¿ L°¿ LÔ¿ ME¿ Mo¿ M£¿ M§¿ M„¿ N¿ N¿ N?¿ NY¿ NZ¿ Ní¿ N¨¿ N≠¿ NÙ¿ O¿ O¿ Oe¿ Oé¿ Oè¿ Oÿ¿ O¯¿ O˘¿ P.¿ P¿ Pî¿ P´¿ P¨¿ P·¿ Q2¿ QG¿ Q^¿ Q_¿ Qì¿ Q©¿ Q™¿ Qﬂ¿ Qˆ¿ Q˜¿ R¿ R%¿ Ru¿ RΩ¿ RÓ¿ R˝¿ S&¿ S_¿ Sc¿ Sã¿ Så¿ S√¿ S›¿ Sﬁ¿ T)¿ TW¿ T|¿ T}¿ TÃ¿ T‚¿ TË¿ U&¿ Ut¿ U¬¿ V¿ V¿ Vb¿ Vú¿ Vø¿ V≈¿ W¿ W`¿ Wf¿ W∏¿ X¿ XX¿ X©¿ XØ¿ X˙¿ Y¿ Y¿ Yf¿ Yµ¿ Z¿ Z¿ Z"¿ Zm¿ ZÖ¿ ZÜ¿ Z≈¿ ZÀ¿ [¿ [¿ [`¿ [î¿ [ï¿ [À¿ [—¿ [·¿ [Á¿ \'¿ \m¿ \ö¿ \⁄¿ ]¿ ]¿ ]B¿ ]k¿ ]l¿ ]§¿ ]™¿ ]∫¿ ]¿¿ ^¿ ^V¿ ^y¿ ^§¿ ^•¿ ^Â¿ _¿ _¿ _Z¿ _ç¿ _é¿ _”¿ _˚¿ `¿ `>¿ `h¿ `¿ `Ä¿ `Ω¿ `√¿ `¯¿ a¿ a¿ aO¿ ak¿ al¿ a•¿ a√¿ aƒ¿ a˝¿ b¿ b¿ b^¿ bÉ¿ bÑ¿ b£¿ b©¿ bÙ¿ c¿ c¿ c@¿ cÑ¿ c—¿ d¿ da¿ d}¿ d~¿ dÀ¿ d—¿ e¿ eP¿ eÜ¿ eß¿ e®¿ eÚ¿ e¯¿ f7¿ fg¿ fh¿ f≤¿ f∏¿ fˆ¿ g$¿ g%¿ gK¿ gQ¿ gÑ¿ gä¿ gæ¿ gÊ¿ gÁ¿ h!¿ hC¿ hD¿ hã¿ h¥¿ hµ¿ hÛ¿ i%¿ i&¿ ib¿ iè¿ iê¿ iÕ¿ j¿ j	¿ j<¿ jp¿ jv¿ j«¿ k¿ kf¿ kå¿ kí¿ k‚¿ l¿ l ¿ lj¿ l|¿ lÇ¿ lœ¿ l˝¿ m¿ mJ¿ mä¿ mü¿ m•¿ m˜¿ n¿ n&¿ n'¿ n]¿ nc¿ n≤¿ n˝¿ o¿ o¿ oW¿ o]¿ os¿ oø¿ p¿ pL¿ pR¿ p¢¿ pÕ¿ p”¿ q,¿ q>¿ qD¿ qT¿ qZ¿ qó¿ q¿¿ q¡¿ q¸¿ r)¿ r*¿ rv¿ rÑ¿ rä¿ r¿¿ s¿ s¿ s2¿ sR¿ sr¿ sì¿ sô¿ sÈ¿ sÔ¿ t=¿ tç¿ t€¿ t˜¿ u¿ u¿ uc¿ ui¿ u≥¿ v¿ vR¿ vX¿ vû¿ vÎ¿ w5¿ w;¿ wQ¿ w_¿ wu¿ wì¿ wù¿ w√¿ wÊ¿ x	¿ x¿ x¿ x2¿ xg¿ xî¿ xü¿ xß¿ x±¿ x√¿ x…¿ y¿ y3¿ yd¿ ye¿ yü¿ y≈¿ y∆¿ z¿ z/¿ z0¿ zj¿ zÆ¿ z◊¿ zÿ¿ {¿ {¿ {7¿ {R¿ {S¿ {é¿ {‘¿ {⁄¿ |(¿ |u¿ |≈¿ }¿ }?¿ }E¿ }í¿ }„¿ }È¿ }˘¿ }ˇ¿ ~L¿ ~^¿ ~s¿ ~í¿ ~ì¿ ~œ¿ ~ﬁ¿ ¿ G¿ K¿ i¿ j¿ Ø¿ ÷¿ ◊¿ Ä,¿ ÄX¿ ÄY¿ Ä£¿ ÄÈ¿ ÄÍ¿ Å)¿ Å/¿ Åw¿ Å}¿ Åç¿ Åì¿ Å◊¿ Ç(¿ Çk¿ Çß¿ Ç®¿ ÇÔ¿ Çı¿ É=¿ Éå¿ É–¿ ÉÓ¿ ÉÔ¿ Ñ%¿ ÑT¿ ÑU¿ ÑÅ¿ Ñõ¿ Ñƒ¿ Ñ ¿ Ö+¿ Ö~¿ ÖÑ¿ Ö‡¿ Ö‰¿ ÖÂ¿ Ü)¿ Ü/¿ Ü¿ ÜÀ¿ á¿ á¿ áU¿ á[¿ ák¿ áª¿ á‡¿ à1¿ àp¿ à≤¿ à‹¿ à˝¿ â,¿ â1¿ â2¿ â{¿ âÅ¿ â–¿ â¿ âˆ¿ ä¿ äP¿ äf¿ ä≤¿ ä˙¿ ãJ¿ ãî¿ ã©¿ ãÂ¿ ãˇ¿ å(¿ å.¿ åS¿ år¿ åì¿ å÷¿ ç¿ ç¿ ç4¿ çW¿ çx¿ çõ¿ ç˚¿ é¿ é¿ é¿ éV¿ é†¿ é∞¿ éˆ¿ è"¿ è(¿ èÜ¿ èΩ¿ è√¿ èÊ¿ ê¿ êW¿ êÇ¿ ê¡¿ ë¿ ë¿ ë¿ ë¿ ë¿ ëP¿ ëQ¿ ë]¿ ë¢¿ ëÕ¿ ë·¿ íA¿ íH¿ í®¿ íº¿ íÓ¿ ì¿ ì ¿ ì<¿ ìE¿ ìL¿ ì£¿ ì∑¿ ì„¿ ì˘¿ î¿ î<¿ îE¿ îL¿ î`¿ îä¿ î¢¿ î∏¿ î‚¿ îÎ¿ îÚ¿ ïJ¿ ï¶¿ ï∫¿ ñ¿ ñ!¿ ñÅ¿ ñ‡¿ ñÙ¿ ó¿ ó4¿ óM¿ ó•¿ óÆ¿ óµ¿ ó…¿ óÓ¿ ò	¿ ò"¿ òz¿ òÉ¿ òä¿ òû¿ ò˚¿ ô¿ ôJ¿ ôï¿ ôÌ¿ ö:¿ öN¿ öx¿ öò¿ ö∂¿ ö“¿ ö€¿ ö‚¿ öˆ¿ õS¿ õZ¿ õn¿ õñ¿ õ¥¿ õ–¿ õˇ¿ ú¿ ú¿ ús¿ úá¿ úµ¿ ú“¿ úÌ¿ ù	¿ ù¿ ù¿ ù~¿ ù—¿ û'¿ ûä¿ ûû¿ ü¿ ü
¿ ü]¿ ü∫¿ üŒ¿ †3¿ †:¿ †N¿ †}¿ †ñ¿ †≠¿ †ﬂ¿ †Ë¿ †Ô¿ °¿ °¿ °3¿ °T¿ °p¿ °ó¿ °†¿ °ß¿ °ª¿ °Ì¿ ¢
¿ ¢%¿ ¢A¿ ¢J¿ ¢Q¿ ¢e¿ ¢í¿ ¢Æ¿ ¢»¿ ¢‰¿ ¢Ì¿ ¢Ù¿ £¿ £f¿ £m¿ £Å¿ £›¿ £‰¿ £¯¿ §Q¿ §X¿ §l¿ §ç¿ §±¿ §”¿ •¿ • ¿ •'¿ •;¿ •\¿ •Ö¿ •¨¿ •»¿ •—¿ •ÿ¿ •Ï¿ ¶ ¿ ¶C¿ ¶d¿ ¶Ä¿ ¶â¿ ¶ê¿ ¶§¿ ¶Õ¿ ¶Ô¿ ß<¿ ßR¿ ßÑ¿ ßß¿ ß‹¿ ßÂ¿ ßÏ¿ ß¿ ßÚ¿ ßÛ¿ ®"¿ ®<¿ ®â¿ ®π¿ ©¿ ©¿ ©0¿ ©â¿ ©ä¿ ©«¿ ©Ï¿ ™O¿ ™P¿ ™l¿ ™m¿ ™à¿ ™™¿ ™Õ¿ ™˚¿ ™¸¿ ´"¿ ´#¿ ´v¿ ´w¿ ´±¿ ´Ω¿ ´‹¿ ´›¿ ´È¿ ¨@¿ ¨A¿ ¨M¿ ¨ì¿ ¨‘¿ ¨’¿ ≠$¿ ≠%¿ ≠t¿ ≠u¿ ≠ñ¿ ≠∏¿ ≠◊¿ ≠¯¿ Æ]¿ Æ±¿ Æ≤¿ Æ ¿ Æ¯¿ Ø"¿ Ø<¿ Ø=¿ ØX¿ Øy¿ ØÆ¿ ØŸ¿ Ø⁄¿ ∞¿ ∞[¿ ∞é¿ ∞Ì¿ ±$¿ ±7¿ ±V¿ ±¢¿ ±≠¿ ±Æ¿ ±˛¿ ≤X¿ ≤z¿ ≤Ä¿ ≤Å¿ ≤À¿ ≤‡¿ ≥¿ ≥=¿ ≥p¿ ≥ó¿ ≥“¿ ¥¿ ¥¿ ¥B¿ ¥g¿ ¥Ö¿ ¥é¿ ¥ﬁ¿ µ ¿ µZ¿ µb¿ µü¿ µ•¿ µ¶¿ µ ¿ µÏ¿ ∂¿ ∂¿ ∂3¿ ∂X¿ ∂Y¿ ∂ä¿ ∂´¿ ∂÷¿ ∑¿ ∑`¿ ∑∑¿ ∑Ω¿ ∑æ¿ ∑‹¿ ∏¿ ∏?¿ ∏U¿ ∏É¿ ∏ß¿ ∏◊¿ π	¿ π+¿ π]¿ πf¿ πl¿ πm¿ πñ¿ π∂¿ πÊ¿ πÌ¿ πÒ¿ πÚ¿ π˛¿ ∫¿ ∫*¿ ∫â¿ ∫Æ¿ ∫Œ¿ ∫‘¿ ª$¿ ª^¿ ª{¿ ª¿ ªÄ¿ ªû¿ ªæ¿ º¿ º*¿ ºt¿ ºû¿ º•¿ º©¿ º™¿ º∂¿ º◊¿ º˙¿ Ω6¿ Ω:¿ Ω;¿ ΩG¿ Ωu¿ Ωõ¿ Ω‡¿ æ¿ æg¿ æñ¿ æ¥¿ æŒ¿ æ‘¿ æ’¿ ø¿ øX¿ ø¢¿ ø®¿ ø©¿ øÂ¿ øÊ¿ ¿E¿ ¿}¿ ¿Ø¿ ¿∑¿ ¿Ω¿ ¿æ¿ ¿ˇ¿ ¡D¿ ¡à¿ ¡›¿ ¬¿ ¬*¿ ¬{¿ ¬®¿ ¬÷¿ √ ¿ √¿ √'¿ √-¿ √1¿ √2¿ √>¿ √á¿ √¶¿ √√¿ √…¿ √Õ¿ √Œ¿ √Ì¿ ƒ¿ ƒF¿ ƒJ¿ ƒK¿ ƒÜ¿ ƒß¿ ƒπ¿ ƒœ¿ ƒˇ¿ ≈?¿ ≈Z¿ ≈w¿ ≈}¿ ≈Å¿ ≈Ç¿ ≈é¿ ≈√¿ ≈ƒ¿ ≈–¿ ≈„¿ ∆ ¿ ∆;¿ ∆W¿ ∆ú¿ ∆∆¿ ∆€¿ ∆ﬂ¿ ∆‡¿ «(¿ «)¿ «E¿ «k¿ «o¿ «p¿ «≥¿ »¿ »A¿ »â¿ »ù¿ »£¿ »§¿ »◊¿ »Î¿ »Ò¿ »Ú¿ …;¿ …O¿ …U¿ …V¿ …m¿ …Å¿ …á¿ …à¿ …º¿ …¯¿  ¿  ¿  ¿  B¿  U¿  [¿  \¿  n¿  r¿  s¿  í¿  §¿  ¿ À¿ À¿ À_¿ Àc¿ Àd¿ Àº¿ Ã
¿ ÃG¿ Ã[¿ Ãï¿ Ãü¿ Ã•¿ Ã¶¿ Ã–¿ ÃÔ¿ Õ¿ Õ1¿ ÕT¿ Õw¿ Õö¿ Õ“¿ Œ¿ Œ¿ Œ¿ Œ¿ ŒG¿ Œf¿ Œâ¿ Œ¨¿ Œª¿ Œ‹¿ Œ˝¿ œ ¿ œS¿ œ{¿ œÖ¿ œã¿ œè¿ œê¿ œÃ¿ œÙ¿ –*¿ –P¿ –V¿ –Z¿ –[¿ –Ä¿ –£¿ –∑¿ –◊¿ –·¿ —%¿ —+¿ —/¿ —0¿ —Q¿ —à¿ —â¿ —≤¿ —ˆ¿ “¿ “¿ “¿ “D¿ “Å¿ “Ç¿ “£¿ “Œ¿ ”¿ ”¿ ”U¿ ”ó¿ ”Í¿ ‘(¿ ‘j¿ ‘n¿ ‘o¿ ‘ô¿ ‘•¿ ‘€¿ ‘‹¿ ‘Ë¿ ’G¿ ’H¿ ’T¿ ’ä¿ ’·¿ ÷¿ ÷7¿ ÷\¿ ÷à¿ ÷¥¿ ÷Û¿ ◊D¿ ◊R¿ ◊Ä¿ ◊Å¿ ◊º¿ ◊¿ ◊˜¿ ◊˚¿ ÿ#¿ ÿ$¿ ÿZ¿ ÿâ¿ ÿÀ¿ Ÿ#¿ ŸB¿ ŸI¿ ŸÆ¿ Ÿ⁄¿ Ÿﬁ¿ Ÿﬂ¿ ŸÎ¿ ⁄¿ ⁄>¿ ⁄w¿ ⁄©¿ ⁄µ¿ ⁄’¿ ⁄˘¿ €L¿ €è¿ €ñ¿ €ó¿ €∆¿ ‹¿ ‹`¿ ‹t¿ ‹ì¿ ‹ö¿ ‹Œ¿ › ¿ ›<¿ ›ï¿ ›ÿ¿ ﬁ¿ ﬁS¿ ﬁu¿ ﬁô¿ ﬁ√¿ ﬁﬂ¿ ﬂ¿ ﬂ*¿ ﬂ1¿ ﬂ2¿ ﬂÅ¿ ﬂ“¿ ‡¿ ‡N¿ ‡s¿ ‡í¿ ‡≥¿ ·	¿ ·3¿ ·>¿ ·a¿ ·Ñ¿ ·•¿ ·»¿ ‚¿ ‚C¿ ‚N¿ ‚T¿ ‚U¿ ‚¢¿ ‚«¿ „¿ „!¿ „>¿ „^¿ „Ü¿ „∂¿ „È¿ ‰¿ ‰¿ ‰;¿ ‰Z¿ ‰®¿ ‰ ¿ Â¿ Â7¿ Â_¿ Âu¿ Âã¿ Â©¿ Ê¿ Ê%¿ ÊÅ¿ Ê∂¿ Á¿ ÁL¿ ÁM¿ Án¿ Áº¿ Áﬂ¿ Ë.¿ ËS¿ Ë|¿ Ëí¿ Ë®¿ Ë∆¿ È)¿ ÈB¿ Èû¿ È”¿ Í3¿ Íb¿ Í∫¿ Î¿ Î@¿ ÎL¿ ÎW¿ ÎÜ¿ ÎØ¿ Î∫¿ Îª¿ Îﬁ¿ Ï¿ Ï$¿ Ïk¿ Ïë¿ Ï∫¿ Ï–¿ ÏÊ¿ Ì¿ Ìe¿ Ì~¿ Ìÿ¿ ÌŸ¿ Ì˙¿ Ó¿ Óc¿ Óâ¿ Ó≤¿ Ó»¿ Óﬁ¿ Ó¸¿ Ô]¿ Ôv¿ Ô–¿ Ôˇ¿ W¿ ≠¿ ›¿ È¿ Ù¿ Ò#¿ ÒL¿ ÒW¿ ÒX¿ Ò{¿ Òû¿ Ò‰¿ Ú
¿ Ú3¿ ÚI¿ Ú_¿ Ú}¿ Úﬁ¿ Ú˜¿ ÛQ¿ ÛÄ¿ Ûÿ¿ Ù.¿ Ù^¿ Ùj¿ Ùu¿ Ù§¿ ÙÕ¿ Ùÿ¿ Ùﬁ¿ Ùﬂ¿ ı¿ ı+¿ ıC¿ ı`¿ ıÄ¿ ı¥¿ ıÂ¿ ˆ¿ ˆE¿ ˆg¿ ˆá¿ ˆ∏¿ ˆÂ¿ ˜¿ ˜Q¿ ˜i¿ ˜í¿ ˜π¿ ˜Ë¿ ¯¿ ¯H¿ ¯s¿ ¯û¿ ¯—¿ ˘¿ ˘;¿ ˘`¿ ˘Ö¿ ˘®¿ ˘˜¿ ˙=¿ ˙í¿ ˙π¿ ˙¿ ˚'¿ ˚R¿ ˚ç¿ ˚∞¿ ˚Ò¿ ¸¿ ¸O¿ ¸v¿ ¸û¿ ¸Ï¿ ˝¿ ˝D¿ ˝j¿ ˝é¿ ˝À¿ ˛¿ ˛>¿ ˛d¿ ˛ö¿ ˛Ÿ¿ ˇ¿ ˇ:¿ ˇÉ¿ ˇ∫¿ ˇÔ¿ ¿ >¿ Ç¿ Ø¿ ‘¿¿L¿õ¿Í¿#¿_¿Å¿ﬁ¿È¿Ú¿˘¿˙¿¿>¿à¿¡¿‚¿¿:¿c¿ú¿¡¿Ï¿ ¿E¿_¿l¿w¿ç¿ñ¿ú¿˜¿6¿U¿\¿]¿Ö¿Ã¿¿¿C¿P¿v¿|¿}¿ï¿π¿˘¿8¿Y¿w¿±¿”¿	¿	Q¿	q¿	ñ¿	œ¿
¿
¿
>¿
]¿
|¿
≈¿¿c¿Ç¿û¿Ã¿Á¿5¿É¿ú¿ª¿⁄¿¸¿=¿£¿¿a¿√¿!¿>¿?¿Ñ¿√¿¿<¿õ¿˘¿X¿∑¿¿U¿t¿Œ¿'¿Ñ¿µ¿Â¿¿¿;¿Y¿j¿y¿√¿¯¿¿#¿0¿;¿D¿K¿O¿Q¿R¿â¿Œ¿ˇ¿4¿j¿r¿µ¿Ω¿æ¿ˆ¿W¿X¿à¿â¿Ã¿¿8¿k¿l¿¿˜¿(¿Ü¿ä¿”¿◊¿ÿ¿1¿2¿j¿…¿€¿‹¿
   Ä¨/// @docImport 'input_border.dart';
/// @docImport 'material.dart';
/// @docImport 'scaffold.dart';
/// @docImport 'text_form_field.dart';
/// @docImport 'text_theme.dart';Å\ÅqÅpÅsÅïÅò   Å¡   ÅÎ   Ç   Ç<   Çe   Çî   Ç∞   Ç∆   Ç€   É   É    É9   É_   É}  ÉõÉ≥Éµ   É‰   Ñ   ÑÑCÑú áKÅõáQáQ  á´á´ á´á‘  á÷ááÔ  	àá˝àààà(à!àà#à.àDàD  àONàdàd   àOàPà°Cà≤à≤   à°à¢ àË¿ ü	üüñ,/// A Material Design text field.
///
/// A text field lets the user enter text, either with hardware keyboard or with
/// an onscreen keyboard.
///
/// The text field calls the [onChanged] callback whenever the user changes the
/// text in the field. If the user indicates that they are done typing in the
/// field (e.g., by pressing a button on the soft keyboard), the text field
/// calls the [onSubmitted] callback.
///
/// To control the text that is displayed in the text field, use the
/// [controller]. For example, to set the initial value of the text field, use
/// a [controller] that already contains some text. The [controller] can also
/// control the selection and composing region (and to observe changes to the
/// text, selection, and composing region).
///
/// By default, a text field has a [decoration] that draws a divider below the
/// text field. You can use the [decoration] property to control the decoration,
/// for example by adding a label or an icon. If you set the [decoration]
/// property to null, the decoration will be removed entirely, including the
/// extra padding introduced by the decoration to save space for the labels.
///
/// If [decoration] is non-null (which is the default), the text field requires
/// one of its ancestors to be a [Material] widget.
///
/// To integrate the [TextField] into a [Form] with other [FormField] widgets,
/// consider using [TextFormField].
///
/// {@template flutter.material.textfield.wantKeepAlive}
/// When the widget has focus, it will prevent itself from disposing via its
/// underlying [EditableText]'s [AutomaticKeepAliveClientMixin.wantKeepAlive] in
/// order to avoid losing the selection. Removing the focus will allow it to be
/// disposed.
/// {@endtemplate}
///
/// Remember to call [TextEditingController.dispose] on the [TextEditingController]
/// when it is no longer needed. This will ensure we discard any resources used
/// by the object.
///
/// If this field is part of a scrolling container that lazily constructs its
/// children, like a [ListView] or a [CustomScrollView], then a [controller]
/// should be specified. The controller's lifetime should be managed by a
/// stateful widget ancestor of the scrolling container.
///
/// ## Obscured Input
///
/// {@tool dartpad}
/// This example shows how to create a [TextField] that will obscure input. The
/// [InputDecoration] surrounds the field in a border using [OutlineInputBorder]
/// and adds a label.
///
/// ** See code in examples/api/lib/material/text_field/text_field.0.dart **
/// {@end-tool}
///
/// ## Reading values
///
/// A common way to read a value from a TextField is to use the [onSubmitted]
/// callback. This callback is applied to the text field's current value when
/// the user finishes editing.
///
/// {@tool dartpad}
/// This sample shows how to get a value from a TextField via the [onSubmitted]
/// callback.
///
/// ** See code in examples/api/lib/material/text_field/text_field.1.dart **
/// {@end-tool}
///
/// {@macro flutter.widgets.EditableText.lifeCycle}
///
/// For most applications the [onSubmitted] callback will be sufficient for
/// reacting to user input.
///
/// The [onEditingComplete] callback also runs when the user finishes editing.
/// It's different from [onSubmitted] because it has a default value which
/// updates the text controller and yields the keyboard focus. Applications that
/// require different behavior can override the default [onEditingComplete]
/// callback.
///
/// Keep in mind you can also always read the current string from a TextField's
/// [TextEditingController] using [TextEditingController.text].
///
/// ## Handling emojis and other complex characters
/// {@macro flutter.widgets.EditableText.onChanged}
///
/// In the live Dartpad example above, try typing the emoji üë®‚Äçüë©‚Äçüë¶
/// into the field and submitting. Because the example code measures the length
/// with `value.characters.length`, the emoji is correctly counted as a single
/// character.
///
/// {@macro flutter.widgets.editableText.showCaretOnScreen}
///
/// {@macro flutter.widgets.editableText.accessibility}
///
/// {@tool dartpad}
/// This sample shows how to style a text field to match a filled or outlined
/// Material Design 3 text field.
///
/// ** See code in examples/api/lib/material/text_field/text_field.2.dart **
/// {@end-tool}
///
/// ## Scrolling Considerations
///
/// If this [TextField] is not a descendant of [Scaffold] and is being used
/// within a [Scrollable] or nested [Scrollable]s, consider placing a
/// [ScrollNotificationObserver] above the root [Scrollable] that contains this
/// [TextField] to ensure proper scroll coordination for [TextField] and its
/// components like [TextSelectionOverlay].
///
/// See also:
///
///  * [TextFormField], which integrates with the [Form] widget.
///  * [InputDecorator], which shows the labels and other visual elements that
///    surround the actual text editing widget.
///  * [EditableText], which is the raw text editing control at the heart of a
///    [TextField]. The [EditableText] widget is rarely used directly unless
///    you are implementing an entirely different design language, such as
///    Cupertino.
///  * <https://material.io/design/components/text-fields.html>
///  * Cookbook: [Create and style a text field](https://docs.flutter.dev/cookbook/forms/text-input)
///  * Cookbook: [Handle changes to a text field](https://docs.flutter.dev/cookbook/forms/text-field-changes)
///  * Cookbook: [Retrieve the value of a text field](https://docs.flutter.dev/cookbook/forms/retrieve-input)
///  * Cookbook: [Focus and text fields](https://docs.flutter.dev/cookbook/forms/focus) ü6òM®) ®)®2 àî/// Creates a Material Design text field.
///
/// If [decoration] is non-null (which is the default), the text field requires
/// one of its ancestors to be a [Material] widget.
///
/// To remove the decoration entirely (including the extra padding introduced
/// by the decoration to save space for the labels), set the [decoration] to
/// null.
///
/// The [maxLines] property can be set to null to remove the restriction on
/// the number of lines. By default, it is one, meaning this is a single-line
/// text field. [maxLines] must not be zero.
///
/// The [maxLength] property is set to null by default, which means the
/// number of characters allowed in the text field is not restricted. If
/// [maxLength] is set a character counter will be displayed below the
/// field showing how many characters have been entered. If the value is
/// set to a positive integer it will also display the maximum allowed
/// number of characters to be entered. If the value is set to
/// [TextField.noMaxLength] then only the current length is displayed.
///
/// After [maxLength] characters have been input, additional input
/// is ignored, unless [maxLengthEnforcement] is set to
/// [MaxLengthEnforcement.none].
/// The text field enforces the length with a [LengthLimitingTextInputFormatter],
/// which is evaluated after the supplied [inputFormatters], if any.
/// The [maxLength] value must be either null or greater than zero.
///
/// If [maxLengthEnforcement] is set to [MaxLengthEnforcement.none], then more
/// than [maxLength] characters may be entered, and the error counter and
/// divider will switch to the [decoration].errorStyle when the limit is
/// exceeded.
///
/// The text cursor is not shown if [showCursor] is false or if [showCursor]
/// is null (the default) and [readOnly] is true.
///
/// The [selectionHeightStyle] and [selectionWidthStyle] properties allow
/// changing the shape of the selection highlighting. These properties default
/// to [ui.BoxHeightStyle.tight] and [ui.BoxWidthStyle.tight], respectively.
///
/// See also:
///
///  * [maxLength], which discusses the precise meaning of "number of
///    characters" and how it may differ from the intuitive meaning.E®9	®@®?  ®H®N®M  ®i®o®n  ®~®Ñ®É  ®í®ò®ó  ®´)®±®∞  ®⁄®Í®È  ®˚©©   ©1©©  ©L
©R©Q  ©\©b©a  ©q ©w©v  ©ó©ù©ú  ©≥©π©∏  ©À©—©–  ©ÊÄê™i™h  ™|™Ç™Å  ™ë™ó™ñ  ™≠™≥™≤  ™»™Œ™Õ  ™Î™Ò™  ´	´´  ´& ´8´7  ´L ´^´]  ´r´x´w  ´ï´õ´ö  ´¨´≤´±  ´ø´≈´ƒ  ´Ÿ´ﬂ´ﬁ  ´Ì´Û´Ú  ¨¨¨  ¨ ¨&¨%  ¨<¨B¨A  ¨R¨X¨W  ¨p¨v¨u  ¨ä¨ê¨è  ¨ú¨¢¨°  ¨µ¨ª¨∫  ¨—¨◊¨÷  ¨Ë¨Ó¨Ì  ¨ˇ≠≠  ≠≠%≠$  ≠5≠;≠:  ≠P3≠V≠U  ≠â1≠è≠é  ≠¿≠∆≠≈  ≠›/≠„≠‚  Æ0ÆÆ  ÆH ÆOÆN  ÆnÆtÆs  Æä
ÆêÆè  ÆöÆ†Æü  ÆæÆƒÆ√  Æ’Æ€Æ⁄  ÆÓÆÙÆÛ  ØØ
Ø	  ØØ!Ø   Ø6Ø<Ø;  ØN%ØTØS  Øy"ØØ~  Ø°!ØßØ¶  Ø»ØŒØÕ  Ø‡Äü∞j∞i  ∞ÖL∞ã∞ä  ∞◊)∞›∞‹  ±4±±  ±@±F±E  ±a±g±f  ±É±â±à  Ä˜®W®Ω®√®“®”©/©A©B©Ç©ã©å©€©Ê©Á©Ò™]©˘™$™¢™‚™˛´´ã´•´Œ¨»≠l≠n≠o≠}≠~≠§≠¶≠ß≠¥≠µ≠Ú≠¯ÆÆÆÆÆÆ+Æ<Æ=Æ≥ØcØqØrØiØpØjØµØπØ∫Ø‡Ø·ØÎ∞^ØÛ∞$∞{∞•∞±∞≤∞¸± ±W±ß±≠±Ã±»±Æ±¿±¡±À±Ê±÷≤±Û≤≤G≤≤.≤≤≤$≤%≤0≤?≤@≤a≤Q≤~≤n≤Å≤¬≤é≤©≤Ç≤ê≤ü≤†≤´≤∫≤ª≤Ã≤“≤Û≤‰≤‹≤”≤ﬂ≤≤Á≤Ú≤˝≥≥$≥≥≥≥≥!≥≥#≥.≥4≥Å≥æ≥h≥R≥?≥P≥I≥@≥L≥U≥f≥_≥V≥b≥k≥Ä≥u≥l≥x≥å≥»≥Œ¥¥Y≥‚≥Ÿ≥⁄≥Â¥
≥˜≥Ô≥Ê≥Ú¥≥˙¥¥¥c¥i¥á¥Ø¥w¥j¥k¥É¥z¥Ü¥â¥π¥øµ¥¯¥“¥ ¥¿¥Õ¥ﬂ¥’¥‚¥Î¥Ïµ¥˚µµñµú∂6∂±µ˙µ‹µßµ®µ±µ⁄µ≤µ√µ“µ”µıµÏµ¯∂
∂∂∂5∂∂#∂0∂1∂A∂»∂ª∂‚∂’∂Â∑"∂Ù∑	∂Ô∂Ê∂Ú∂ˆ∑∑∑∑∑∑G∑,∑d∑I∑g∑Å∑r∑h∑i∑u∑vF∑áÇyπÍπÍÇ&/// The configuration for the magnifier of this text field.
///
/// By default, builds a [CupertinoTextMagnifier] on iOS and [TextMagnifier]
/// on Android, and builds nothing on all other platforms. To suppress the
/// magnifier, consider passing [TextMagnifierConfiguration.disabled].
///
/// {@macro flutter.widgets.magnifier.intro}
///
/// {@tool dartpad}
/// This sample demonstrates how to customize the magnifier that this text field uses.
///
/// ** See code in examples/api/lib/widgets/text_magnifier/text_magnifier.0.dart **
/// {@end-tool} ∫H∫F∫F1/// {@macro flutter.widgets.editableText.groupId} ∫RÄõ∫„∫„m/// Controls the text being edited.
///
/// If null, this widget will create its own [TextEditingController]. ∫ÚÜF¿ A/¿ A/Öﬂ/// Defines the keyboard focus for this widget.
///
/// The [focusNode] is a long-lived object that's typically managed by a
/// [StatefulWidget] parent. See [FocusNode] for more information.
///
/// To give the keyboard focus to this widget, provide a [focusNode] and then
/// use the current [FocusScope] to request the focus:
///
/// ```dart
/// FocusScope.of(context).requestFocus(myFocusNode);
/// ```
///
/// This happens automatically when the widget is tapped.
///
/// To be notified when the widget gains or loses the focus, add a listener
/// to the [focusNode]:
///
/// ```dart
/// myFocusNode.addListener(() { print(myFocusNode.hasFocus); });
/// ```
///
/// If null, this widget will create its own [FocusNode].
///
/// ## Keyboard
///
/// Requesting the focus will typically cause the keyboard to be shown
/// if it's not showing already.
///
/// On Android, the user can hide the keyboard - without changing the focus -
/// with the system back button. They can restore the keyboard's visibility
/// by tapping on a text field. The user might hide the keyboard and
/// switch to a physical keyboard, or they might just need to get it
/// out of the way for a moment, to expose something it's
/// obscuring. In this case requesting the focus again will not
/// cause the focus to change, and will not make the keyboard visible.
///
/// This widget builds an [EditableText] and will ensure that the keyboard is
/// showing when it is tapped by calling [EditableTextState.requestKeyboard()]. ¿ A=ÅÉ¿ B∂¿ B∂ÅS/// The decoration to show around the text field.
///
/// By default, draws a horizontal line under the text field but can be
/// configured to show an icon, label, hint text, and error text.
///
/// Specify null to remove the decoration entirely (including the
/// extra padding introduced by the decoration to save space for the labels). ¿ B≈Y¿ C¿ C6/// {@macro flutter.widgets.editableText.keyboardType} ¿ C#Å=¿ DQ¿ DQÅ
/// {@template flutter.widgets.TextField.textInputAction}
/// The type of action button to use for the keyboard.
///
/// Defaults to [TextInputAction.newline] if [keyboardType] is
/// [TextInputType.multiline] and [TextInputAction.done] otherwise.
/// {@endtemplate} ¿ Dej¿ DΩ¿ DΩ</// {@macro flutter.widgets.editableText.textCapitalization} ¿ D‘Ç¿ FÁ¿ FÁÅÌ/// The style to use for the text being edited.
///
/// This text style is also used as the base style for the [decoration].
///
/// If null, [TextTheme.bodyLarge] will be used. When the text field is disabled,
/// [TextTheme.bodyLarge] with an opacity of 0.38 will be used instead.
///
/// If null and [ThemeData.useMaterial3] is false, [TextTheme.titleMedium] will
/// be used. When the text field is disabled, [TextTheme.titleMedium] with
/// [ThemeData.disabledColor] will be used instead. ¿ FÒS¿ G:¿ G:4/// {@macro flutter.widgets.editableText.strutStyle} ¿ GIO¿ Gè¿ Gè3/// {@macro flutter.widgets.editableText.textAlign} ¿ Gùk¿ G˜¿ G˜>/// {@macro flutter.material.InputDecorator.textAlignVertical} ¿ H\¿ H\¿ H\7/// {@macro flutter.widgets.editableText.textDirection} ¿ HnJ¿ HØ¿ HØ3/// {@macro flutter.widgets.editableText.autofocus} ¿ HΩÑ‰¿ Më¿ MëÑç/// Represents the interactive "state" of this widget in terms of a set of
/// [WidgetState]s, including [WidgetState.disabled], [WidgetState.hovered],
/// [WidgetState.error], and [WidgetState.focused].
///
/// Classes based on this one can provide their own
/// [WidgetStatesController] to which they've added listeners.
/// They can also update the controller's [WidgetStatesController.value]
/// however, this may only be done when it's safe to call
/// [State.setState], like in an event handler.
///
/// The controller's [WidgetStatesController.value] represents the set of
/// states that a widget's visual properties, typically [WidgetStateProperty]
/// values, are resolved against. It is _not_ the intrinsic state of the widget.
/// The widget is responsible for ensuring that the controller's
/// [WidgetStatesController.value] tracks its intrinsic state. For example
/// one cannot request the keyboard focus for a widget by adding [WidgetState.focused]
/// to its controller. When the widget gains the or loses the focus it will
/// [WidgetStatesController.update] its controller's [WidgetStatesController.value]
/// and notify listeners of the change. ¿ M¶^¿ MÚ¿ MÚ</// {@macro flutter.widgets.editableText.obscuringCharacter} ¿ N	N¿ NL¿ NL5/// {@macro flutter.widgets.editableText.obscureText} ¿ N\N¿ Nü¿ Nü5/// {@macro flutter.widgets.editableText.autocorrect} ¿ NØl¿ O¿ OD/// {@macro flutter.services.TextInputConfiguration.smartDashesType} ¿ O l¿ O}¿ O}D/// {@macro flutter.services.TextInputConfiguration.smartQuotesType} ¿ Oëe¿ OÂ¿ OÂF/// {@macro flutter.services.TextInputConfiguration.enableSuggestions} ¿ O˚ÄÆ¿ P°¿ P°Äî/// {@macro flutter.widgets.editableText.maxLines}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ PÆÄÆ¿ QT¿ QTÄî/// {@macro flutter.widgets.editableText.minLines}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ QaF¿ Q†¿ Q†1/// {@macro flutter.widgets.editableText.expands} ¿ Q¨H¿ QÏ¿ QÏ2/// {@macro flutter.widgets.editableText.readOnly} ¿ Q˘Åê¿ S{¿ S{ÄÏ/// Configuration of toolbar options.
///
/// If not set, select all and paste will default to be enabled. Copy and cut
/// will be disabled if [obscureText] is true. If [readOnly] is true,
/// paste and cut will be disabled regardless.¿ R¿ RÒ¿ R˚¿ Sa¿ S¿ S*¿ SéM¿ S—¿ S—4/// {@macro flutter.widgets.editableText.showCursor} ¿ S‡Äö¿ Tj¿ Tjt/// If [maxLength] is set to this value, only the "current input length"
/// part of the character counter is shown.¿ Tx¿ Ty¿ TÜ¿ Zz¿ ZzÖµ/// The maximum number of characters (Unicode grapheme clusters) to allow in
/// the text field.
///
/// If set, a character counter will be displayed below the
/// field showing how many characters have been entered. If set to a number
/// greater than 0, it will also display the maximum number allowed. If set
/// to [TextField.noMaxLength] then only the current character count is displayed.
///
/// After [maxLength] characters have been input, additional input
/// is ignored, unless [maxLengthEnforcement] is set to
/// [MaxLengthEnforcement.none].
///
/// The text field enforces the length with a [LengthLimitingTextInputFormatter],
/// which is evaluated after the supplied [inputFormatters], if any.
///
/// This value must be either null, [TextField.noMaxLength], or greater than 0.
/// If null (the default) then there is no limit to the number of characters
/// that can be entered. If set to [TextField.noMaxLength], then no limit will
/// be enforced, but the number of characters entered will still be displayed.
///
/// Whitespace characters (e.g. newline, space, tab) are included in the
/// character count.
///
/// If [maxLengthEnforcement] is [MaxLengthEnforcement.none], then more than
/// [maxLength] characters may be entered, but the error counter and divider
/// will switch to the [decoration]'s [InputDecoration.errorStyle] when the
/// limit is exceeded.
///
/// {@macro flutter.services.lengthLimitingTextInputFormatter.maxLength} ¿ ZàÅ
¿ [~¿ [~Äœ/// Determines how the [maxLength] limit should be enforced.
///
/// {@macro flutter.services.textFormatter.effectiveMaxLengthEnforcement}
///
/// {@macro flutter.services.textFormatter.maxLengthEnforcement} ¿ [óÅj¿ \¯¿ \¯Å4/// {@macro flutter.widgets.editableText.onChanged}
///
/// See also:
///
///  * [inputFormatters], which are called before [onChanged]
///    runs and can validate and change ("format") the input value.
///  * [onEditingComplete], [onSubmitted]:
///    which are more specialized input change notifications. ¿ ]c¿ ]X¿ ]X;/// {@macro flutter.widgets.editableText.onEditingComplete} ¿ ]nÅ4¿ ^ó¿ ^óÄ˛/// {@macro flutter.widgets.editableText.onSubmitted}
///
/// See also:
///
///  * [TextInputAction.next] and [TextInputAction.previous], which
///    automatically shift the focus to the next/previous focusable item when
///    the user is done editing. ¿ ^ßt¿ _¿ _=/// {@macro flutter.widgets.editableText.onAppPrivateCommand} ¿ _ k¿ _|¿ _|9/// {@macro flutter.widgets.editableText.inputFormatters} ¿ _êÄÌ¿ `v¿ `vÄœ/// If false the text field is "disabled": it ignores taps and its
/// [decoration] is rendered in grey.
///
/// If non-null this property overrides the [decoration]'s
/// [InputDecoration.enabled] property. ¿ `ÇÄí¿ a¿ aq/// Determines whether this widget ignores pointer events.
///
/// Defaults to null, and when null, does nothing. ¿ aP¿ a^¿ a^5/// {@macro flutter.widgets.editableText.cursorWidth} ¿ anS¿ aµ¿ aµ6/// {@macro flutter.widgets.editableText.cursorHeight} ¿ a∆S¿ b¿ b6/// {@macro flutter.widgets.editableText.cursorRadius} ¿ bc¿ bl¿ bl?/// {@macro flutter.widgets.editableText.cursorOpacityAnimates} ¿ bÜÅı¿ dp¿ dpÅ»/// The color of the cursor.
///
/// The cursor indicates the current location of text insertion point in
/// the field.
///
/// If this is null it will default to the ambient
/// [DefaultSelectionStyle.cursorColor]. If that is null, and the
/// [ThemeData.platform] is [TargetPlatform.iOS] or [TargetPlatform.macOS]
/// it will use [CupertinoThemeData.primaryColor]. Otherwise it will use
/// the value of [ColorScheme.primary] of [ThemeData.colorScheme]. ¿ dÄÅ%¿ eï¿ eïÄ˝/// The color of the cursor when the [InputDecorator] is showing an error.
///
/// If this is null it will default to [TextStyle.color] of
/// [InputDecoration.errorStyle]. If that is null, it will use
/// [ColorScheme.error] of [ThemeData.colorScheme]. ¿ e™Äª¿ fQ¿ fQÄà/// Controls how tall the selection highlight boxes are computed to be.
///
/// See [ui.BoxHeightStyle] for details on available styles. ¿ fjÄ∏¿ g¿ gÄá/// Controls how wide the selection highlight boxes are computed to be.
///
/// See [ui.BoxWidthStyle] for details on available styles. ¿ g'ÄΩ¿ g“¿ g“Äé/// The appearance of the keyboard.
///
/// This setting is only honored on iOS devices.
///
/// If unset, defaults to [ThemeData.brightness]. ¿ gÈX¿ h4¿ h47/// {@macro flutter.widgets.editableText.scrollPadding} ¿ hFl¿ hò¿ hòD/// {@macro flutter.widgets.editableText.enableInteractiveSelection} ¿ h∑l¿ i¿ i;/// {@macro flutter.widgets.editableText.selectionControls} ¿ i(e¿ i|¿ i|9/// {@macro flutter.widgets.scrollable.dragStartBehavior} ¿ jÑ¿ n¿ nÉÀ/// {@template flutter.material.textfield.onTap}
/// Called for the first tap in a series of taps.
///
/// The text field builds a [GestureDetector] to handle input events like tap,
/// to trigger focus requests, to move the caret, adjust the selection, etc.
/// Handling some of those events by wrapping the text field with a competing
/// GestureDetector is problematic.
///
/// To unconditionally handle taps, without interfering with the text field's
/// internal gesture detector, provide this callback.
///
/// If the text field is created with [enabled] false, taps will not be
/// recognized.
///
/// To be notified when the text field gains or loses the focus, provide a
/// [focusNode] and add a listener to that.
///
/// To listen to arbitrary pointer events without competing with the
/// text field's internal gesture detector, use a [Listener].
/// {@endtemplate}
///
/// If [onTapAlwaysCalled] is enabled, this will also be called for consecutive
/// taps. ¿ n)ÄÚ¿ o
¿ o
ÄÕ/// Whether [onTap] should be called for every tap.
///
/// Defaults to false, so [onTap] is only called for each distinct tap. When
/// enabled, [onTap] is called for every tap including consecutive taps. ¿ o Çû¿ q≤¿ q≤ÇX/// {@macro flutter.widgets.editableText.onTapOutside}
///
/// {@tool dartpad}
/// This example shows how to use a `TextFieldTapRegion` to wrap a set of
/// "spinner" buttons that increment and decrement a value in the [TextField]
/// without causing the text field to lose keyboard focus.
///
/// This example includes a generic `SpinnerField<T>` class that you can copy
/// into your own project and customize.
///
/// ** See code in examples/api/lib/widgets/tap_region/text_field_tap_region.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TapRegion] for how the region group is determined. ¿ q√d¿ r¿ r8/// {@macro flutter.widgets.editableText.onTapUpOutside} ¿ r,ÇÎ¿ u¿ uÇ™/// The cursor for a mouse pointer when it enters or is hovering over the
/// widget.
///
/// If [mouseCursor] is a [WidgetStateMouseCursor],
/// [WidgetStateProperty.resolve] is used for the following [WidgetState]s:
///
///  * [WidgetState.error].
///  * [WidgetState.hovered].
///  * [WidgetState.focused].
///  * [WidgetState.disabled].
///
/// If this property is null, [WidgetStateMouseCursor.textable] will be used.
///
/// The [mouseCursor] is the only property of [TextField] that controls the
/// appearance of the mouse pointer. All other properties related to "cursor"
/// stand for the text cursor, which is usually a blinking vertical line at
/// the editing position. ¿ uÑF¿ yV¿ yVÉ‹/// Callback that generates a custom [InputDecoration.counter] widget.
///
/// See [InputCounterWidgetBuilder] for an explanation of the passed in
/// arguments. The returned widget will be placed below the line in place of
/// the default widget built when [InputDecoration.counterText] is specified.
///
/// The returned widget will be wrapped in a [Semantics] widget for
/// accessibility, but it also needs to be accessible itself. For example,
/// if returning a Text widget, set the [Text.semanticsLabel] property.
///
/// {@tool snippet}
/// ```dart
/// Widget counter(
///   BuildContext context,
///   {
///     required int currentLength,
///     required int? maxLength,
///     required bool isFocused,
///   }
/// ) {
///   return Text(
///     '$currentLength of $maxLength characters',
///     semanticsLabel: 'character count',
///   );
/// }
/// ```
/// {@end-tool}
///
/// If buildCounter returns null, then no counter and no Semantics widget will
/// be created at all. ¿ yg\¿ y∂¿ y∂7/// {@macro flutter.widgets.editableText.scrollPhysics} ¿ y»e¿ z¿ z:/// {@macro flutter.widgets.editableText.scrollController} ¿ z2Ä£¿ z»¿ z»y/// {@macro flutter.widgets.editableText.autofillHints}
/// {@macro flutter.services.AutofillConfiguration.autofillHints} ¿ z⁄v¿ {D¿ {DX/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.hardEdge]. ¿ {UÉ;¿ ~É¿ ~ÉÇ˝/// {@template flutter.material.textfield.restorationId}
/// Restoration ID to save and restore the state of the text field.
///
/// If non-null, the text field will persist and restore its current scroll
/// offset and - if no [controller] has been provided - the content of the
/// text field. If a [controller] has been provided, it is the responsibility
/// of the owner of that controller to persist and restore it, e.g. by using
/// a [RestorableTextEditingController].
///
/// The state of this widget is persisted in a [RestorationBucket] claimed
/// from the surrounding [RestorationScope] using the provided restoration ID.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.
/// {@endtemplate} ¿ ~ïÄ“¿ X¿ X9/// {@macro flutter.widgets.editableText.scribbleEnabled}¿ ~—¿ ~“¿ ~‹¿ I¿ ~‚¿ ¿ lh¿ º¿ ºB/// {@macro flutter.widgets.editableText.stylusHandwritingEnabled} ¿ Ÿ}¿ Ä9¿ Ä9R/// {@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning} ¿ Ä[Äå¿ Ä ¿ Ä G/// {@macro flutter.widgets.editableText.contentInsertionConfiguration} ¿ ÄÏÅπ¿ Çì¿ ÇìÅn/// {@macro flutter.widgets.EditableText.contextMenuBuilder}
///
/// If not provided, will build a default menu based on the platform.
///
/// See also:
///
///  * [AdaptiveTextSelectionToolbar], which is built by default.
///  * [BrowserContextMenu], which allows the browser's context menu on web to
///    be disabled and Flutter-rendered context menus to appear. ¿ Ç™ÅB¿ É›¿ É›Å/// Determine whether this text field can request the primary focus.
///
/// Defaults to true. If false, the text field will not request focus
/// when tapped, or when its context menu is displayed. If false it will not
/// be possible to move the focus to the text field with tab key. ¿ ÉÒa¿ ÑD¿ ÑD3/// {@macro flutter.widgets.undoHistory.controller} ¿ ÖÁÅ¿ ÜÏ¿ ÜÏÄ›/// {@macro flutter.widgets.EditableText.spellCheckConfiguration}
///
/// If [SpellCheckConfiguration.misspelledTextStyle] is not specified in this
/// configuration, then [materialMisspelledTextStyle] is used by default. ¿ áÇ'¿ àâ¿ àâÅ[/// The [TextStyle] used to indicate misspelled words in the Material style.
///
/// See also:
///  * [SpellCheckConfiguration.misspelledTextStyle], the style configured to
///    mark misspelled words with.
///  * [CupertinoTextField.cupertinoMisspelledTextStyle], the style configured
///    to mark misspelled words with in the Cupertino style.¿ àß¿ à∞¿ â.¿ à¿¿ à∂¿ à¬¿ à–¿ à—¿ àÔ¿ à‡¿ àÒ¿ à˜¿ à¯¿ â¿ â¿ â¿ â%¿ â&¿ iíu¿ iÿ¿ iÿ:/// {@macro flutter.widgets.editableText.selectionEnabled}   ¿ ÑWÅå¿ Ñe¿ Ñe  ¿ ÑÖ¿ Ñì¿ Ñí  ¿ Ñü#¿ Ñ≤¿ Ñ±   ¿ â4Ñ–¿ ãπ¿ ãπÇI/// Default builder for [TextField]'s spell check suggestions toolbar.
///
/// On Apple platforms, builds an iOS-style toolbar. Everywhere else, builds
/// an Android-style toolbar.
///
/// See also:
///  * [spellCheckConfiguration], where this is typically specified for
///    [TextField].
///  * [SpellCheckConfiguration.spellCheckSuggestionsToolbarBuilder], the
///    parameter for which this is the default value for [TextField].
///  * [CupertinoTextField.defaultSpellCheckSuggestionsToolbarBuilder], which
///    is like this but specifies the default for [CupertinoTextField]. ¿ ãÈ¿ ã˜¿ ãˆ  ¿ å#¿ å¿ å  ¿ ãñ¿ ãó¿ éÉ¿ é—¿ é—Ä£/// Returns a new [SpellCheckConfiguration] where the given configuration has
/// had any missing values replaced with their defaults for the Android
/// platform. ¿ é˙&¿ è¿ è   ¿ ë@¿ ë,¿ ë,   ¿ ë¿ ë¿ ëSñú¿ ëd¿ ëd  ¿ ëx&¿ ëï¿ ëî  ¿ ëS¿ ëT ¿ ßÛ¿ m]¿ ß˘¿ ß˘   ¿ ®ã,¿ ®¨¿ ®¨  ¿ ©¿ ©$¿ ©$  ¿ ™R¿ ™W¿ ™W ¿ ™e¿ ™˛"¿ ´¿ ´ ¿ ´¿ ´%O¿ ´T¿ ´T  ¿ ´≥'¿ ´…¿ ´… ¿ ´≥¿ ´¥¿ ´ﬂ_¿ ¨¿ ¨ ¿ ´ﬂ¿ ´‡¿ ¨ ¿ ¨)¿ ¨;¿ ¨*¿ ¨<¿ ¨=¿ —S3¿ —m¿ —m  ¿ ®ªZ¿ ®’¿ ®’    ¿ ©2V¿ ©@¿ ©@    ¿ ©åÄ¬¿ ©•¿ ©•    ¿ ™oÄã¿ ™x¿ ™x    ¿ ¨CO¿ ¨X¿ ¨X   ¿ ¨C¿ ¨D¿ ¨◊L¿ ¨‡¿ ¨‡    ¿ ≠'L¿ ≠/¿ ≠/    ¿ ≠wÅ9¿ ≠Ä¿ ≠Ä    ¿ Æ¥Äá¿ ÆΩ¿ ÆΩ    ¿ Ø?Äô¿ ØI¿ ØI    ¿ ªÇÅ&¿ ªã¿ ªã    ¿ ≈Ñ>¿ ≈ú¿ ≈ú   ¿ ≈Ñ¿ ≈Ö¿ ∆‚E¿ ∆˘¿ ∆˘    ¿ “n¿ “/¿ “/    ¿ ‘õ?¿ ‘≤¿ ‘≤   ¿ ‘õ¿ ‘ú¿ ’JÇ∞¿ ’q¿ ’q   ¿ ’J¿ ’K¿ Ø‹ä¿ ØÏ¿ ØÏ    ¿ πÙÅä¿ ∫¿ ∫   ¿ πÙ¿ πı¿ º¨Äç¿ ºΩ¿ ºΩ   ¿ º¨¿ º≠¿ Ω=ÖÛ¿ ΩN¿ ΩN  ¿ Ω^¿ Ωi¿ Ωh  ¿ Ω=¿ Ω>¿ √4Äò¿ √E¿ √E  ¿ √R¿ √f¿ √e  ¿ √p¿ √v¿ √u  ¿ √4¿ √5¿ √–y¿ √’¿ √’    ¿ ƒMÅ3¿ ƒR¿ ƒR  ¿ ƒj¿ ƒ}¿ ƒ|   ¿ ≈∆Å¿ ≈◊¿ ≈◊   ¿ ≈∆¿ ≈«¿ «+C¿ «0¿ «0    ¿ «rÇˇ¿ «w¿ «w  ¿ «ì¿ «´¿ «™   ¿  uÄÌ¿  z¿  z    ¿ ÀfÑ(¿ Àk¿ Àk  ¿ ÀÉ¿ Àí¿ Àë  ¿ Àú¿ À¥¿ À≥   ¿ œíÄ«¿ œ”¿ œ”9/// Toggle the toolbar when a selection handle is tapped.   ¿ –]Ä—¿ –b¿ –b  ¿ –o¿ –u¿ –t   ¿ —ãÄÉ¿ —ê¿ —ê    ¿ “ÑÅÈ¿ “â¿ “â    ¿ ‘ﬁh¿ ‘Ô¿ ‘Ô  ¿ ‘¯ ¿ ’
¿ ’	  ¿ ‘ﬁ¿ ‘ﬂ¿ ÿ&Å∑¿ ÿ0¿ ÿ0  ¿ ÿG¿ ÿR¿ ÿQ   ¿ Ÿ·ªm¿ ŸÙ¿ ŸÙ  ¿ Ÿ˙¿ ⁄¿ ⁄  ¿ Ÿ·¿ Ÿ‚      ¿RÅj¿]¿]  ¿p¿~¿}   ¿æÄò¿»¿»  ¿›¿Î¿Í   ¿ÅW¿ä¿ä  ¿ù¿´¿™   ¿ÿX¿‚¿‚  ¿¿˛¿˝   ¿2Äñ¿<¿<  ¿Q¿_¿^    ÑıÇTÖ6Ö68/// Signature for the [TextField.buildCounter] callback.  ÖùÖ´Ö™  Ö˜ÜÜ  ÜfÜuÜt  á)á8á7        ÄÆ  input_border.dart  Ä“  material.dart  ÄÚ  scaffold.dart  Å  text_form_field.dart  Å9  text_theme.dart á: <ÄÜÄ§Ä•Ä…ÄÈÅ	Å0ÅRÅ[Å\ÅóÅòÅ¡ÅÎÇÇ<ÇdÇeÇîÇ∞Ç∆Ç€ÉÉ É9É_É}ÉµÉ‰ÑÑÑÑ?ÑûÑüÑ∑Ñ’ÑÙÑıÖ.ÖRÖhÖóÖµÖ∂ÖÒÜÜÜ`ÜÜÄÜ—á#áBáJáKá©á˜àà+à,àLàMàYàûàüà´à¿à·àÂàÁàËâ
ââ_âyâ}âÕäägäçäëä÷ã%ãsã¡ãÌãÒå@åëå€ç(çuçyç…ç˝ééPétéxé±é˛èOèüè≠è¿èƒêêhê{êêÕëëdëùë°ë∑ëªëœíípíÜíäí◊íÁíÎìììSì°ì¿ìƒìÿî(î6î:îáîóîõîœî”ïï;ï?ïéïŸñ*ñvñÑñàñÿóóóPóÑóàóÕòòlò{òòªòøò˜ò˚ôô]ôôÉô–ô‡ô‰öööTöööÍõ7õcõgõuõyõ∫ú	ú9úàú’ù ù2ùrù◊ûEû≥üü4ü`üfü∏üÓüÙ†D†ì†ü†•†Û°C°r°x°¬¢¢V¢°¢Í£+£t£z£ø£˘§§p§∑§˝••T•†•Î•˚¶¶P¶Ñ¶ä¶÷ß'ßvß|ßåßíß⁄®!®5®D®e®z®é®ß®÷®˜©©H©X©m©ì©Ø©«©‚©Û™™Y™_™x™ç™©™ƒ™Á´´"´H´n´ë´®´ª´’´È¨¨¨8¨N¨l¨Ü¨ò¨±¨Õ¨‰¨˚≠≠1≠L≠Ö≠º≠ŸÆÆDÆjÆÜÆñÆ∫Æ—ÆÍØ ØØ2ØJØuØùØƒØ‹ØÌ∞∞Z∞`∞Å∞”±±<±]±±†±œ±Ë≤J≤c≤≈≤ˆ≥'≥6≥É≥∑≥¡≥–¥¥R¥\¥≤µµèµûµﬂµ˝∂8∂™∂¥∂ ∑%∑Ñ∑Ö∑√∑…∏∏e∏Æ∏¥∏„∏È∏ˇπXπ^π¥π∆∫∫∫7∫O∫P∫v∫|∫ƒ∫Ô∫ª"ª(ªsª∏ªæººGºMº[ºìºùº£ºﬂºÂΩ3ΩMΩSΩaΩ•ΩØΩµΩÒΩ˜æ	ææXæ{æÅæ—øøfø≠øÈ¿ @+¿ @t¿ @z¿ @ ¿ A¿ A:¿ A;¿ Ao¿ Au¿ Aø¿ B¿ B	¿ BM¿ Bù¿ B¬¿ B√¿ B¸¿ C ¿ C!¿ C]¿ Cñ¿ Cú¿ C›¿ D#¿ D8¿ Db¿ Dc¿ D¢¿ D—¿ D“¿ E¿ E
¿ EU¿ E[¿ EØ¿ E˘¿ Eˇ¿ FQ¿ Fû¿ F‘¿ FÓ¿ FÔ¿ G&¿ GF¿ GG¿ G}¿ Gö¿ Gõ¿ G‹¿ H
¿ H¿ HE¿ Hk¿ Hl¿ H¢¿ H∫¿ Hª¿ I¿ IW¿ Iç¿ Iì¿ I…¿ J
¿ JU¿ Jë¿ J√¿ J…¿ K¿ Ke¿ K∏¿ K˚¿ LH¿ L°¿ LÔ¿ ME¿ Mo¿ M£¿ M§¿ M„¿ N¿ N¿ N?¿ NY¿ NZ¿ Ní¿ N¨¿ N≠¿ NÙ¿ O¿ O¿ Oe¿ Oé¿ Oè¿ Oÿ¿ O¯¿ O˘¿ P.¿ P¿ Pî¿ P´¿ P¨¿ P·¿ Q2¿ QG¿ Q^¿ Q_¿ Qì¿ Q©¿ Q™¿ Qﬂ¿ Qˆ¿ Q˜¿ R¿ R%¿ Ru¿ RΩ¿ RÓ¿ R˝¿ S&¿ S_¿ Sc¿ Sã¿ Så¿ S√¿ S›¿ Sﬁ¿ T)¿ TW¿ T|¿ T}¿ TÃ¿ T‚¿ TË¿ U&¿ Ut¿ U¬¿ V¿ V¿ Vb¿ Vú¿ Vø¿ V≈¿ W¿ W`¿ Wf¿ W∏¿ X¿ XX¿ X©¿ XØ¿ X˙¿ Y¿ Y¿ Yf¿ Yµ¿ Z¿ Z¿ Z"¿ Zm¿ ZÖ¿ ZÜ¿ Z≈¿ ZÀ¿ [¿ [¿ [`¿ [î¿ [ï¿ [À¿ [—¿ [·¿ [Á¿ \'¿ \m¿ \ö¿ \⁄¿ ]¿ ]¿ ]B¿ ]k¿ ]l¿ ]§¿ ]™¿ ]∫¿ ]¿¿ ^¿ ^V¿ ^y¿ ^§¿ ^•¿ ^Â¿ _¿ _¿ _Z¿ _ç¿ _é¿ _”¿ _˚¿ `¿ `>¿ `h¿ `¿ `Ä¿ `Ω¿ `√¿ `¯¿ a¿ a¿ aO¿ ak¿ al¿ a•¿ a√¿ aƒ¿ a˝¿ b¿ b¿ b^¿ bÉ¿ bÑ¿ b£¿ b©¿ bÙ¿ c¿ c¿ c@¿ cÑ¿ c—¿ d¿ da¿ d}¿ d~¿ dÀ¿ d—¿ e¿ eP¿ eÜ¿ eß¿ e®¿ eÚ¿ e¯¿ f7¿ fg¿ fh¿ f≤¿ f∏¿ fˆ¿ g$¿ g%¿ gK¿ gQ¿ gÑ¿ gä¿ gæ¿ gÊ¿ gÁ¿ h!¿ hC¿ hD¿ hã¿ h¥¿ hµ¿ hÛ¿ i%¿ i&¿ ib¿ iè¿ iê¿ iÕ¿ j¿ j	¿ j<¿ jp¿ jv¿ j«¿ k¿ kf¿ kå¿ kí¿ k‚¿ l¿ l ¿ lj¿ l|¿ lÇ¿ lœ¿ l˝¿ m¿ mJ¿ mä¿ mü¿ m•¿ m˜¿ n¿ n&¿ n'¿ n]¿ nc¿ n≤¿ n˝¿ o¿ o¿ oW¿ o]¿ os¿ oø¿ p¿ pL¿ pR¿ p¢¿ pÕ¿ p”¿ q,¿ q>¿ qD¿ qT¿ qZ¿ qó¿ q¿¿ q¡¿ q¸¿ r)¿ r*¿ rv¿ rÑ¿ rä¿ r¿¿ s¿ s¿ s2¿ sR¿ sr¿ sì¿ sô¿ sÈ¿ sÔ¿ t=¿ tç¿ t€¿ t˜¿ u¿ u¿ uc¿ ui¿ u≥¿ v¿ vR¿ vX¿ vû¿ vÎ¿ w5¿ w;¿ wQ¿ w_¿ wu¿ wì¿ wù¿ w√¿ wÊ¿ x	¿ x¿ x¿ x2¿ xg¿ xî¿ xü¿ xß¿ x±¿ x√¿ x…¿ y¿ y3¿ yd¿ ye¿ yü¿ y≈¿ y∆¿ z¿ z/¿ z0¿ zj¿ zÆ¿ z◊¿ zÿ¿ {¿ {¿ {7¿ {R¿ {S¿ {é¿ {‘¿ {⁄¿ |(¿ |u¿ |≈¿ }¿ }?¿ }E¿ }í¿ }„¿ }È¿ }˘¿ }ˇ¿ ~L¿ ~^¿ ~s¿ ~í¿ ~ì¿ ~œ¿ ~ﬁ¿ ¿ G¿ K¿ i¿ j¿ Ø¿ ÷¿ ◊¿ Ä,¿ ÄX¿ ÄY¿ Ä£¿ ÄÈ¿ ÄÍ¿ Å)¿ Å/¿ Åw¿ Å}¿ Åç¿ Åì¿ Å◊¿ Ç(¿ Çk¿ Çß¿ Ç®¿ ÇÔ¿ Çı¿ É=¿ Éå¿ É–¿ ÉÓ¿ ÉÔ¿ Ñ%¿ ÑT¿ ÑU¿ ÑÅ¿ Ñõ¿ Ñƒ¿ Ñ ¿ Ö+¿ Ö~¿ ÖÑ¿ Ö‡¿ Ö‰¿ ÖÂ¿ Ü)¿ Ü/¿ Ü¿ ÜÀ¿ á¿ á¿ áU¿ á[¿ ák¿ áª¿ á‡¿ à1¿ àp¿ à≤¿ à‹¿ à˝¿ â,¿ â1¿ â2¿ â{¿ âÅ¿ â–¿ â¿ âˆ¿ ä¿ äP¿ äf¿ ä≤¿ ä˙¿ ãJ¿ ãî¿ ã©¿ ãÂ¿ ãˇ¿ å(¿ å.¿ åS¿ år¿ åì¿ å÷¿ ç¿ ç¿ ç4¿ çW¿ çx¿ çõ¿ ç˚¿ é¿ é¿ é¿ éV¿ é†¿ é∞¿ éˆ¿ è"¿ è(¿ èÜ¿ èΩ¿ è√¿ èÊ¿ ê¿ êW¿ êÇ¿ ê¡¿ ë¿ ë¿ ë¿ ë¿ ë¿ ëP¿ ëQ¿ ë]¿ ë¢¿ ëÕ¿ ë·¿ íA¿ íH¿ í®¿ íº¿ íÓ¿ ì¿ ì ¿ ì<¿ ìE¿ ìL¿ ì£¿ ì∑¿ ì„¿ ì˘¿ î¿ î<¿ îE¿ îL¿ î`¿ îä¿ î¢¿ î∏¿ î‚¿ îÎ¿ îÚ¿ ïJ¿ ï¶¿ ï∫¿ ñ¿ ñ!¿ ñÅ¿ ñ‡¿ ñÙ¿ ó¿ ó4¿ óM¿ ó•¿ óÆ¿ óµ¿ ó…¿ óÓ¿ ò	¿ ò"¿ òz¿ òÉ¿ òä¿ òû¿ ò˚¿ ô¿ ôJ¿ ôï¿ ôÌ¿ ö:¿ öN¿ öx¿ öò¿ ö∂¿ ö“¿ ö€¿ ö‚¿ öˆ¿ õS¿ õZ¿ õn¿ õñ¿ õ¥¿ õ–¿ õˇ¿ ú¿ ú¿ ús¿ úá¿ úµ¿ ú“¿ úÌ¿ ù	¿ ù¿ ù¿ ù~¿ ù—¿ û'¿ ûä¿ ûû¿ ü¿ ü
¿ ü]¿ ü∫¿ üŒ¿ †3¿ †:¿ †N¿ †}¿ †ñ¿ †≠¿ †ﬂ¿ †Ë¿ †Ô¿ °¿ °¿ °3¿ °T¿ °p¿ °ó¿ °†¿ °ß¿ °ª¿ °Ì¿ ¢
¿ ¢%¿ ¢A¿ ¢J¿ ¢Q¿ ¢e¿ ¢í¿ ¢Æ¿ ¢»¿ ¢‰¿ ¢Ì¿ ¢Ù¿ £¿ £f¿ £m¿ £Å¿ £›¿ £‰¿ £¯¿ §Q¿ §X¿ §l¿ §ç¿ §±¿ §”¿ •¿ • ¿ •'¿ •;¿ •\¿ •Ö¿ •¨¿ •»¿ •—¿ •ÿ¿ •Ï¿ ¶ ¿ ¶C¿ ¶d¿ ¶Ä¿ ¶â¿ ¶ê¿ ¶§¿ ¶Õ¿ ¶Ô¿ ß<¿ ßR¿ ßÑ¿ ßß¿ ß‹¿ ßÂ¿ ßÏ¿ ß¿ ßÚ¿ ßÛ¿ ®"¿ ®<¿ ®â¿ ®π¿ ©¿ ©¿ ©0¿ ©â¿ ©ä¿ ©«¿ ©Ï¿ ™O¿ ™P¿ ™l¿ ™m¿ ™à¿ ™™¿ ™Õ¿ ™˚¿ ™¸¿ ´"¿ ´#¿ ´v¿ ´w¿ ´±¿ ´Ω¿ ´‹¿ ´›¿ ´È¿ ¨@¿ ¨A¿ ¨M¿ ¨ì¿ ¨‘¿ ¨’¿ ≠$¿ ≠%¿ ≠t¿ ≠u¿ ≠ñ¿ ≠∏¿ ≠◊¿ ≠¯¿ Æ]¿ Æ±¿ Æ≤¿ Æ ¿ Æ¯¿ Ø"¿ Ø<¿ Ø=¿ ØX¿ Øy¿ ØÆ¿ ØŸ¿ Ø⁄¿ ∞¿ ∞[¿ ∞é¿ ∞Ì¿ ±$¿ ±7¿ ±V¿ ±¢¿ ±≠¿ ±Æ¿ ±˛¿ ≤X¿ ≤z¿ ≤Ä¿ ≤Å¿ ≤À¿ ≤‡¿ ≥¿ ≥=¿ ≥p¿ ≥ó¿ ≥“¿ ¥¿ ¥¿ ¥B¿ ¥g¿ ¥Ö¿ ¥é¿ ¥ﬁ¿ µ ¿ µZ¿ µb¿ µü¿ µ•¿ µ¶¿ µ ¿ µÏ¿ ∂¿ ∂¿ ∂3¿ ∂X¿ ∂Y¿ ∂ä¿ ∂´¿ ∂÷¿ ∑¿ ∑`¿ ∑∑¿ ∑Ω¿ ∑æ¿ ∑‹¿ ∏¿ ∏?¿ ∏U¿ ∏É¿ ∏ß¿ ∏◊¿ π	¿ π+¿ π]¿ πf¿ πl¿ πm¿ πñ¿ π∂¿ πÊ¿ πÌ¿ πÒ¿ πÚ¿ π˛¿ ∫¿ ∫*¿ ∫â¿ ∫Æ¿ ∫Œ¿ ∫‘¿ ª$¿ ª^¿ ª{¿ ª¿ ªÄ¿ ªû¿ ªæ¿ º¿ º*¿ ºt¿ ºû¿ º•¿ º©¿ º™¿ º∂¿ º◊¿ º˙¿ Ω6¿ Ω:¿ Ω;¿ ΩG¿ Ωu¿ Ωõ¿ Ω‡¿ æ¿ æg¿ æñ¿ æ¥¿ æŒ¿ æ‘¿ æ’¿ ø¿ øX¿ ø¢¿ ø®¿ ø©¿ øÂ¿ øÊ¿ ¿E¿ ¿}¿ ¿Ø¿ ¿∑¿ ¿Ω¿ ¿æ¿ ¿ˇ¿ ¡D¿ ¡à¿ ¡›¿ ¬¿ ¬*¿ ¬{¿ ¬®¿ ¬÷¿ √ ¿ √¿ √'¿ √-¿ √1¿ √2¿ √>¿ √á¿ √¶¿ √√¿ √…¿ √Õ¿ √Œ¿ √Ì¿ ƒ¿ ƒF¿ ƒJ¿ ƒK¿ ƒÜ¿ ƒß¿ ƒπ¿ ƒœ¿ ƒˇ¿ ≈?¿ ≈Z¿ ≈w¿ ≈}¿ ≈Å¿ ≈Ç¿ ≈é¿ ≈√¿ ≈ƒ¿ ≈–¿ ≈„¿ ∆ ¿ ∆;¿ ∆W¿ ∆ú¿ ∆∆¿ ∆€¿ ∆ﬂ¿ ∆‡¿ «(¿ «)¿ «E¿ «k¿ «o¿ «p¿ «≥¿ »¿ »A¿ »â¿ »ù¿ »£¿ »§¿ »◊¿ »Î¿ »Ò¿ »Ú¿ …;¿ …O¿ …U¿ …V¿ …m¿ …Å¿ …á¿ …à¿ …º¿ …¯¿  ¿  ¿  ¿  B¿  U¿  [¿  \¿  n¿  r¿  s¿  í¿  §¿  ¿ À¿ À¿ À_¿ Àc¿ Àd¿ Àº¿ Ã
¿ ÃG¿ Ã[¿ Ãï¿ Ãü¿ Ã•¿ Ã¶¿ Ã–¿ ÃÔ¿ Õ¿ Õ1¿ ÕT¿ Õw¿ Õö¿ Õ“¿ Œ¿ Œ¿ Œ¿ Œ¿ ŒG¿ Œf¿ Œâ¿ Œ¨¿ Œª¿ Œ‹¿ Œ˝¿ œ ¿ œS¿ œ{¿ œÖ¿ œã¿ œè¿ œê¿ œÃ¿ œÙ¿ –*¿ –P¿ –V¿ –Z¿ –[¿ –Ä¿ –£¿ –∑¿ –◊¿ –·¿ —%¿ —+¿ —/¿ —0¿ —Q¿ —à¿ —â¿ —≤¿ —ˆ¿ “¿ “¿ “¿ “D¿ “Å¿ “Ç¿ “£¿ “Œ¿ ”¿ ”¿ ”U¿ ”ó¿ ”Í¿ ‘(¿ ‘j¿ ‘n¿ ‘o¿ ‘ô¿ ‘•¿ ‘€¿ ‘‹¿ ‘Ë¿ ’G¿ ’H¿ ’T¿ ’ä¿ ’·¿ ÷¿ ÷7¿ ÷\¿ ÷à¿ ÷¥¿ ÷Û¿ ◊D¿ ◊R¿ ◊Ä¿ ◊Å¿ ◊º¿ ◊¿ ◊˜¿ ◊˚¿ ÿ#¿ ÿ$¿ ÿZ¿ ÿâ¿ ÿÀ¿ Ÿ#¿ ŸB¿ ŸI¿ ŸÆ¿ Ÿ⁄¿ Ÿﬁ¿ Ÿﬂ¿ ŸÎ¿ ⁄¿ ⁄>¿ ⁄w¿ ⁄©¿ ⁄µ¿ ⁄’¿ ⁄˘¿ €L¿ €è¿ €ñ¿ €ó¿ €∆¿ ‹¿ ‹`¿ ‹t¿ ‹ì¿ ‹ö¿ ‹Œ¿ › ¿ ›<¿ ›ï¿ ›ÿ¿ ﬁ¿ ﬁS¿ ﬁu¿ ﬁô¿ ﬁ√¿ ﬁﬂ¿ ﬂ¿ ﬂ*¿ ﬂ1¿ ﬂ2¿ ﬂÅ¿ ﬂ“¿ ‡¿ ‡N¿ ‡s¿ ‡í¿ ‡≥¿ ·	¿ ·3¿ ·>¿ ·a¿ ·Ñ¿ ·•¿ ·»¿ ‚¿ ‚C¿ ‚N¿ ‚T¿ ‚U¿ ‚¢¿ ‚«¿ „¿ „!¿ „>¿ „^¿ „Ü¿ „∂¿ „È¿ ‰¿ ‰¿ ‰;¿ ‰Z¿ ‰®¿ ‰ ¿ Â¿ Â7¿ Â_¿ Âu¿ Âã¿ Â©¿ Ê¿ Ê%¿ ÊÅ¿ Ê∂¿ Á¿ ÁL¿ ÁM¿ Án¿ Áº¿ Áﬂ¿ Ë.¿ ËS¿ Ë|¿ Ëí¿ Ë®¿ Ë∆¿ È)¿ ÈB¿ Èû¿ È”¿ Í3¿ Íb¿ Í∫¿ Î¿ Î@¿ ÎL¿ ÎW¿ ÎÜ¿ ÎØ¿ Î∫¿ Îª¿ Îﬁ¿ Ï¿ Ï$¿ Ïk¿ Ïë¿ Ï∫¿ Ï–¿ ÏÊ¿ Ì¿ Ìe¿ Ì~¿ Ìÿ¿ ÌŸ¿ Ì˙¿ Ó¿ Óc¿ Óâ¿ Ó≤¿ Ó»¿ Óﬁ¿ Ó¸¿ Ô]¿ Ôv¿ Ô–¿ Ôˇ¿ W¿ ≠¿ ›¿ È¿ Ù¿ Ò#¿ ÒL¿ ÒW¿ ÒX¿ Ò{¿ Òû¿ Ò‰¿ Ú
¿ Ú3¿ ÚI¿ Ú_¿ Ú}¿ Úﬁ¿ Ú˜¿ ÛQ¿ ÛÄ¿ Ûÿ¿ Ù.¿ Ù^¿ Ùj¿ Ùu¿ Ù§¿ ÙÕ¿ Ùÿ¿ Ùﬁ¿ Ùﬂ¿ ı¿ ı+¿ ıC¿ ı`¿ ıÄ¿ ı¥¿ ıÂ¿ ˆ¿ ˆE¿ ˆg¿ ˆá¿ ˆ∏¿ ˆÂ¿ ˜¿ ˜Q¿ ˜i¿ ˜í¿ ˜π¿ ˜Ë¿ ¯¿ ¯H¿ ¯s¿ ¯û¿ ¯—¿ ˘¿ ˘;¿ ˘`¿ ˘Ö¿ ˘®¿ ˘˜¿ ˙=¿ ˙í¿ ˙π¿ ˙¿ ˚'¿ ˚R¿ ˚ç¿ ˚∞¿ ˚Ò¿ ¸¿ ¸O¿ ¸v¿ ¸û¿ ¸Ï¿ ˝¿ ˝D¿ ˝j¿ ˝é¿ ˝À¿ ˛¿ ˛>¿ ˛d¿ ˛ö¿ ˛Ÿ¿ ˇ¿ ˇ:¿ ˇÉ¿ ˇ∫¿ ˇÔ¿ ¿ >¿ Ç¿ Ø¿ ‘¿¿L¿õ¿Í¿#¿_¿Å¿ﬁ¿È¿Ú¿˘¿˙¿¿>¿à¿¡¿‚¿¿:¿c¿ú¿¡¿Ï¿ ¿E¿_¿l¿w¿ç¿ñ¿ú¿˜¿6¿U¿\¿]¿Ö¿Ã¿¿¿C¿P¿v¿|¿}¿ï¿π¿˘¿8¿Y¿w¿±¿”¿	¿	Q¿	q¿	ñ¿	œ¿
¿
¿
>¿
]¿
|¿
≈¿¿c¿Ç¿û¿Ã¿Á¿5¿É¿ú¿ª¿⁄¿¸¿=¿£¿¿a¿√¿!¿>¿?¿Ñ¿√¿¿<¿õ¿˘¿X¿∑¿¿U¿t¿Œ¿'¿Ñ¿µ¿Â¿¿¿;¿Y¿j¿y¿√¿¯¿¿#¿0¿;¿D¿K¿O¿Q¿R¿â¿Œ¿ˇ¿4¿j¿r¿µ¿Ω¿æ¿ˆ¿W¿X¿à¿â¿Ã¿¿8¿k¿l¿¿˜¿(¿Ü¿ä¿”¿◊¿ÿ¿1¿2¿j¿…¿€¿‹¿
   )_TextFieldSelectionGestureDetectorBuilder	TextField_TextFieldState_m2StateInputStyle_m2CounterErrorStyle_m3StateInputStyle_m3InputStyle_m3CounterErrorStyle(flutter.material.textfield.wantKeepAliveÄÎWhen the widget has focus, it will prevent itself from disposing via its
underlying [EditableText]'s [AutomaticKeepAliveClientMixin.wantKeepAlive] in
order to avoid losing the selection. Removing the focus will allow it to be
disposed.)flutter.widgets.TextField.textInputActionÄÆThe type of action button to use for the keyboard.

Defaults to [TextInputAction.newline] if [keyboardType] is
[TextInputType.multiline] and [TextInputAction.done] otherwise. flutter.material.textfield.onTapÇÊCalled for the first tap in a series of taps.

The text field builds a [GestureDetector] to handle input events like tap,
to trigger focus requests, to move the caret, adjust the selection, etc.
Handling some of those events by wrapping the text field with a competing
GestureDetector is problematic.

To unconditionally handle taps, without interfering with the text field's
internal gesture detector, provide this callback.

If the text field is created with [enabled] false, taps will not be
recognized.

To be notified when the text field gains or loses the focus, provide a
[focusNode] and add a listener to that.

To listen to arbitrary pointer events without competing with the
text field's internal gesture detector, use a [Listener].(flutter.material.textfield.restorationIdÇyRestoration ID to save and restore the state of the text field.

If non-null, the text field will persist and restore its current scroll
offset and - if no [controller] has been provided - the content of the
text field. If a [controller] has been provided, it is the responsibility
of the owner of that controller to persist and restore it, e.g. by using
a [RestorableTextEditingController].

The state of this widget is persisted in a [RestorationBucket] claimed
from the surrounding [RestorationScope] using the provided restoration ID.

See also:

 * [RestorationManager], which explains how state restoration works in
   Flutter. Te