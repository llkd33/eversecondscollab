ÄïbuildlayoutcompositingBitspaint	compositeflushSemanticssendSemanticsUpdatetestdeviceinitInstancesinstance	_instancedefaultBinaryMessengercreateBinaryMessengermessagetextDirectionassertivenesswindowplatformDispatcherrestorationManager_restorationManagerreset0_enableFocusManagerLifecycleAwarenessIfSupportedcreateRestorationManagerdebugPrintOverridedisableShadowsoverrideHttpClientregisterTestTextInputdelayedensureInitializedinitLicensesdebugCheckZoneinTestmicrotaskCountdefaultTestTimeoutclockdebugSamplingClockpumprunAsync	setLocale
setLocalesexitApplication-readTestInitialLifecycleStateFromNativeWindow_surfaceSizesetSurfaceSizeaddRenderView_insideAddRenderViewcreateViewConfigurationForidleglobalToLocallocalToGlobalpointerEventSource_pointerEventSource"shouldPropagateDevicePointerEventshandlePointerEventForSourcewithPointerEventSourcetestTextInput_testTextInputfocusedEditable_focusedEditable_resetFocusedEditabletakeException_oldExceptionHandler_oldStackTraceDemangler_pendingExceptionDetails_announcementHandler_announcementstakeAnnouncements_messageStyle_preTestMessage_postTestMessageshowAppDumpInErrorsrunTestasyncBarrier_parentZone_createTestCompletionHandlerreportExceptionNoticed_handleAnnouncementMessage_runTest_runTestBody_beforeTestCheckIntrinsicSizes_verifyInvariants_verifyAutoUpdateGoldensUnset_verifyReportTestExceptionUnset_verifyErrorWidgetBuilderUnset._verifyShouldPropagateDevicePointerEventsUnsetpostTest_currentFakeAsync_pendingAsyncTasks_clockensureFrameCallbacksRegisteredscheduleWarmUpFrame_rootDelegate_captureRootZoneDelegatescheduleAttachRootWidget_firstFrameDeferredCount_firstFrameSentsendFramesToEnginedeferFirstFrameallowFirstFrameresetFirstFrameSent_phase	drawFrameelapseBlocking	onlyPumpsfadePointers	fullyLive	benchmarkbenchmarkLive	skipFrame_inTest_pendingFrame_expectingFrame_expectingFrameToReassemble_viewNeedsPaint_runningAsyncTasksframePolicyscheduleFramescheduleForcedFramereassembleApplication
_drawFramehandleBeginFramehandleDrawFrame_markViewsNeedPaint_label_labelStylelabelsetLabel%_renderViewToPointerIdToPointerRecord_handleRenderViewPaintdeviceEventDispatcherhandlePointerEventdispatchEventdevicePixelRatiologicalConstraintsphysicalConstraints
_getMatrix_paintMatrixtoMatrixshouldUpdateMatrix_physicalSizetoPhysicalSizetoStringnow	stopwatchpointercolorpositiondecayEnginePhase_MockMessageHandlerTestBindingEventSource_kDefaultTestViewportSize!TestDefaultBinaryMessengerBinding!CapturedAccessibilityAnnouncementTestWidgetsFlutterBinding"AutomatedTestWidgetsFlutterBinding(LiveTestWidgetsFlutterBindingFramePolicy_HandleDrawFrameLiveTestWidgetsFlutterBindingTestViewConfiguration_TestSamplingClock_kPointerDecay_LiveTestPointerRecordÅ°failTimeoutdartlibrary
js_interopWidgetTester
pumpWidgetpumpWidgetsBinding	drawFrame
BuildOwner
buildScopePipelineOwnerflushLayoutflushCompositingBits
flushPaint
RenderViewcompositeFrameflushSemanticsSemanticsOwnersendSemanticsUpdateTestDefaultBinaryMessengersetMockDecodedMessageHandlerFuturevoidObjectdispatchEventTestGesturestartGestureSizeServicesBindingBindingBaseoverrideinitInstances	_instancecheckInstancedefaultBinaryMessengerByteDataStandardMethodCodecencodeSuccessEnvelopeintcreateBinaryMessengeroutboundHandlersStringMessageHandlerSemanticsServiceannouncetakeAnnouncementsTextDirectionAssertivenesstimeDilationSchedulerBindingGestureBindingSemanticsBindingRendererBindingPaintingBinding
debugPrintTestPlatformDispatcherplatformDispatcherPlatformDispatcherinstancedefaultRouteNameTestValuedebugDisableShadowsTestFlutterViewviewviewOfwindow
Deprecated
TestWindowTestRestorationManagerdisposeresetGestureBindingresetregisterCustomSemanticsActionresetForTests
buildOwnerfocusManager.listenToApplicationLifecycleChangesIfSupportedprintToConsoleDebugPrintCallback	protectedbool
HttpClientTestTextInputisRegistereddelayedDurationtestWidgetsensureInitializedvisibleForTestingMapenvironmentfromPlatformDispatchersetupHttpOverrides	onClearedClockSamplingClockTestFailureTestAsyncUtilsguardLocaledispatchLocalesChangedListAppExitResponseAppExitType
cancelablecancelrequiredFlutterErrorinitialLifecycleStateTestValue)readInitialLifecycleStateFromNativeWindowphysicalSizehandleMetricsChangedaddRenderViewViewConfigurationhasConfigurationconfiguration
renderViewFlutterViewflutterViewimplicitViewBoxConstraintstightlogicalConstraintsphysicalConstraintsdevicePixelRatiocreateViewConfigurationFor	CompleterTimerruncompletefutureOffsethandlePointerEventdeviceWidgetControllertaptest	timedDragPointerEventsourceVoidCallbackStateEditableTextEditableTextStateTextInputConnectionshowKeyboardrequestKeyboarddynamic	exceptionFlutterExceptionHandlerStackTraceDemanglerFlutterErrorDetails	TextStylecolorColorfontSizeWidgetCenterchildTextstyletextDirectionltr	FakeAsyncbenchmarkWidgetsverifyAllScopesClosedZonecurrentreportTestExceptionisCompletedadd_datatoStringvaluescheckMockMessageHandlerSystemChannelsaccessibilitynameonErrordemangleStackTracedumpErrorToConsoleforceReportdetails
StackTracestackTracevmTraceChaintoTracecontextErrorDescriptionDiagnosticsNoderootElementtoDiagnosticsNodemessagetoStringDeeplevelDiagnosticLevelerrorreportExpectCallreportErrorstackFilterIterabledefaultStackFilterframesskipinformationCollectorDiagnosticsProperty
linePrefixDiagnosticsTreeStyleflat
isNotEmptyerrorPropertyZoneSpecificationhandleUncaughtErrorZoneDelegateforkspecification	runBinarywhenCompletedebugCheckIntrinsicSizesrunApp	Containerkey	UniqueKeyresetFirstFrameSentautoUpdateGoldenFiles	isBrowserTestExceptionReporterErrorWidgetBuilderErrorWidgetbuilder
unregisterdebugAssertNoTransientCallbacks+debugAssertNoPendingPerformanceModeRequestsdebugAssertNoTimeDilation!debugAssertAllFoundationVarsUnsetdebugPrintOverridedebugAssertAllGesturesVarsUnsetdebugAssertAllPaintingVarsUnsetdebugDisableShadowsOverridedebugAssertAllRenderVarsUnset debugCheckIntrinsicSizesOverridedebugAssertAllWidgetVarsUnset debugAssertAllSchedulerVarsUnsetdebugAssertAllServicesVarsUnsetkeyEventManagerkeyMessageHandlerFocusManagerregisterGlobalHandlersRawKeyboardclearKeysPressedHardwareKeyboard
clearStateinitMouseTrackerresetInternalStatemockFlutterAssetsdebugPrintSynchronouslyminutesmicrotaskCountdurationelapsenewPhasehasScheduledFrameflushMicrotaskshandleBeginFramemicrosecondsnowmicrosecondsSinceEpochhandleDrawFramevaluescheduleMicrotaskzonefcreateTimercreatePeriodicTimerperiodthen
catchError	ErrorHintonDrawFrameonBeginFramerootRparentattachRootWidgetidlezerodebugBuildingDirtyElementsbuildrootPipelineOwnerlayoutcompositingBitspaintrenderViews	compositefinalizeTreeelapseBlockinggetClockDateTimeutclocalFakeAsync_runTestdescription	microtaskasyncBarrier_verifyInvariantsperiodicTimerCountnonPeriodicTimerCount	FakeTimerpendingTimerstimer
isPeriodicdebugPrintStack
stackTracecreationStackTracepostTestframePolicyfadePointers	onlyPumps	fullyLivebenchmarkLiveTestPointerpumpBenchmarkscheduleFramepumpAndSettlehandlePointerEventRecordfling	benchmarkflutter_driverdebugAddPaintCallbacknoneWidgetsFlutterBindingscheduleForcedFramereassembleApplication
StateError	skipFrameviewIdwheremarkNeedsPaintTextPainter
fontFamilyisEmpty	textAlign	TextAlignlefttextTextSpanExpandoPaintingContextdoublesizeshortestSidePathaddOvalRect
fromCirclecenterradiusmoveTolineToCanvascanvasPaintstrokeWidthPaintingStylestrokerecordwithOpacitydecaydrawPathshiftpositionkeyspointertoListforEachremoveHitTestDispatcher"shouldPropagateDevicePointerEventspointerEventSourcetargetdown
firstWherercopyWithwithPointerEventSourceHitTestResultPointerAddedEventPointerRemovedEventErrorSummaryfromView_surfaceSizeMatrix4toMatrixinvertMatrixUtilstransformPointBoxFitcontainwidthheightcomposeVector3
QuaternionidentitycloneruntimeType_paintMatrix	Stopwatch	stopwatchHSVColorfromAHSVtoColorBindingBaseServicesBindingSchedulerBindingGestureBindingSemanticsBindingRendererBindingPaintingBindingWidgetsBinding!TestDefaultBinaryMessengerBindingTestWidgetsFlutterBindingViewConfigurationSamplingClockg5^æJ√Ì;§◊Œ«qFÏ„    Å9   
dart:async  ÅN   Å^ÅauiÅadart:ui  Åg   package:clock/clock.dart  Åä   "package:fake_async/fake_async.dart  Å∑   package:flutter/foundation.dart  Å·   package:flutter/gestures.dart  Ç	   package:flutter/rendering.dart  Ç2   package:flutter/scheduler.dart  Ç[   package:flutter/services.dart  ÇÉ   package:flutter/widgets.dartÇŒÇ◊fail Ç™   package:matcher/expect.dart  Ç⁄   ÉÉ
stack_traceÉ
$package:stack_trace/stack_trace.dartÉRÉ^Timeout É   ÉBÉEtest_packageÉE!package:test_api/scaffolding.dart  Éa   'package:vector_math/vector_math_64.dart dart.library.js_interop_binding_web.dart Éî   ÉﬁÉ·bindingÉ·_binding_io.dart  ÉÎ   goldens.dart  Ñ   platform.dart  Ñ   restoration.dart  Ñ5   stack_manipulation.dart  ÑW   test_async_utils.dart  Ñw   "test_default_binary_messenger.dart  Ñ§   test_exception_reporter.dart  ÑÀ   test_text_input.dart  ÑÍ   window.dart¿ µ ¿_óâ' <ÄÜÄ§Ä•ÄøÄ√ÄÂÅ	Å.Å7Å8ÅMÅeÅfÅâÅ∂Å‡ÇÇ1ÇZÇÇÇ©ÇŸÉÉ`ÉíÉìÉÍÑÑÑ4ÑVÑvÑ£Ñ ÑÈÑˇÖ Ö@ÖfÖjÖ∏Ö Ö›Ü(Ü1Ü2ÜÑÜéÜèÜ’ááááeánáoá©á˜àAàNàOàêà∂à»à…ââ`âwâyâzâƒâ»ääZä[ä®äµäπäÚããJãhã±ãÌãıãˆåGåéåòåöåõå÷å◊çç=çAçëç…çé:éFé_ézéêéîéïéÂèFè}è~èäè≈êêêêKêåê⁄ê‡ê·ëë-ëÑëãëèëëëíëëÙíHíõíÒíıììì\ìÜìÈìÍî&î>î?î}î¢î£îÔïïïï/ïZïqïrï≠ï±ï˙ñKñññÂó#ó'óió®ó¨ó˘òFòìòŸô)ô@ôDô^ôbôÆô¯öFöñööö‰õ5õyõ}õÕõÊú#ú,úFú_úwúëú™ú√ú€ùù:ù@ùäùÕùÎûPûàû≠û◊û€û‹üü$ünü•ü´ü¸†F†ó†Ë°9°á°ò°û°Æ°¥¢¢¢j¢Ü¢÷¢Ò£ £I£ç£∆£ £÷£ˆ£˜§§6§7§C§u§≠§Œ§“§”•••K•x•~•»¶
¶¶?¶_¶ó¶≤¶Õ¶Óßßßuß≠ß±ß≤ßÓ®®® ®=®≠®±®≤®æ®Ù©©©©^©d©∞©Ë™0™m™s™π™ˇ´F´y´¥´µ´˛¨¨O¨ñ¨Ê≠≠≠?≠@≠ç≠µ≠ªÆ
ÆUÆúÆÊÆÛØØØkØëØóØ‚∞/∞H∞N∞ò∞±∞∑±±M±õ±≤±∏≤≤≤≤n≤Ω≥≥≥(≥R≥S≥w≥}≥Ã¥¥*¥0¥¥–¥ˆµ!µ"µjµpµ¿∂∂W∂∞∂ﬂ∂‡∑∑\∑∑Ö∑ ∑˚∏?∏Ä∏¬∏»ππaπ†π¶πﬁ∫,∫r∫x∫Ω∫˝ªDªJªïª„º0º`ºfºõº“ΩΩΩRΩVΩWΩcΩ|ΩŒæækæ±ø	ø
ø%ø;øùøªøﬂøÂ¿ @+¿ @/¿ @0¿ @<¿ @Y¿ @q¿ @¿¿ @Ë¿ @Ï¿ @Ì¿ @˘¿ A$¿ A{¿ AÕ¿ Aﬁ¿ A‚¿ A„¿ B¿ B)¿ B*¿ Bc¿ B}¿ B~¿ B¿¿ B∆¿ C¿ Cb¿ Cù¿ CË¿ D¿ D¿ D0¿ D6¿ DÖ¿ D“¿ E¿ E¿ E[¿ EÅ¿ Eî¿ Eï¿ E°¿ EÁ¿ EË¿ F"¿ FA¿ FG¿ Fç¿ F≤¿ F∏¿ G¿ G;¿ GA¿ Gé¿ Gœ¿ H2¿ H3¿ Hq¿ Hw¿ H∆¿ I¿ I8¿ I>¿ Iå¿ Ió¿ Iù¿ IÂ¿ J¿ J	¿ JV¿ J¶¿ J›¿ J„¿ K1¿ K¿ K¬¿ KÍ¿ L#¿ L$¿ Lk¿ Lä¿ Lê¿ Lﬂ¿ LÛ¿ M7¿ Mh¿ M~¿ Mÿ¿ N¿ N¿ N¿ N¿ N\¿ N{¿ N≠¿ Nﬁ¿ NÙ¿ O¿ O#¿ O'¿ O(¿ O4¿ Oñ¿ OÆ¿ O‘¿ P¿ PD¿ Ph¿ Pæ¿ Pƒ¿ P»¿ P…¿ Q¿ Qc¿ Qú¿ QÕ¿ Q—¿ Q“¿ QË¿ QÈ¿ R3¿ Rb¿ Rh¿ Rõ¿ R°¿ R‰¿ S0¿ SX¿ Sf¿ Sñ¿ Sœ¿ SŸ¿ Sﬂ¿ T/¿ Tz¿ T¬¿ TÁ¿ UC¿ Uo¿ U†¿ U∂¿ Uÿ¿ UË¿ U¿ V¿ V)¿ V1¿ V5¿ V6¿ VB¿ Vj¿ Vã¿ Vï¿ V∂¿ V∆¿ VÍ¿ V¿ VÙ¿ Vı¿ W¿ W¿ W'¿ Wo¿ Wè¿ W∂¿ WÛ¿ X¿ Xè¿ Y¿ Y(¿ Yà¿ YØ¿ Yµ¿ YÍ¿ Z5¿ ZÉ¿ Z£¿ ZÃ¿ [¿ [?¿ [H¿ [N¿ [á¿ [ã¿ [å¿ [∏¿ [æ¿ \¿ \]¿ \≤¿ \∏¿ ]	¿ ]Y¿ ]°¿ ]π¿ ]‰¿ ^¿ ^4¿ ^R¿ ^\¿ ^{¿ ^É¿ ^á¿ ^à¿ ^◊¿ ^¸¿ _¿ _S¿ _û¿ _≠¿ _≥¿ `¿ `A¿ `B¿ `é¿ `∫¿ `¿¿ a¿ aY¿ a_¿ a≠¿ aÌ¿ aÓ¿ b¿ b#¿ bf¿ bµ¿ bÃ¿ b“¿ c¿ cE¿ cK¿ cö¿ cË¿ d4¿ d|¿ dç¿ d’¿ e#¿ e$¿ en¿ eù¿ e£¿ eÔ¿ f@¿ fR¿ fX¿ f}¿ f∞¿ f±¿ f˝¿ g4¿ g:¿ gà¿ g’¿ g‚¿ gË¿ h8¿ hÖ¿ h’¿ i$¿ iX¿ i^¿ i¨¿ iı¿ j/¿ j5¿ jÇ¿ j≥¿ k¿ kQ¿ kn¿ kí¿ k¨¿ kÔ¿ kˆ¿ l;¿ l?¿ l@¿ lè¿ l¨¿ lπ¿ m¿ mR¿ mt¿ m~¿ må¿ mú¿ m»¿ mŒ¿ m“¿ m”¿ n¿ nJ¿ n¿ n§¿ n•¿ nˆ¿ n¸¿ oL¿ oä¿ oß¿ o≠¿ o¯¿ p¿ p¿ pV¿ py¿ p~¿ p»¿ q¿ qD¿ qk¿ qù¿ q¬¿ q‚¿ r¿ r¿ r¿ r¿ r.¿ rK¿ rO¿ rP¿ rõ¿ r°¿ rÓ¿ s7¿ s_¿ se¿ s≠¿ s˛¿ tG¿ të¿ t›¿ t„¿ u2¿ uK¿ ug¿ u{¿ uª¿ u‡¿ uÛ¿ u˜¿ u¯¿ v)¿ v]¿ vé¿ vè¿ vº¿ w¿ w¿ we¿ wµ¿ wÛ¿ w˘¿ xO¿ xq¿ xÜ¿ x∆¿ x⁄¿ y,¿ yh¿ yÇ¿ yÜ¿ yá¿ yÂ¿ yÊ¿ z¿ zs¿ zx¿ zy¿ z™¿ {¿ {
¿ {¿ {P¿ {e¿ {â¿ {ä¿ {—¿ {Â¿ {Î¿ |)¿ |/¿ |u¿ |á¿ |ç¿ |‹¿ }¿ }$¿ }n¿ }ª¿ }‰¿ }¸¿ ~"¿ ~F¿ ~c¿ ~i¿ ~j¿ ~∏¿ ~»¿ ~Œ¿ ¿ ^¿ v¿ ¢¿ ¶¿ ß¿ º¿ Ω¿ Ä¿ Ä.¿ Äé¿ Ä≥¿ Äﬁ¿ Å¿ Å!¿ Åå¿ Å’¿ Å˛¿ Ç¿ Ç*¿ ÇH¿ ÇP¿ ÇW¿ Ç[¿ Ç\¿ Ç¨¿ Ç‘¿ Ç⁄¿ É*¿ Éz¿ Éª¿ É»¿ Ñ¿ Ñ(¿ Ñà¿ Ñå¿ Ñç¿ Ñ‘¿ Ñ¿ Ö
¿ ÖS¿ Ö\¿ Öv¿ Ö£¿ Ö…¿ Ü¿ ÜM¿ ÜX¿ Üa¿ Üg¿ Ük¿ Ül¿ ÜÖ¿ Ü´¿ ÜÕ¿ ÜÂ¿ ÜÎ¿ Üˇ¿ á ¿ á8¿ áõ¿ áƒ¿ á–¿ áŸ¿ à¿ àZ¿ àå¿ à∂¿ àÿ¿ àÂ¿ àÎ¿ àÏ¿ â¿ â\¿ âô¿ â‘¿ ä¿ ä¿ äÉ¿ ä¶¿ äƒ¿ ã¿ ã.¿ ãM¿ ãW¿ ãú¿ ã‘¿ ãÈ¿ åw¿ å§¿ åØ¿ åæ¿ åﬁ¿ åÒ¿ ç@¿ çl¿ çt¿ ç{¿ ç∂¿ é¿ éS¿ é†¿ éÎ¿ è¿ è1¿ è9¿ èa¿ èâ¿ èë¿ è•¿ è¨¿ èÈ¿ ê6¿ êI¿ ê^¿ êe¿ ê®¿ êœ¿ ê¯¿ ëQ¿ ë∞¿ í¿ í\¿ íq¿ í‹¿ í˘¿ ì¿ ì:¿ ìT¿ ì∞¿ ìﬂ¿ ìÏ¿ î¿ î¿ î¿ î&¿ îq¿ îª¿ ï
¿ ïU¿ ï£¿ ïÓ¿ ñ9¿ ñp¿ ñy¿ ñ√¿ ó¿ ó\¿ ó´¿ ó˜¿ òB¿ òç¿ ò◊¿ ô¿ ô¿ ôm¿ ô∂¿ ö¿ ö9¿ öB¿ öå¿ ö⁄¿ õ%¿ õE¿ õe¿ õq¿ õŒ¿ ú3¿ úï¿ ú¯¿ ùT¿ ùu¿ ùë¿ ùΩ¿ û¿ û+¿ û6¿ û>¿ ûÖ¿ û–¿ û¿ ü¿ ü-¿ üE¿ ü|¿ ü©¿ ü‹¿ †/¿ †<¿ †g¿ †è¿ †≥¿ †¡¿ †Ë¿ °"¿ °s¿ °ç¿ °Ø¿ °·¿ °Ú¿ ¢ ¿ ¢*¿ ¢[¿ ¢á¿ ¢§¿ ¢ﬂ¿ ¢¿ ¢˛¿ £¿ £¿ £¿ £B¿ £P¿ £z¿ §q¿ §z¿ §Ø¿ §µ¿ §∂¿ •¿ •#¿ •6¿ •S¿ •f¿ •Ä¿ •ö¿ •§¿ •”¿ •‹¿ •„¿ ¶¿ ¶_¿ ¶l¿ ¶µ¿ ¶Õ¿ ¶·¿ ¶¸¿ ß¿ ß4¿ ßU¿ ßY¿ ßZ¿ ßæ¿ ß“¿ ®!¿ ®`¿ ®a¿ ®∆¿ ®ÿ¿ ©)¿ ©D¿ ©_¿ ©`¿ ©≤¿ ™¿ ™X¿ ™∫¿ ™ª¿ ™œ¿ ™Â¿ ´Y¿ ´Z¿ ´Ü¿ ´“¿ ¨"¿ ¨^¿ ¨l¿ ¨™¿ ¨’¿ ¨È¿ ≠¿ ≠1¿ ≠9¿ ≠R¿ ≠¢¿ ≠Ë¿ Æ,¿ Æê¿ Æ´¿ Æ±¿ Æ≤¿ Æ∆¿ Ø)¿ Ø-¿ Ø.¿ ØZ¿ Ø[¿ Øx¿ ØÑ¿ Ø´¿ Ø˝¿ ∞¿ ∞¿ ∞¿ ∞L¿ ∞î¿ ∞ù¿ ∞§¿ ±¿ ±¿ ±;¿ ±à¿ ±∏¿ ±¡¿ ±»¿ ±‘¿ ±˚¿ ≤F¿ ≤O¿ ≤V¿ ≤b¿ ≤â¿ ≤‘¿ ≥	¿ ≥¿ ≥¿ ≥%¿ ≥J¿ ≥ñ¿ ≥‡¿ ≥È¿ ≥¿ ≥¸¿ ¥!¿ ¥j¿ ¥s¿ ¥z¿ ¥Ü¿ ¥Æ¿ ¥˙¿ µ¿ µ
¿ µ¿ µ=¿ µà¿ µë¿ µò¿ µú¿ µù¿ µ⁄¿ µÍ¿ ∂ ¿ ∂B¿ ∂a¿ ∂≈¿ ∂Ï¿ ∑¿ ∑(¿ ∑3¿ ∑;¿ ∑N¿ ∑X¿ ∑\¿ ∑]¿ ∑≠¿ ∑Ω¿ ∑Ò¿ ∏=¿ ∏ç¿ ∏‹¿ ∏Û¿ π"¿ πD¿ πc¿ π≈¿ πÏ¿ ∫¿ ∫(¿ ∫3¿ ∫;¿ ∫N¿ ∫X¿ ∫\¿ ∫]¿ ∫©¿ ∫π¿ ∫Ì¿ ª¿ ª.¿ ªê¿ ª∑¿ ªÊ¿ ªÛ¿ ª˛¿ º¿ º¿ º#¿ º'¿ º(¿ ºv¿ ºÜ¿ º…¿ ºÎ¿ Ω
¿ Ω/¿ Ωâ¿ Ωò¿ Ωø¿ ΩÓ¿ Ω˚¿ æ¿ æ¿ æ!¿ æ+¿ æ/¿ æ0¿ æu¿ æâ¿ æù¿ æŒ¿ ø¿ ø2¿ øJ¿ ør¿ øs¿ ø÷¿ øˇ¿ ¿¿ ¿$¿ ¿l¿ ¿π¿ ¿‹¿ ¿‚¿ ¡¿ ¡¿ ¡f¿ ¡Ø¿ ¡∞¿ ¬¿ ¬O¿ ¬]¿ ¬ñ¿ ¬√¿ ¬¸¿ √(¿ √a¿ √É¿ √º¿ √Ì¿ √Ó¿ ƒ/¿ ƒh¿ ƒõ¿ ƒü¿ ƒ°¿ ƒ¢¿ ƒÌ¿ ≈3¿ ≈7¿ ≈Ñ¿ ≈ë¿ ≈ï¿ ≈”¿ ∆¿ ∆¿ ∆j¿ ∆Ç¿ ∆Ü¿ ∆Ã¿ «¿ «¿ «e¿ «q¿ «ä¿ «•¿ «ª¿ «‹¿ «‡¿ «·¿ »2¿ »8¿ »¿ »∆¿ …	¿ …G¿ …©¿ …·¿ …‚¿  ¿  b¿  î¿  ö¿  ’¿ À¿ ÀR¿ Àg¿ À©¿ ÀÈ¿ Ã¿ Ã¿ ÃS¿ ÃW¿ ÃX¿ Ãü¿ Ã∆¿ Ã«¿ Ã”¿ ÃÁ¿ Ã˚¿ Õ¿ Õ¿ Õ¿ Õ%¿ Õ&¿ Õ2¿ Õz¿ Õ{¿ Õá¿ Õ™¿ Õ´¿ Õ¸¿ ŒE¿ Œå¿ Œò¿ Œ˜¿ Œ¯¿ œ¿ œ4¿ œ5¿ œA¿ œÄ¿ œÅ¿ œç¿ œÒ¿ –¿ –2¿ –P¿ –n¿ –õ¿ –£¿ –º¿ –€¿ —	¿ —a¿ —è¿ —™¿ —≤¿ —ﬁ¿ “¿ “	¿ “¿ “¿ “¿ “T¿ “d¿ “å¿ “°¿ “©¿ “µ¿ “Ê¿ ”-¿ ”v¿ ”Æ¿ ”∑¿ ”¡¿ ”¬¿ ”Ù¿ ‘¿ ‘x¿ ‘¨¿ ‘∑¿ ‘Œ¿ ‘„¿ ’¿ ’¿ ’4¿ ’Q¿ ’]¿ ’ú¿ ’ß¿ ’∆¿ ’€¿ ’˙¿ ÷¿ ÷*¿ ÷R¿ ÷^¿ ÷£¿ ÷Æ¿ ÷∑¿ ÷æ¿ ÷ø¿ ÷Ì¿ ◊!¿ ◊O¿ ◊[¿ ◊∂¿ ◊⁄¿ ◊˚¿ ÿ¿ ÿ;¿ ÿl¿ ÿ∂¿ ÿﬂ¿ Ÿ@¿ ŸQ¿ Ÿ`¿ Ÿm¿ Ÿé¿ Ÿö¿ ŸΩ¿ Ÿﬂ¿ Ÿ˛¿ ⁄ ¿ ⁄:¿ ⁄i¿ ⁄±¿ ⁄ÿ¿ €6¿ €E¿ €R¿ €]¿ €|¿ €Ñ¿ €™¿ €“¿ €ı¿ €ˇ¿ ‹¿ ‹#¿ ‹'¿ ‹(¿ ‹4¿ ‹^¿ ‹ë¿ ‹≈¿ ‹˙¿ ‹˛¿ ‹ˇ¿ ›¿ ›*¿ ›á¿ ›”¿ ›Á¿ ﬁ¿ ﬁ-¿ ﬁD¿ ﬁn¿ ﬁr¿ ﬁs¿ ﬁù¿ ﬁ£¿ ﬁÈ¿ ﬂ¿ ﬂV¿ ﬂW¿ ﬂë¿ ﬂƒ¿ ﬂÒ¿ ‡¿ ‡g¿ ‡Ö¿ ‡ê¿ ‡ô¿ ‡†¿ ‡Ì¿ ·3¿ ·w¿ ·{¿ ·|¿ ·à¿ ·Ω¿ ‚¿ ‚j¿ ‚~¿ ‚†¿ ‚ ¿ ‚Œ¿ ‚œ¿ ‚€¿ ‚Û¿ „¿ „5¿ „c¿ „v¿ „z¿ „{¿ „ü¿ „ø¿ „¿¿ „Ã¿ ‰¿ ‰ ¿ ‰,¿ ‰G¿ ‰r¿ ‰ï¿ ‰ô¿ ‰ö¿ ‰¶¿ ‰¡¿ ‰Î¿ Â¿ Â\¿ Âò¿ Âú¿ Âù¿ Â©¿ Â»¿ ÂÂ¿ ÂÈ¿ ÂÍ¿ Ê"¿ Ê#¿ Êo¿ Ê{¿ Êê¿ Ê§¿ ÊÆ¿ Ê◊¿ Á¿ Á,¿ ÁU¿ ÁÅ¿ Áµ¿ ÁÏ¿ Ë¿ Ë]¿ ËÉ¿ Ëƒ¿ È¿ È#¿ ÈX¿ È≥¿ ÈÀ¿ Í0¿ ÍC¿ ÍS¿ Ía¿ Ím¿ Íw¿ Í¿ Í°¿ Í±¿ Í€¿ Í·¿ ÍÂ¿ ÍÊ¿ ÍÚ¿ Î¿ ÎE¿ În¿ Îè¿ Îì¿ Îî¿ Î‡¿ Î˜¿ Ï"¿ ÏS¿ ÏW¿ ÏX¿ Ïd¿ Ï|¿ Ï¢¿ Ï∆¿ Ï„¿ ÏÍ¿ Ïˇ¿ Ì&¿ ÌB¿ ÌC¿ Ìp¿ Ì®¿ Ì›¿ Ó¿ Ó2¿ Ó`¿ Óã¿ Ó‘¿ ÓÍ¿ ÓÚ¿ ÓÛ¿ Ô ¿ Ôh¿ Ô¥¿ ¿ S¿ ¢¿ ∆¿ «¿ Ò¿ Ò&¿ Ò0¿ Ò1¿ Òu¿ Òò¿ Ò√¿ ÒÌ¿ Ú¿ Ú¿ Ú5¿ Ú=¿ ÚA¿ ÚB¿ ÚN¿ Úf¿ Úç¿ Ú∑¿ Ú—¿ Ú’¿ Ú÷¿ Ú‚¿ Úˇ¿ Û¿ Û¿ Û3¿ Û4¿ ÛT¿ Ûä¿ Û√¿ ÛË¿ Ù0¿ ÙD¿ Ùu¿ Ù´¿ Ù∂¿ Ùı¿ ı¿ ı¿ ı1¿ ı7¿ ıò¿ ıÊ¿ ıÍ¿ ıÎ¿ ı˜¿ ˆ¿ ˆ!¿ ˆH¿ ˆd¿ ˆw¿ ˆï¿ ˆô¿ ˆõ¿ ˆú¿ ˆÍ¿ ˆˆ¿ ˆ˙¿ ˜$¿ ˜^¿ ˜b¿ ˜∞¿ ˜¸¿ ¯$¿ ¯p¿ ¯æ¿ ˘¿ ˘N¿ ˘ä¿ ˘⁄¿ ˘‰¿ ˘Ë¿ ˙8¿ ˙x¿ ˙∑¿ ˙ª¿ ˙«¿ ˚¿ ˚R¿ ˚¢¿ ˚®¿ ˚∞¿ ˚√¿ ˚Û¿ ¸/¿ ¸5¿ ¸~¿ ¸∑¿ ¸ƒ¿ ¸≈¿ ˝¿ ˝Z¿ ˝m¿ ˝s¿ ˝ª¿ ˝ﬂ¿ ˝Â¿ ˛/¿ ˛x¿ ˛à¿ ˛â¿ ˛ÿ¿ ˛Ò¿ ˛˜¿ ˇH¿ ˇ}¿ ˇÉ¿ ˇƒ¿ ¿ \¿ ã¿ ò¿ ô¿ «¿ Õ¿¿m¿∂¿¿U¿[¿´¿¯¿D¿å¿√¿…¿¿Y¿©¿˙¿¿(¿)¿u¿Ç¿à¿’¿¿¿b¿≠¿˙¿/¿w¿}¿Õ¿ ¿¿¿¿J¿K¿å¿‘¿	¿	¿	[¿	û¿	À¿	œ¿
¿
]¿
™¿
˜¿$¿(¿u¿≈¿¿b¿Ø¿˙¿J¿ñ¿Ø¿≥¿Û¿3¿v¿É¿á¿Õ¿¿¿a¿m¿Ü¿°¿∑¿∏¿ˆ¿˙¿˚¿G¿M¿î¿€¿¿\¿π¿Ï¿Ì¿&¿h¿ö¿†¿€¿¿X¿m¿™¿Â¿¿¿E¿I¿J¿V¿t¿å¿ç¿ô¿Ω¿æ¿ ¿Â¿¿g¿v¿z¿{¿á¿”¿‘¿ˆ¿¿B¿b¿Ö¿Ü¿¬¿»¿¿Q¿ú¿È¿*¿0¿}¿É¿π¿Ú¿/¿0¿<¿h¿ì¿ó¿ò¿§¿Ω¿
¿Q¿_¿e¿Ä¿Ñ¿Ö¿ë¿∞¿˝¿D¿R¿X¿y¿}¿~¿ä¿≥¿€¿¿	¿
¿B¿C¿O¿Å¿±¿¿¿)¿P¿ü¿Ú¿A¿¶¿’¿¿¿=¿C¿G¿H¿T¿o¿ü¿ı¿˚¿ /¿ N¿ T¿ }¿ ö¿ √¿ ﬁ¿ ˜¿!¿!U¿!q¿!ê¿!‰¿"¿"¿"¿"¿"E¿"a¿"â¿"†¿"∫¿#¿#Q¿#t¿#z¿#~¿#¿#ñ¿#Ú¿#Û¿$¿$)¿$M¿$N¿$ê¿$ù¿$Ω¿$÷¿$Î¿$˘¿$ˇ¿%?¿%ò¿%÷¿%Ï¿&¿&¿&¿&f¿&ô¿&ö¿&˘¿'¿'¿']¿'ò¿'›¿(¿(6¿(G¿(ì¿(º¿(‰¿)¿)6¿)b¿)|¿)é¿)∏¿)‰¿)˛¿*L¿*|¿*∆¿*—¿+¿+.¿+F¿+P¿+k¿+s¿+ê¿+⁄¿+Ó¿,¿,/¿,N¿,å¿,ò¿,†¿,¶¿,ß¿,Ï¿,¿,Ò¿-/¿-5¿-Ü¿-À¿.
¿.>¿.D¿.á¿.≥¿.¥¿/ ¿/¿/O¿/ò¿/’¿/€¿0&¿0r¿0û¿0™¿0⁄¿0¸¿1$¿1@¿1{¿1∫¿1€¿1Ó¿1˙¿2¿2"¿2S¿2†¿2¿¿2Ó¿3¿3:¿3H¿3w¿3ö¿3˘¿4]¿4z¿4ò¿4ß¿4÷¿4‚¿4Ï¿5¿5?¿5q¿5ú¿5≠¿5∑¿5‰¿64¿6Ä¿6ª¿6˚¿7?¿7L¿7Ü¿7«¿7‘¿7ˆ¿8!¿8Y¿8f¿8p¿8v¿8z¿8{¿8á¿8–¿8Ú¿9¿9M¿9w¿9‹¿:¿:C¿:T¿:^¿:ç¿:≤¿:¯¿;¿;¿;¿;¿;¿;}¿;∂¿; ¿;Ë¿<¿<\¿<Ö¿<∂¿<º¿<Á¿=¿="¿=D¿=_¿=k¿=z¿=ö¿=≥¿=ª¿=‰¿>¿>¿>¿>¿>!¿>a¿>q¿>í¿>ß¿>Ø¿>ª¿>Ï¿?3¿?|¿?¥¿?Ω¿?«¿?»¿?Á¿?Ò¿@¿@-¿@M¿@j¿@Ü¿@û¿@À¿A¿A¿A!¿A4¿AD¿Af¿Al¿Ap¿Aq¿A}¿Aï¿Aª¿Aﬂ¿A¸¿B¿B¿B,¿BG¿BÑ¿Bà¿Bâ¿Bï¿B‘¿C	¿C.¿Cå¿Cœ¿Cﬂ¿D7¿Dê¿DÍ¿E;¿EB¿E^¿Eb¿Ec¿Eo¿EÉ¿Eô¿E∑¿E⁄¿EÔ¿EÛ¿EÙ¿F ¿FH¿F}¿F∞¿F›¿G¿G*¿G3¿G9¿Gt¿G◊¿G€¿G‹¿GË¿H ¿Hp¿H¡¿HÊ¿I3¿I{¿I∏¿I„¿I˚¿JK¿Jî¿JÛ¿J˜¿J¯¿K¿K<¿Kå¿K›¿L¿LM¿Lé¿LÀ¿M"¿Mp¿M∏¿Mº¿Mæ¿Mø¿N¿N$¿N(¿Nx¿N¢¿N¶¿N¯¿O7¿Oi¿O§¿OÊ¿OÏ¿P6¿Pm¿Ps¿Pß¿P∂¿PÈ¿Q-¿Qg¿Qk¿QŒ¿R ¿R$¿R%¿Rk¿Rq¿Ró¿Rù¿RÌ¿S(¿Sx¿S∂¿SÍ¿T¿T/¿TZ¿Tã¿T√¿U¿UY¿UÉ¿UÑ¿Uê¿U±¿U≤¿Uæ¿UÈ¿UÍ¿Uˆ¿V"¿V#¿V|¿V»¿W¿W\¿Wà¿W∂¿Wÿ¿X¿X"¿X6¿XJ¿Xö¿X∆¿Y¿Y¿Y"¿YL¿Y`¿Yù¿Y£¿Yœ¿Z¿Z+¿ZV¿Z]¿Zp¿Zt¿Zu¿Zì¿Zî¿Z†¿ZŒ¿Zœ¿Z€¿[¿[R¿[ö¿[Á¿[˙¿\ ¿\/¿\k¿\•¿\©¿\™¿\∆¿\«¿\”¿]¿]¿]¿]J¿]L¿]M¿]Å¿]§¿]•¿]±¿]”¿]‘¿]‡¿^¿^¿^&¿^(¿^)¿^H¿^I¿^h¿^û¿^Ú¿_¿_¿_-¿_@¿_ï¿_ó   Äà/// @docImport 'dart:io';
///
/// @docImport 'controller.dart';
/// @docImport 'test_pointer.dart';
/// @docImport 'widget_tester.dart';Å8   ÅMÅbÅa Åf   Åâ   Å∂   Å‡   Ç   Ç1   ÇZ   ÇÇ   Ç©  ÇŒÇ◊ÇŸÉÉ
 ÉÉFÉEÉRÉ^É`   ÉìÉ‚É· ÉÍ   Ñ   Ñ   Ñ4   ÑV   Ñv   Ñ£   Ñ    ÑÈ     ëíÉÉìbìbÅ…/// Accessibility announcement data passed to [SemanticsService.announce] captured in a test.
///
/// This class is intended to be used by the testing API to store the announcements
/// in a structured form so that tests can verify announcement details. The fields
/// of this class correspond to parameters of the [SemanticsService.announce] method.
///
/// See also:
///
///  * [WidgetTester.takeAnnouncements], which is the test API that uses this class. ìà`ìéìØì∞ì±ì∞ ì≤ì∏ì∑  ì¿ì∆ì≈  ì‘ì⁄ìŸ   ìÏPî5î59/// The accessibility message announced by the framework. îA_îìîì;/// The direction in which the text of the [message] flows. î•mïïI/// Determines the assertiveness level of the accessibility announcement.    ïr¿ Ø.õıõıÜs/// Base class for bindings used by widgets library tests.
///
/// The [ensureInitialized] method creates (if necessary) and returns an
/// instance of the appropriate subclass. (If one is already created, it returns
/// that one, even if it's not the one that it would normally create. This
/// allows tests to force the use of [LiveTestWidgetsFlutterBinding] even in a
/// normal unit test environment, e.g. to test that binding.)
///
/// When using these bindings, certain features are disabled. For
/// example, [timeDilation] is reset to 1.0 on initialization.
///
/// In non-browser tests, the binding overrides `HttpClient` creation with a
/// fake client that always returns a status code of 400. This is to prevent
/// tests from making network calls, which could introduce flakiness. A test
/// that actually needs to make a network call should provide its own
/// `HttpClient` to the code making the call, so that it can appropriately mock
/// or fake responses.
///
/// ### Coordinate spaces
///
/// [TestWidgetsFlutterBinding] might be run on devices of different screen
/// sizes, while the testing widget is still told the same size to ensure
/// consistent results. Consequently, code that deals with positions (such as
/// pointer events or painting) must distinguish between two coordinate spaces:
///
///  * The _local coordinate space_ is the one used by the testing widget
///    (typically an 800 by 600 window, but can be altered by [setSurfaceSize]).
///  * The _global coordinate space_ is the one used by the device.
///
/// Positions can be transformed between coordinate spaces with [localToGlobal]
/// and [globalToLocal]. ù	Å—ùœ ùœùË ÄΩ/// Constructor for [TestWidgetsFlutterBinding].
///
/// This constructor overrides the [debugPrint] global hook to point to
/// [debugPrintOverride], which can be overridden by subclasses. 
ûùÒûûûLû/ûû1ûCûDûﬁÖ£Ó£ÓÉÍ/// Deprecated. Will be removed in a future version of Flutter.
///
/// This property has been deprecated to prepare for Flutter's upcoming
/// support for multiple views and multiple windows.
///
/// This represents a combination of a [TestPlatformDispatcher] and a singular
/// [TestFlutterView]. Platform-specific test values can be set through
/// [WidgetTester.platformDispatcher] instead. When testing individual widgets
/// or applications using [WidgetTester.pumpWidget], view-specific test values
/// can be set through [WidgetTester.view]. If multiple views are defined, the
/// appropriate view can be found using [WidgetTester.viewOf] if a sub-view
/// is needed.
///
/// See also:
///
/// * [WidgetTester.platformDispatcher] for changing platform-specific values
///   for testing.
/// * [WidgetTester.view] and [WidgetTester.viewOf] for changing view-specific
///   values for testing.
/// * [BindingBase.window] for guidance dealing with this property outside of
///   a testing context.	¢Û¢Ù¢˛£»££M£ë£Ã£Õ£˘;§"§" £˘£˙§’+§Ì§Ì  ∂≤+∂‘∂‘  ¿ Q‘¿ Q⁄¿ Q⁄  ¿ V˜!¿ V¸¿ V¸ ¿ W¿ d◊J¿ dÓ¿ dÓ ¿ e¿ e¿ e¿ e&Åà¿ fÑ¿ fÑÅH/// Whether pointer events from [TestBindingEventSource.device] will be
/// propagated to the framework, or dropped.
///
/// Setting this can be useful to interact with the app in some other way
/// besides through the [WidgetController], such as with `adb shell input tap`
/// on Android.
///
/// See also [pointerEventSource].¿ f©¿ nÅ!¿ nî¿ nî  ¿ qF#¿ qY¿ qY  ¿ u˙-¿ v¿ v  ¿ v+0¿ vD¿ vD  ¿ v_-¿ vt¿ vt  ¿ vë)¿ v¶¿ v¶  ¿ væ^¿ vÊ¿ vÊ ¿ w¿ w¿ v˜¿ w¿ v¯¿ yâZ¿ y†¿ y† ¿ y∞¿ yπ¿ y‚¿ yø¿ y∫¿ y¡¿ y∆¿ y—¿ y«¿ y‹¿ y‘¿ yﬁ¿ yËÄé¿ y¸¿ y¸ ¿ z¿ z¿ zu¿ z¿ z¿ z!¿ z%¿ zp¿ z&¿ z?¿ z:¿ zA¿ z]¿ zP¿ z_¿ zl¿ zm¿ z{Äç¿ zè¿ zè ¿ z¢¿ z®¿ {¿ z≥¿ zÆ¿ zµ¿ zπ¿ {¿ z∫¿ z—¿ zÃ¿ z”¿ zÔ¿ z‚¿ zÒ¿ z˛¿ zˇ¿ {z¿ {l¿ {lU/// Whether to include the output of debugDumpApp() when reporting
/// test failures.¿ {Ç¿ ©¿ Ø¿ Ø  ¿ Ø0(¿ Ø:¿ Ø:  §9Äò§`§`   §9§:© Çì´í´íÇD/// The value to set [debugPrint] to while tests are running.
///
/// This can be used to redirect console output from the framework, or to
/// change the behavior of [debugPrint]. For example,
/// [AutomatedTestWidgetsFlutterBinding] uses it to make [debugPrint]
/// synchronous, disabling its normal throttling behavior.
///
/// It is also used by some other parts of the test framework (e.g.
/// [WidgetTester.printToConsole]) to ensure that messages from the
/// test framework are displayed to the developer rather than logged
/// by whatever code is overriding [debugPrint].   ´∑Åá≠&≠&ÅL/// The value to set [debugDisableShadows] to while tests are running.
///
/// This can be used to reduce the likelihood of golden file tests being
/// flaky, because shadow rendering is not always deterministic. The
/// [AutomatedTestWidgetsFlutterBinding] sets this to true, so that all tests
/// always run with shadows disabled.  ≠≠≠BÅ◊Æ˛Æ˛Åó/// Determines whether the Dart [HttpClient] class should be overridden to
/// always return a failure response.
///
/// By default, this value is true, so that unit tests will not become flaky
/// due to intermittent network errors. The value may be overridden by a
/// binding intended for use in integration tests that do end to end
/// application testing, including working with real network responses.  ÆËÆÈØÑ4≥3≥3É”/// Determines whether the binding automatically registers [testTextInput] as
/// a fake keyboard implementation.
///
/// Unit tests make use of this to mock out text input communication for
/// widgets. An integration test would set this to false, to test real IME
/// or keyboard input.
///
/// [TestTextInput.isRegistered] reports whether the text input mock is
/// registered or not.
///
/// Some of the properties and methods on [testTextInput] are only valid if
/// [registerTestTextInput] returns true when a test starts. If those
/// members are accessed when using a binding that sets this flag to false,
/// they will throw.
///
/// If this property returns true when a test ends, the [testTextInput] is
/// unregistered.
///
/// This property should not change the value it returns during the lifetime
/// of the binding. Changing the value of this property risks very confusing
/// behavior as the [TestTextInput] may be inconsistently registered or
/// unregistered.  ≥≥µ$Åã∂~∂~Å*/// The current [TestWidgetsFlutterBinding], if one has been created.
///
/// Provides access to the features exposed by this binding. The binding must
/// be initialized before using this getter; this is typically done by calling
/// [testWidgets] or [TestWidgetsFlutterBinding.ensureInitialized].   ¿ AÂC¿ B!¿ B!0/// Whether there is currently a test executing.   ¿ B,P¿ Bm¿ Bm6/// The number of outstanding microtasks in the queue.   ¿ BÄÅñ¿ D¿ DÅ]/// The default test timeout for tests when using this binding.
///
/// This controls the default for the `timeout` argument on [testWidgets]. It
/// is 10 minutes for [AutomatedTestWidgetsFlutterBinding] (tests running
/// using `flutter test`), and unlimited for tests using
/// [LiveTestWidgetsFlutterBinding] (tests running using `flutter run`).   ¿ DÅy¿ Eç¿ EçÅX/// The current time.
///
/// In the automated test environment (`flutter test`), this is a fake clock
/// that begins in January 2015 at the start of the test and advances each
/// time [pump] is called with a non-zero duration.
///
/// In the live testing environment (`flutter run`), this object shows the
/// actual current wall-clock time.   ¿ EóO¿ E∂¿ E∂   ¿ Eó¿ Eò¿ aÇ‰¿ d™¿ d™ÇÇ/// The source of the current pointer event.
///
/// The [pointerEventSource] is set as the `source` parameter of
/// [handlePointerEventForSource] and can be used in the immediate enclosing
/// [dispatchEvent].
///
/// When [handlePointerEvent] is called directly, [pointerEventSource]
/// is [TestBindingEventSource.device].
///
/// This means that pointer events triggered by the [WidgetController] (e.g.
/// via [WidgetController.tap]) will result in actual interactions with the
/// UI, but other pointer events such as those from physical taps will be
/// dropped. See also [shouldPropagateDevicePointerEvents] if this is
/// undesired.   ¿ m’Ä©¿ n^¿ n^r/// A stub for the system's onscreen keyboard. Callers must set the
/// [focusedEditable] before using this value.   ¿ nßÇú¿ q¿ qÅΩ/// The [State] of the current [EditableText] client of the onscreen keyboard.
///
/// Setting this property to a new value causes the given [EditableTextState]
/// to focus itself and request the keyboard to establish a
/// [TextInputConnection].
///
/// Callers must pump an additional frame after setting this property to
/// complete the focus change.
///
/// Instead of setting this directly, consider using
/// [WidgetTester.showKeyboard].   ¿ qmÄû¿ qq¿ qq  ¿ qÅ¿ qï¿ qî   &•Ç´¶¶Ä¸/// Called by the test framework at the beginning of a widget test to
/// prepare the binding for the next test.
///
/// If [registerTestTextInput] returns true when this method is called,
/// the [testTextInput] is configured to simulate the keyboard.   ß¥Ä¸ßπßπ    ®¥h®◊®◊   ®¥®µ≥UÅÀµµÅê/// Delay for `duration` of time.
///
/// In the automated test environment ([AutomatedTestWidgetsFlutterBinding],
/// typically used in `flutter test`), this advances the fake [clock] for the
/// period.
///
/// In the live test environment ([LiveTestWidgetsFlutterBinding], typically
/// used for `flutter run` and for [e2e](https://pub.dev/packages/e2e)), it is
/// equivalent to [Future.delayed]. µµµ   ∂‚ÜsºæºæÖÇ/// Creates and initializes the binding. This function is
/// idempotent; calling it a second time will just return the
/// previously-created instance.
///
/// This function will use [AutomatedTestWidgetsFlutterBinding] if
/// the test was run using `flutter test`, and
/// [LiveTestWidgetsFlutterBinding] otherwise (e.g. if it was run
/// using `flutter run`). This is determined by looking at the
/// environment variables for a variable called `FLUTTER_TEST`.
///
/// If `FLUTTER_TEST` is set with a value of 'true', then this test was
/// invoked by `flutter test`. If `FLUTTER_TEST` is not set, or if it is set
/// to 'false', then this test was invoked by `flutter run`.
///
/// Browser environments do not currently support the
/// [LiveTestWidgetsFlutterBinding], so this function will always set up an
/// [AutomatedTestWidgetsFlutterBinding] when run in a web browser.
///
/// The parameter `environment` is used to test the test framework
/// itself by checking how it reacts to different environment
/// variable values, and should not be used outside of this context.
///
/// If a [TestWidgetsFlutterBinding] subclass was explicitly initialized
/// before calling [ensureInitialized], then that version of the binding is
/// returned regardless of the logic described above. This allows tests to
/// force a specific test binding to be used.
///
/// This is called automatically by [testWidgets]. º÷3ºˇº˛  º÷º◊ΩYÇ’ΩjΩj   ΩYΩZ¿ @2Äπ¿ @`¿ @`   ¿ @2¿ @3¿ @ÔÄÚ¿ A ¿ A   ¿ A¿ A¿ A  ¿ @Ô¿ @¿ EÍÇG¿ Gﬁ¿ GﬁÅ–/// Triggers a frame sequence (build/layout/paint/etc),
/// then flushes microtasks.
///
/// If duration is set, then advances the clock by that much first.
/// Doing this flushes microtasks.
///
/// The supplied EnginePhase is the final phase reached during the pump pass;
/// if not supplied, the whole pass is executed.
///
/// See also [LiveTestWidgetsFlutterBindingFramePolicy], which affects how
/// this method works when the test is run with `flutter run`. ¿ G‰¿ GÔ¿ GÓ  ¿ G¯6¿ H¿ H  ¿ H¿ H¿ H¿ H5ÉÌ¿ K˜¿ K˜Éé/// Runs a `callback` that performs real asynchronous work.
///
/// This is intended for callers who need to call asynchronous methods where
/// the methods spawn isolates or OS threads and thus cannot be executed
/// synchronously by calling [pump].
///
/// The `callback` must return a [Future] that completes to a value of type
/// `T`.
///
/// If `callback` completes successfully, this will return the future
/// returned by `callback`.
///
/// If `callback` completes with an error, the error will be caught by the
/// Flutter framework and made available via [takeException], and this method
/// will return a future that completes with `null`.
///
/// Re-entrant calls to this method are not allowed; callers of this method
/// are required to wait for the returned future to complete before calling
/// this method again. Attempts to do otherwise will result in a
/// [TestFailure] error being thrown.¿ L ¿ L ¿ L ¿ L¿ L¿ L   ¿ L&ÅÌ¿ M¿ MÄƒ/// Artificially calls dispatchLocalesChanged on the Widget binding,
/// then flushes microtasks.
///
/// Passes only one single Locale. Use [setLocales] to pass a full preferred
/// locales list. ¿ M¿ M¿ M  ¿ M!¿ M)¿ M(   ¿ NÅ¿ Nä¿ Näa/// Artificially calls dispatchLocalesChanged on the Widget binding,
/// then flushes microtasks. ¿ Nï¿ N£¿ N¢   ¿ O*Åù¿ OQ¿ OQ  ¿ Oa¿ Oq¿ Op  ¿ O{¿ OÄ¿ O  ¿ O*¿ O+¿ Oä¿ PÀÅ¿ Qj¿ QjÄï/// Re-attempts the initialization of the lifecycle state after providing
/// test values in [TestPlatformDispatcher.initialLifecycleStateTestValue].   ¿ QÎÑI¿ UR¿ URÇ€/// Artificially changes the logical size of [WidgetTester.view] to the
/// specified size, then flushes microtasks.
///
/// Set to null to use the default surface size.
///
/// To avoid affecting other tests by leaking state, a test that
/// uses this method should always reset the surface size to the default.
/// For example, using `addTearDown`:
/// ```dart
///   await binding.setSurfaceSize(someSize);
///   addTearDown(() => binding.setSurfaceSize(null));
/// ```
///
/// This method only affects the size of the [WidgetTester.view]. It does not
/// affect the size of any other views. Instead of this method, consider
/// setting [TestFlutterView.physicalSize], which works for any view,
/// including [WidgetTester.view]. ¿ Ua
¿ Uh¿ Ug   ¿ V8Äª¿ VI¿ VI  ¿ VW¿ Vc¿ Vb  ¿ V8¿ V9¿ WÑm¿ W;¿ W;  ¿ WV¿ Wb¿ Wa  ¿ W¿ W¿ [éÇ¯¿ ]∞¿ ]∞Ç/// Acts as if the application went idle.
///
/// Runs all remaining microtasks, including those scheduled as a result of
/// running them, until there are no more microtasks scheduled. Then, runs any
/// previously scheduled timers with zero time, and completes the returned future.
///
/// May result in an infinite loop or run out of memory if microtasks continue
/// to recursively schedule new microtasks. Will not run any timers scheduled
/// after this method was invoked, even if they are zero-time timers.   ¿ ^äÅ∂¿ `
¿ `
Åh/// Convert the given point from the global coordinate space of the provided
/// [RenderView] to its local one.
///
/// This method operates in logical pixels for both coordinate spaces. It does
/// not apply the device pixel ratio (used to translate to/from physical
/// pixels).
///
/// For definitions for coordinate spaces, see [TestWidgetsFlutterBinding]. ¿ `¿ ` ¿ `  ¿ `&¿ `2¿ `1   ¿ `DÅ®¿ a∂¿ a∂Å\/// Convert the given point from the local coordinate space to the global
/// coordinate space of the [RenderView].
///
/// This method operates in logical pixels for both coordinate spaces. It does
/// not apply the device pixel ratio to translate to physical pixels.
///
/// For definitions for coordinate spaces, see [TestWidgetsFlutterBinding]. ¿ aƒ¿ aÃ¿ aÀ  ¿ a“¿ aﬁ¿ a›   ¿ f≥Öã¿ ku¿ kuÑê/// Dispatch an event to the targets found by a hit test on its position,
/// and remember its source as [pointerEventSource].
///
/// This method sets [pointerEventSource] to `source`, forwards the call to
/// [handlePointerEvent], then resets [pointerEventSource] to the previous
/// value.
///
/// If `source` is [TestBindingEventSource.device], then the `event` is based
/// in the global coordinate space (for definitions for coordinate spaces,
/// see [TestWidgetsFlutterBinding]) and the event is likely triggered by the
/// user physically interacting with the screen during a live test on a real
/// device (see [LiveTestWidgetsFlutterBinding]).
///
/// If `source` is [TestBindingEventSource.test], then the `event` is based
/// in the local coordinate space and the event is likely triggered by
/// programmatically simulated pointer events, such as:
///
///  * [WidgetController.tap] and alike methods, as well as directly using
///    [TestGesture]. They are usually used in
///    [AutomatedTestWidgetsFlutterBinding] but sometimes in live tests too.
///  * [WidgetController.timedDrag] and alike methods. They are usually used
///    in macrobenchmarks. ¿ kñ¿ k§¿ k£  ¿ k∞=¿ k»¿ k«  ¿ k–¿ kÊ¿ kÁ¿ lBÅè¿ l¿¿ l¿g/// Sets [pointerEventSource] to `source`, runs `task`, then resets `source`
/// to the previous value. ¿ l◊¿ lÔ¿ lÓ  ¿ lˆ¿ m¿ m  ¿ lÆ¿ lØ¿ r?¿ r¿ r    ¿ rRÉ§¿ uU¿ uUÇﬁ/// Returns the exception most recently caught by the Flutter framework.
///
/// Call this if you expect an exception during a test. If an exception is
/// thrown and this is not called, then the exception is rethrown when
/// the [testWidgets] call completes.
///
/// If two exceptions are thrown in a row without the first one being
/// acknowledged with a call to this method, then when the second exception is
/// thrown, they are both dumped to the console and then the second is
/// rethrown from the exception handler. This will likely result in the
/// framework entering a highly unstable state and everything collapsing.
///
/// It's safe to call this when there's no pending exception; it will return
/// null in that case.   ¿ w!Çd¿ x∞¿ x∞ÅX/// {@template flutter.flutter_test.TakeAccessibilityAnnouncements}
/// Returns a list of all the accessibility announcements made by the Flutter
/// framework since the last time this function was called.
///
/// It's safe to call this when there hasn't been any announcements; it will return
/// an empty list in that case.
/// {@endtemplate}   ¿ {åÇ‹¿ }Û¿ }ÛÇ=/// Call the testBody inside a [FakeAsync] scope on which [pump] can
/// advance time.
///
/// Returns a future which completes when the test has run.
///
/// Called by the [testWidgets] and [benchmarkWidgets] functions to
/// run a test.
///
/// The `invariantTester` argument is called after the `testBody`'s [Future]
/// completes. If it throws, then the test is marked as failed.
///
/// The `description` is used by the [LiveTestWidgetsFlutterBinding] to
/// show a label on the screen during the test. The description comes from
/// the value passed to [testWidgets]. ¿ ~  ¿ ~¿ ~  ¿ ~&¿ ~4¿ ~3  ¿ ~J¿ ~R¿ ~Q  ¿ ~_¿ ~lÅ9¿ e¿ eÄÈ/// This is called during test execution before and after the body has been
/// executed.
///
/// It's used by [AutomatedTestWidgetsFlutterBinding] to drain the microtasks
/// before the final [pump] that happens during test cleanup.   ¿ øÇõ¿ Ã¿ Ã  ¿ È¿ Ò¿   ¿ Ä¿ Ä¿ Ä   ¿ Ç^Ç-¿ Éœ¿ ÉœÅR/// Called when the framework catches an exception, even if that exception is
/// being handled by [takeException].
///
/// This is called when there is no pending exception; if multiple exceptions
/// are thrown and [takeException] isn't used, then subsequent exceptions are
/// logged to the console regardless (and the test will fail). ¿ ÉÊ¿ É˚¿ É˙  ¿ ÉΩ¿ Éæ¿ ÑèÅ€¿ Ñú¿ Ñú  ¿ Ñ∑¿ Ñ¿¿ Ñø   ¿ Ün†Í¿ Ü{¿ Ü{  ¿ Üâ ¿ Ü¢¿ Ü°  ¿ ÜØ¿ ÜΩ¿ Üº  ¿ Ü—¿ ÜŸ¿ Üÿ   ¿ ß\á–¿ ßi¿ ßi  ¿ ßv ¿ ßè¿ ßé  ¿ ßò¿ ß¶¿ ß•   ¿ Ø]Ü>¿ Øb¿ Øb    ¿ µüÅº¿ µ§¿ µ§  ¿ µ¬¿ µ»¿ µ«   ¿ ∑_Ç¸¿ ∑d¿ ∑d  ¿ ∑Ñ%¿ ∑õ¿ ∑ö   ¿ ∫_Å«¿ ∫d¿ ∫d  ¿ ∫É"¿ ∫ó¿ ∫ñ   ¿ º*Ç¿ º/¿ º/  ¿ º^¿ ºd¿ ºc   ¿ æ2Ül¿ æ|¿ æ|B/// Called by the [testWidgets] function after a test is executed.    ¿ ƒ¢±¯¿ «¿ «Çu/// A variant of [TestWidgetsFlutterBinding] for executing tests typically
/// the `flutter test` environment, unless it is an integration test.
///
/// When doing integration test, [LiveTestWidgetsFlutterBinding] is utilized
/// instead.
///
/// This binding controls time, allowing tests to verify long
/// animation sequences without having to execute them in real time.
///
/// This class assumes it is always run in debug mode (since tests are always
/// run in debug mode).
///
/// See [TestWidgetsFlutterBinding] for a list of mixins that must be
/// provided by the binding active while the test framework is
/// running.  	¿ …´4¿ …÷¿ …÷  ¿ ÃZ¿ Ãe¿ Ãe  ¿ Ã°#¿ Ã≤¿ Ã≤  ¿ Õ¿ Õ¿ Õ  ¿ Õ≠ÅH¿ ŒØ¿ ŒØÄ⁄/// The value of [defaultTestTimeout] can be set to `None` to enable debugging
/// flutter tests where we would not want to timeout the test. This is
/// expected to be used by test tooling which can detect debug mode.¿ Œé¿ Œè¿ Œƒ¿ Œ ¿ Œ÷¿ Œ◊¿ Œﬁ¿ ŒÙ¿ Œﬂ¿ ŒÁ¿ ŒÛ¿ ŒÔ¿ ŒË¿ ŒÒ¿ ﬁuÄﬂ¿ ﬂ*¿ ﬂ*Äí/// The [ZoneDelegate] for [Zone.root].
///
/// Used to schedule (real) microtasks and timers in the root zone,
/// to be run in the correct zone.¿ ﬂ:¿ ﬂR¿ ﬂS¿ „} ¿ „Å¿ „Å ¿ „ú¿ „°¿ „¶¿ „¶ ¿ „∏¿ ÂÏ4¿ Â¯¿ Â¯ ¿ Ê¿ Ê¿ Ê¿ «„Å≈¿ …w¿ …wÅY/// The current [AutomatedTestWidgetsFlutterBinding], if one has been created.
///
/// The binding must be initialized before using this getter. If you
/// need the binding to be constructed before calling [testWidgets],
/// you can ensure a binding has been constructed by calling the
/// [TestWidgetsFlutterBinding.ensureInitialized] function.   ¿ Ã…I¿ Ãﬂ¿ Ãﬂ   ¿ Ã…¿ Ã ¿ Õ(Q¿ ÕK¿ ÕK   ¿ Õ(¿ Õ)¿ Õ},¿ Õí¿ Õí   ¿ Õ}¿ Õ~¿ Œ˙9¿ œ¿ œ   ¿ Œ˙¿ Œ˚¿ œ7H¿ œK¿ œK   ¿ œ7¿ œ8¿ „¬\¿ „◊¿ „◊   ¿ „¬¿ „√¿ «gx¿ «x¿ «x   ¿ «g¿ «h¿ …‰Çr¿ Àì¿ ÀìÅt/// Returns an instance of the binding that implements
/// [AutomatedTestWidgetsFlutterBinding]. If no binding has yet been
/// initialized, the a new instance is created.
///
/// Generally, there is no need to call this method. Use
/// [TestWidgetsFlutterBinding.ensureInitialized] instead, as it
/// will select the correct test binding implementation
/// automatically.   ¿ œÉÇâ¿ œú¿ œú  ¿ œ¢¿ œ≠¿ œ¨  ¿ œ∂6¿ œ√¿ œ¬  ¿ œÉ¿ œÑ¿ œÕ¿ œÿ¿ œŸ¿ “ä¿ “'¿ “' ¿ “0¿ “0¿ “0¿ “3¿ “I¿ “H  ¿ “¿ “¿ ‹*Ä”¿ ‹;¿ ‹;   ¿ ‹*¿ ‹+¿ ›Åp¿ ›¿ ›   ¿ ›¿ ›¿ ﬂYÇ!¿ ﬂß¿ ﬂß7/// Hack to extract the [ZoneDelegate] for [Zone.root].   ¿ ·~ÅO¿ ·è¿ ·è  ¿ ·®¿ ·∞¿ ·Ø  ¿ ·~¿ ·¿ ‚—Ä®¿ ‚Í¿ ‚Í   ¿ ‚—¿ ‚“¿ ‰"v¿ ‰3¿ ‰3   ¿ ‰"¿ ‰#¿ ‰úÄˇ¿ ‰≠¿ ‰≠   ¿ ‰ú¿ ‰ù¿ ÂüI¿ Â∞¿ Â∞   ¿ Âü¿ Â†¿ ÊqÑs¿ ÊÇ¿ ÊÇ   ¿ Êq¿ Êr¿ ÍËÄ™¿ Î¿ Î  ¿ Î	¿ Î¿ Î  ¿ ÍË¿ ÍÈ¿ ÎñÄ¿¿ Î˛¿ Î˛^/// Simulates the synchronous passage of time, resulting from blocking or
/// expensive calls. ¿ Ï¿ Ï¿ Ï   ¿ ÏZÖÊ¿ Ïs¿ Ïs  ¿ ÏÄ ¿ Ïô¿ Ïò  ¿ Ï¶¿ Ï¥¿ Ï≥  ¿ Ï ¿ Ï“¿ Ï—  ¿ ÏZ¿ Ï[¿ Ïﬂ¿ ÚDÄê¿ ÚU¿ ÚU   ¿ ÚD¿ ÚE¿ ÚÿÉ¿ ÚÈ¿ ÚÈ   ¿ Úÿ¿ ÚŸ¿ ıÌÄ´¿ ı˛¿ ı˛   ¿ ıÌ¿ ıÓ ¿K¿ Er¿¿ÜÕ/// A variant of [TestWidgetsFlutterBinding] for executing tests
/// on a device, typically via `flutter run`, or via integration tests.
/// This is intended to allow interactive test development.
///
/// This is not the way to run a remote-control test. To run a test on
/// a device from a development computer, see the [flutter_driver]
/// package and the `flutter drive` command.
///
/// When running tests using `flutter run`, consider adding the
/// `--use-test-fonts` argument so that the fonts used match those used under
/// `flutter test`. (This forces all text to use the "Ahem" font, which is a
/// font that covers ASCII characters and gives them all the appearance of a
/// square whose size equals the font size.)
///
/// This binding overrides the default [SchedulerBinding] behavior to ensure
/// that tests work in the same way in this environment as they would under the
/// [AutomatedTestWidgetsFlutterBinding]. To override this (and see intermediate
/// frames that the test does not explicitly trigger), set [framePolicy] to
/// [LiveTestWidgetsFlutterBindingFramePolicy.fullyLive]. (This is likely to
/// make tests fail, though, especially if e.g. they test how many times a
/// particular widget was built.) The default behavior is to show pumped frames
/// and a few additional frames when pointers are triggered (to animate the
/// pointer crosshairs).
///
/// This binding does not support the [EnginePhase] argument to
/// [pump]. (There would be no point setting it to a value that
/// doesn't trigger a paint, since then you could not see anything
/// anyway.)
///
/// See [TestWidgetsFlutterBinding] for a list of mixins that must be
/// provided by the binding active while the test framework is
/// running.  ¿ª/¿·¿·  ¿v¿{¿{ ¿Ö¿÷¿Á¿Á  ¿¯¿˝¿˝ ¿¿(¿¿ ¿;¿D¿I¿I ¿[¿d¿i¿i ¿~¿àÇ•¿‰¿‰Ç/// The strategy for [pump]ing and requesting new frames.
///
/// The policy decides whether [pump] (with a duration) pumps a single frame
/// (as would happen in a normal test environment using
/// [AutomatedTestWidgetsFlutterBinding]), or pumps every frame that the
/// system requests during an asynchronous pause (as would normally happen
/// when running an application with [WidgetsFlutterBinding]).
///
/// {@macro flutter.flutter_test.LiveTestWidgetsFlutterBindingFramePolicy}
///
/// See [LiveTestWidgetsFlutterBindingFramePolicy].¿¯¿ ¿!¿4¿¿ ¿*¿:¿;¿#Å¿#é¿#é  ¿#òX¿#Ø¿#Ø 	¿#Ω¿#∆¿#Ô¿#—¿#«¿#”¿#È¿#·¿#Î¿&Äâ¿&>¿&> 
¿&l¿&s¿&î¿&t¿&w¿&ì¿&x¿&}¿&ï¿&ñ¿,ÛÅæ¿.ú¿.úÅÖ/// An object to which real device events should be routed.
///
/// Normally, device events are silently dropped. However, if this property is
/// set to a non-null value, then the events will be routed to its
/// [HitTestDispatcher.dispatchEvent] method instead, unless
/// [shouldPropagateDevicePointerEvents] is true.
///
/// Events dispatched by [TestGesture] are not affected by this. ¿˝Åª¿á¿áÅT/// The current [LiveTestWidgetsFlutterBinding], if one has been created.
///
/// The binding must be initialized before using this getter. If you
/// need the binding to be constructed before calling [testWidgets],
/// you can ensure a binding has been constructed by calling the
/// [TestWidgetsFlutterBinding.ensureInitialized] function.   ¿L'¿a¿a   ¿L¿M¿è-¿•¿•   ¿è¿ê¿¿Äπ¿‘¿‘   ¿¿¿¡¿}U¿¢¿¢   ¿}¿~¿#ıW¿$<¿$</// Label describing the test.  ¿$¿$¿cÄñ¿t¿t   ¿c¿d¿ÔÇY¿î¿îÅo/// Returns an instance of the binding that implements
/// [LiveTestWidgetsFlutterBinding]. If no binding has yet been
/// initialized, the a new instance is created.
///
/// Generally, there is no need to call this method. Use
/// [TestWidgetsFlutterBinding.ensureInitialized] instead, as it
/// will select the correct test binding implementation
/// automatically.   ¿2d¿K¿K  ¿S¿]¿\  ¿2¿3¿öÄÈ¿´¿´   ¿ö¿õ¿áÄı¿ò¿ò   ¿á¿à¿ÄÄà¿ô¿ô   ¿Ä¿Å¿EÉ¿V¿V  ¿g¿r¿q  ¿E¿F¿JÇÕ¿[¿[   ¿J¿K¿"Åb¿" ¿"   ¿"5¿";¿":   ¿$PÅ∫¿$§¿$§?/// Set a description label that is drawn into the test output. ¿$≠¿$µ¿$¥  ¿$í¿$ì¿&úÜS¿&°¿&°  ¿&∏¿&…¿&»  ¿&—¿&Ÿ¿&ÿ  ¿&‡¿&Ï¿&Î   ¿.∂â√¿0±¿0±Å◊/// Dispatch an event to the targets found by a hit test on its position.
///
/// If the [pointerEventSource] is [TestBindingEventSource.test], then
/// the event is forwarded to [GestureBinding.dispatchEvent] as usual;
/// additionally, down pointers are painted on the screen.
///
/// If the [pointerEventSource] is [TestBindingEventSource.device], then
/// the event, after being transformed to the local coordinate system, is
/// forwarded to [deviceEventDispatcher]. ¿0ƒ¿0“¿0—  ¿0†¿0°¿8}Çé¿8é¿8é  ¿8ú¿8™¿8©  ¿8∞¿8¿¿8ø  ¿8}¿8~¿;É¿;(¿;(  ¿;.¿;9¿;8  ¿;B6¿;O¿;N  ¿;¿;¿;Y¿;d¿;e¿>ÉX¿>.¿>. ¿>7¿>7¿>7¿>:¿>P¿>O  ¿>¿>¿AsÅ¿Aå¿Aå  ¿Aô ¿A≤¿A±  ¿Aø¿AÕ¿AÃ  ¿A„¿AÎ¿AÍ  ¿As¿At¿A¯¿BãÇ÷¿Bú¿Bú  ¿B≥¿B»¿B«  ¿Bã¿Bå¿EeÄç¿Ev¿Ev   ¿Ee¿Ef¿EˆÅ‰¿F¿F  ¿F/¿F;¿F:  ¿Eˆ¿E˜¿GﬁÉ¿GÒ¿GÒ  ¿Gˇ¿H¿H  ¿H¿H¿H  ¿Gﬁ¿Gﬂ¿J˙Ç¡¿K¿K  ¿K¿K#¿K"  ¿K)¿K5¿K4  ¿J˙¿J˚ ¿Møèå¿Oo¿OoÅ©/// A [ViewConfiguration] that pretends the display is of a particular size (in
/// logical pixels).
///
/// The resulting ViewConfiguration maps the given size onto the actual display
/// using the [BoxFit.contain] algorithm.
///
/// If the underlying [FlutterView] changes, a new [TestViewConfiguration] should
/// be created. See [RendererBinding.handleMetricsChanged] and
/// [RendererBinding.createViewConfigurationFor]. ¿O¶Ç}¿Qu ¿Qu¿Qä Äˆ/// Deprecated. Will be removed in a future version of Flutter.
///
/// This property has been deprecated to prepare for Flutter's upcoming
/// support for multiple views and multiple windows.
///
/// Use [TestViewConfiguration.fromView] instead.¿Qå%¿Qí¿Që  ¿Q≥¿Qƒ¿Q√  ¿P©¿P™¿P¥¿Qi¿P∫¿PÌ¿Q1¿Qò¿R'É[¿SÏ¿T¿T¿T
¿TÅ≤/// Creates a [TestViewConfiguration] with the given size and view.
///
/// The [size] defaults to 800x600.
///
/// The settings of the given [FlutterView] are captured when the constructor
/// is called, and subsequent changes are ignored. A new
/// [TestViewConfiguration] should be created if the underlying [FlutterView]
/// changes. See [RendererBinding.handleMetricsChanged] and
/// [RendererBinding.createViewConfigurationFor].¿T¿T*¿T)  ¿T3%¿T9¿T8  )¿T?¿Tr¿Ta¿Tt¿Tx¿Ty¿T•¿Tí¿Tß¿Tµ¿T∂¿Tª¿T¿¿Tº¿Tﬁ¿T ¿T˚¿T‡¿TÓ¿TÔ¿TÙ¿T˘¿Tı¿T˝¿U¿U¿U(¿U¿U*¿U4¿UV¿U5¿U;¿U?¿U@¿UR¿Un¿U`¿Up¿Ut¿Uu¿UÜ)¿Uü¿Uü ¿UÜ¿Uá¿U¥3¿U’¿U’ ¿U¥¿Uµ¿UÏ4¿V¿V ¿UÏ¿UÌ¿Zw¿ZÖ¿ZÖ  ¿\¨¿\∑¿\∑   ¿V%ÑN¿V4¿V4  ¿V?	¿VE¿VD  ¿VJ¿VR¿VQ  ¿Vc¿Vs¿Vr   ¿Zñ7¿Z™¿Z™   ¿Zñ¿Zó¿Z—Å◊¿Z‚¿Z‚  ¿Zı"¿[¿[  ¿Z—¿Z“¿\…C¿\⁄¿\⁄  ¿\È¿\Ô¿\Ó  ¿\…¿\ ¿]9¿]#¿]#   ¿]¿] ¿]MÄ⁄¿]S¿]S  ¿]É ¿]É ¿]É¿]ï  ¿]ñ¿]ú¿]õ   ¿^¿^¿^   ¿]ß+¿]º¿]º   ¿]ß¿]®¿]÷8¿]Ï¿]Ï   ¿]÷¿]◊ ¿^IÅM¿^O¿^O  ¿^jÄò¿^j ¿^j¿^Ä  ¿^Å¿^á¿^Ü  ¿^è¿^ï¿^î  ¿^™¿^§¿^¨¿^¥¿^µ¿^Ω¿^Â¿^æ¿^‘¿^√¿^“¿^…¿^ƒ¿^À¿^÷¿^›¿^‚¿^Ê¿^Á¿^Ó¿^Ô¿^˛¿^¯¿_ ¿_¿_¿_  ¿_¿_&¿_&  ¿_/¿_6¿_6  ¿_B	¿_F¿_F      Ö ÑxÖœÖœÄ…/// Phases that can be reached by [WidgetTester.pumpWidget] and
/// [TestWidgetsFlutterBinding.pump].
///
/// See [WidgetsBinding.drawFrame] for a more detailed description of some of
/// these phases.  ÖﬂPÜ*Ü*H/// The build phase in the widgets library. See [BuildOwner.buildScope]. Ü4XÜÜÜÜO/// The layout phase in the rendering library. See [PipelineOwner.flushLayout]. ÜëÄÅáám/// The compositing bits update phase in the rendering library. See
/// [PipelineOwner.flushCompositingBits]. áUágágM/// The paint phase in the rendering library. See [PipelineOwner.flushPaint]. áqÄ€àCàCÄÀ/// The compositing phase in the rendering library. See
/// [RenderView.compositeFrame]. This is the phase in which data is sent to
/// the GPU. If semantics are not enabled, then this is the last phase. àQuà∏à∏b/// The semantics building phase in the rendering library. See
/// [PipelineOwner.flushSemantics]. àÀÄ™âbâbÄí/// The final phase in the rendering library, wherein semantics information is
/// sent to the embedder. See [SemanticsOwner.sendSemanticsUpdate].    ä[Ç>ãOãOÄÓ/// Parts of the system that can generate pointer events that reach the test
/// binding.
///
/// This is used to identify how to handle events in the
/// [LiveTestWidgetsFlutterBinding]. See
/// [TestWidgetsFlutterBinding.dispatchEvent].  ãjÄâãÔãÔÄÄ/// The pointer event came from the test framework itself, e.g. from a
/// [TestGesture] created by [WidgetTester.startGesture]. ã¯ÄûåêåêÄì/// The pointer event came from the system, presumably as a result of the user
/// interactive directly with the device while the test was running.    ¿ ˆúëv¿ ˚»¿ ˚»Ö&/// Available policies for how a [LiveTestWidgetsFlutterBinding] should paint
/// frames.
///
/// These values are set on the binding's
/// [LiveTestWidgetsFlutterBinding.framePolicy] property.
///
/// {@template flutter.flutter_test.LiveTestWidgetsFlutterBindingFramePolicy}
/// The default is [LiveTestWidgetsFlutterBindingFramePolicy.fadePointers].
/// Setting this to anything other than
/// [LiveTestWidgetsFlutterBindingFramePolicy.onlyPumps] results in pumping
/// extra frames, which might involve calling builders more, or calling paint
/// callbacks more, etc, and might interfere with the test. If you know that
/// your test won't be affected by this, you can set the policy to
/// [LiveTestWidgetsFlutterBindingFramePolicy.fullyLive] or
/// [LiveTestWidgetsFlutterBindingFramePolicy.benchmarkLive] in that particular
/// file.
///
/// To set a value while still allowing the test file to work as a normal test,
/// add the following code to your test file at the top of your
/// `void main() { }` function, before calls to [testWidgets]:
///
/// ```dart
/// TestWidgetsFlutterBinding binding = TestWidgetsFlutterBinding.ensureInitialized();
/// if (binding is LiveTestWidgetsFlutterBinding) {
///   binding.framePolicy = LiveTestWidgetsFlutterBindingFramePolicy.onlyPumps;
/// }
/// ```
/// {@endtemplate}  ¿ ˚ıÄÕ¿ ¸π¿ ¸πÄª/// Strictly show only frames that are explicitly pumped.
///
/// This most closely matches the [AutomatedTestWidgetsFlutterBinding]
/// (the default binding for `flutter test`) behavior. ¿ ¸«Åø¿ ˛z¿ ˛zÅ†/// Show pumped frames, and additionally schedule and run frames to fade
/// out the pointer crosshairs and other debugging information shown by
/// the binding.
///
/// This will schedule frames when pumped or when there has been some
/// activity with [TestPointer]s.
///
/// This can result in additional frames being pumped beyond those that
/// the test itself requests, which can cause differences in behavior. ¿ ˛ãÇ¿ ç¿ çÅÌ/// Show every frame that the framework requests, even if the frames are not
/// explicitly pumped.
///
/// The major difference between [fullyLive] and [benchmarkLive] is the latter
/// ignores frame requests by [WidgetTester.pump].
///
/// This can help with orienting the developer when looking at
/// heavily-animated situations, and will almost certainly result in
/// additional frames being pumped beyond those that the test itself requests,
/// which can cause differences in behavior. ¿ õÑã¿¿Ñ[/// Ignore any request to schedule a frame.
///
/// This is intended to be used by benchmarks (hence the name) that drive the
/// pipeline directly. It tells the binding to entirely ignore requests for a
/// frame to be scheduled, while still allowing frames that are pumped
/// directly to run (either by using [WidgetTester.pumpBenchmark] or invoking
/// [PlatformDispatcher.onBeginFrame] and [PlatformDispatcher.onDrawFrame]).
///
/// This allows all frame requests from the engine to be serviced, and allows
/// all frame requests that are artificially triggered to be serviced, but
/// ignores [SchedulerBinding.scheduleFrame] requests from the framework.
/// Therefore animation won't run for this mode because the framework
/// generates an animation by requesting new frames.
///
/// The [SchedulerBinding.hasScheduledFrame] property will never be true in
/// this mode. This can cause unexpected effects. For instance,
/// [WidgetTester.pumpAndSettle] does not function in this mode, as it relies
/// on the [SchedulerBinding.hasScheduledFrame] property to determine when the
/// application has "settled". ¿+Ç‰¿¿Ç∫/// Ignore any request from pump but respect other requests to schedule a
/// frame.
///
/// This is used for running the test on a device, where scheduling of new
/// frames respects what the engine and the device needed.
///
/// Compared to [fullyLive] this policy ignores the frame requests from
/// [WidgetTester.pump] so that frame scheduling mimics that of the real
/// environment, and avoids waiting for an artificially pumped frame. (For
/// example, when driving the test in methods like
/// [WidgetTester.handlePointerEventRecord] or [WidgetTester.fling].)
///
/// This policy differs from [benchmark] in that it can be used for capturing
/// animation frames requested by the framework.    ¿5¿¿   ¿,¿,¿,  ¿3	¿3¿3  ¿>	¿>¿>          âzÄﬂä$ä$Ä°/// Signature of callbacks used to intercept messages on a given channel.
///
/// See [TestDefaultBinaryMessenger.setMockDecodedMessageHandler] for more details.  äP     å◊ÑπçˆçˆÅ/// Overrides the [ServicesBinding]'s binary messenger logic to use
/// [TestDefaultBinaryMessenger].
///
/// Test bindings that are used by tests that mock message handlers for plugins
/// should mix in this binding to enable the use of the
/// [TestDefaultBinaryMessenger] APIs.  èH3èrèr  éóÄÆèèM/// The current [TestDefaultBinaryMessengerBinding], if one has been created.   èÄÄÜè´è´   èÄèÅé<WéMéM   é<é=ê
ÅÑê1ê1   ê
ê åõ9å¶å¶ å¬å∆å”å«åŒ¿^)¿^3¿^3 ¿^D¿^E   ÄÆ  dart:io  ÄÃ  controller.dart  ÄÓ  test_pointer.dart  Å  widget_tester.dart â' <ÄÜÄ§Ä•ÄøÄ√ÄÂÅ	Å.Å7Å8ÅMÅeÅfÅâÅ∂Å‡ÇÇ1ÇZÇÇÇ©ÇŸÉÉ`ÉíÉìÉÍÑÑÑ4ÑVÑvÑ£Ñ ÑÈÑˇÖ Ö@ÖfÖjÖ∏Ö Ö›Ü(Ü1Ü2ÜÑÜéÜèÜ’ááááeánáoá©á˜àAàNàOàêà∂à»à…ââ`âwâyâzâƒâ»ääZä[ä®äµäπäÚããJãhã±ãÌãıãˆåGåéåòåöåõå÷å◊çç=çAçëç…çé:éFé_ézéêéîéïéÂèFè}è~èäè≈êêêêKêåê⁄ê‡ê·ëë-ëÑëãëèëëëíëëÙíHíõíÒíıììì\ìÜìÈìÍî&î>î?î}î¢î£îÔïïïï/ïZïqïrï≠ï±ï˙ñKñññÂó#ó'óió®ó¨ó˘òFòìòŸô)ô@ôDô^ôbôÆô¯öFöñööö‰õ5õyõ}õÕõÊú#ú,úFú_úwúëú™ú√ú€ùù:ù@ùäùÕùÎûPûàû≠û◊û€û‹üü$ünü•ü´ü¸†F†ó†Ë°9°á°ò°û°Æ°¥¢¢¢j¢Ü¢÷¢Ò£ £I£ç£∆£ £÷£ˆ£˜§§6§7§C§u§≠§Œ§“§”•••K•x•~•»¶
¶¶?¶_¶ó¶≤¶Õ¶Óßßßuß≠ß±ß≤ßÓ®®® ®=®≠®±®≤®æ®Ù©©©©^©d©∞©Ë™0™m™s™π™ˇ´F´y´¥´µ´˛¨¨O¨ñ¨Ê≠≠≠?≠@≠ç≠µ≠ªÆ
ÆUÆúÆÊÆÛØØØkØëØóØ‚∞/∞H∞N∞ò∞±∞∑±±M±õ±≤±∏≤≤≤≤n≤Ω≥≥≥(≥R≥S≥w≥}≥Ã¥¥*¥0¥¥–¥ˆµ!µ"µjµpµ¿∂∂W∂∞∂ﬂ∂‡∑∑\∑∑Ö∑ ∑˚∏?∏Ä∏¬∏»ππaπ†π¶πﬁ∫,∫r∫x∫Ω∫˝ªDªJªïª„º0º`ºfºõº“ΩΩΩRΩVΩWΩcΩ|ΩŒæækæ±ø	ø
ø%ø;øùøªøﬂøÂ¿ @+¿ @/¿ @0¿ @<¿ @Y¿ @q¿ @¿¿ @Ë¿ @Ï¿ @Ì¿ @˘¿ A$¿ A{¿ AÕ¿ Aﬁ¿ A‚¿ A„¿ B¿ B)¿ B*¿ Bc¿ B}¿ B~¿ B¿¿ B∆¿ C¿ Cb¿ Cù¿ CË¿ D¿ D¿ D0¿ D6¿ DÖ¿ D“¿ E¿ E¿ E[¿ EÅ¿ Eî¿ Eï¿ E°¿ EÁ¿ EË¿ F"¿ FA¿ FG¿ Fç¿ F≤¿ F∏¿ G¿ G;¿ GA¿ Gé¿ Gœ¿ H2¿ H3¿ Hq¿ Hw¿ H∆¿ I¿ I8¿ I>¿ Iå¿ Ió¿ Iù¿ IÂ¿ J¿ J	¿ JV¿ J¶¿ J›¿ J„¿ K1¿ K¿ K¬¿ KÍ¿ L#¿ L$¿ Lk¿ Lä¿ Lê¿ Lﬂ¿ LÛ¿ M7¿ Mh¿ M~¿ Mÿ¿ N¿ N¿ N¿ N¿ N\¿ N{¿ N≠¿ Nﬁ¿ NÙ¿ O¿ O#¿ O'¿ O(¿ O4¿ Oñ¿ OÆ¿ O‘¿ P¿ PD¿ Ph¿ Pæ¿ Pƒ¿ P»¿ P…¿ Q¿ Qc¿ Qú¿ QÕ¿ Q—¿ Q“¿ QË¿ QÈ¿ R3¿ Rb¿ Rh¿ Rõ¿ R°¿ R‰¿ S0¿ SX¿ Sf¿ Sñ¿ Sœ¿ SŸ¿ Sﬂ¿ T/¿ Tz¿ T¬¿ TÁ¿ UC¿ Uo¿ U†¿ U∂¿ Uÿ¿ UË¿ U¿ V¿ V)¿ V1¿ V5¿ V6¿ VB¿ Vj¿ Vã¿ Vï¿ V∂¿ V∆¿ VÍ¿ V¿ VÙ¿ Vı¿ W¿ W¿ W'¿ Wo¿ Wè¿ W∂¿ WÛ¿ X¿ Xè¿ Y¿ Y(¿ Yà¿ YØ¿ Yµ¿ YÍ¿ Z5¿ ZÉ¿ Z£¿ ZÃ¿ [¿ [?¿ [H¿ [N¿ [á¿ [ã¿ [å¿ [∏¿ [æ¿ \¿ \]¿ \≤¿ \∏¿ ]	¿ ]Y¿ ]°¿ ]π¿ ]‰¿ ^¿ ^4¿ ^R¿ ^\¿ ^{¿ ^É¿ ^á¿ ^à¿ ^◊¿ ^¸¿ _¿ _S¿ _û¿ _≠¿ _≥¿ `¿ `A¿ `B¿ `é¿ `∫¿ `¿¿ a¿ aY¿ a_¿ a≠¿ aÌ¿ aÓ¿ b¿ b#¿ bf¿ bµ¿ bÃ¿ b“¿ c¿ cE¿ cK¿ cö¿ cË¿ d4¿ d|¿ dç¿ d’¿ e#¿ e$¿ en¿ eù¿ e£¿ eÔ¿ f@¿ fR¿ fX¿ f}¿ f∞¿ f±¿ f˝¿ g4¿ g:¿ gà¿ g’¿ g‚¿ gË¿ h8¿ hÖ¿ h’¿ i$¿ iX¿ i^¿ i¨¿ iı¿ j/¿ j5¿ jÇ¿ j≥¿ k¿ kQ¿ kn¿ kí¿ k¨¿ kÔ¿ kˆ¿ l;¿ l?¿ l@¿ lè¿ l¨¿ lπ¿ m¿ mR¿ mt¿ m~¿ må¿ mú¿ m»¿ mŒ¿ m“¿ m”¿ n¿ nJ¿ n¿ n§¿ n•¿ nˆ¿ n¸¿ oL¿ oä¿ oß¿ o≠¿ o¯¿ p¿ p¿ pV¿ py¿ p~¿ p»¿ q¿ qD¿ qk¿ qù¿ q¬¿ q‚¿ r¿ r¿ r¿ r¿ r.¿ rK¿ rO¿ rP¿ rõ¿ r°¿ rÓ¿ s7¿ s_¿ se¿ s≠¿ s˛¿ tG¿ të¿ t›¿ t„¿ u2¿ uK¿ ug¿ u{¿ uª¿ u‡¿ uÛ¿ u˜¿ u¯¿ v)¿ v]¿ vé¿ vè¿ vº¿ w¿ w¿ we¿ wµ¿ wÛ¿ w˘¿ xO¿ xq¿ xÜ¿ x∆¿ x⁄¿ y,¿ yh¿ yÇ¿ yÜ¿ yá¿ yÂ¿ yÊ¿ z¿ zs¿ zx¿ zy¿ z™¿ {¿ {
¿ {¿ {P¿ {e¿ {â¿ {ä¿ {—¿ {Â¿ {Î¿ |)¿ |/¿ |u¿ |á¿ |ç¿ |‹¿ }¿ }$¿ }n¿ }ª¿ }‰¿ }¸¿ ~"¿ ~F¿ ~c¿ ~i¿ ~j¿ ~∏¿ ~»¿ ~Œ¿ ¿ ^¿ v¿ ¢¿ ¶¿ ß¿ º¿ Ω¿ Ä¿ Ä.¿ Äé¿ Ä≥¿ Äﬁ¿ Å¿ Å!¿ Åå¿ Å’¿ Å˛¿ Ç¿ Ç*¿ ÇH¿ ÇP¿ ÇW¿ Ç[¿ Ç\¿ Ç¨¿ Ç‘¿ Ç⁄¿ É*¿ Éz¿ Éª¿ É»¿ Ñ¿ Ñ(¿ Ñà¿ Ñå¿ Ñç¿ Ñ‘¿ Ñ¿ Ö
¿ ÖS¿ Ö\¿ Öv¿ Ö£¿ Ö…¿ Ü¿ ÜM¿ ÜX¿ Üa¿ Üg¿ Ük¿ Ül¿ ÜÖ¿ Ü´¿ ÜÕ¿ ÜÂ¿ ÜÎ¿ Üˇ¿ á ¿ á8¿ áõ¿ áƒ¿ á–¿ áŸ¿ à¿ àZ¿ àå¿ à∂¿ àÿ¿ àÂ¿ àÎ¿ àÏ¿ â¿ â\¿ âô¿ â‘¿ ä¿ ä¿ äÉ¿ ä¶¿ äƒ¿ ã¿ ã.¿ ãM¿ ãW¿ ãú¿ ã‘¿ ãÈ¿ åw¿ å§¿ åØ¿ åæ¿ åﬁ¿ åÒ¿ ç@¿ çl¿ çt¿ ç{¿ ç∂¿ é¿ éS¿ é†¿ éÎ¿ è¿ è1¿ è9¿ èa¿ èâ¿ èë¿ è•¿ è¨¿ èÈ¿ ê6¿ êI¿ ê^¿ êe¿ ê®¿ êœ¿ ê¯¿ ëQ¿ ë∞¿ í¿ í\¿ íq¿ í‹¿ í˘¿ ì¿ ì:¿ ìT¿ ì∞¿ ìﬂ¿ ìÏ¿ î¿ î¿ î¿ î&¿ îq¿ îª¿ ï
¿ ïU¿ ï£¿ ïÓ¿ ñ9¿ ñp¿ ñy¿ ñ√¿ ó¿ ó\¿ ó´¿ ó˜¿ òB¿ òç¿ ò◊¿ ô¿ ô¿ ôm¿ ô∂¿ ö¿ ö9¿ öB¿ öå¿ ö⁄¿ õ%¿ õE¿ õe¿ õq¿ õŒ¿ ú3¿ úï¿ ú¯¿ ùT¿ ùu¿ ùë¿ ùΩ¿ û¿ û+¿ û6¿ û>¿ ûÖ¿ û–¿ û¿ ü¿ ü-¿ üE¿ ü|¿ ü©¿ ü‹¿ †/¿ †<¿ †g¿ †è¿ †≥¿ †¡¿ †Ë¿ °"¿ °s¿ °ç¿ °Ø¿ °·¿ °Ú¿ ¢ ¿ ¢*¿ ¢[¿ ¢á¿ ¢§¿ ¢ﬂ¿ ¢¿ ¢˛¿ £¿ £¿ £¿ £B¿ £P¿ £z¿ §q¿ §z¿ §Ø¿ §µ¿ §∂¿ •¿ •#¿ •6¿ •S¿ •f¿ •Ä¿ •ö¿ •§¿ •”¿ •‹¿ •„¿ ¶¿ ¶_¿ ¶l¿ ¶µ¿ ¶Õ¿ ¶·¿ ¶¸¿ ß¿ ß4¿ ßU¿ ßY¿ ßZ¿ ßæ¿ ß“¿ ®!¿ ®`¿ ®a¿ ®∆¿ ®ÿ¿ ©)¿ ©D¿ ©_¿ ©`¿ ©≤¿ ™¿ ™X¿ ™∫¿ ™ª¿ ™œ¿ ™Â¿ ´Y¿ ´Z¿ ´Ü¿ ´“¿ ¨"¿ ¨^¿ ¨l¿ ¨™¿ ¨’¿ ¨È¿ ≠¿ ≠1¿ ≠9¿ ≠R¿ ≠¢¿ ≠Ë¿ Æ,¿ Æê¿ Æ´¿ Æ±¿ Æ≤¿ Æ∆¿ Ø)¿ Ø-¿ Ø.¿ ØZ¿ Ø[¿ Øx¿ ØÑ¿ Ø´¿ Ø˝¿ ∞¿ ∞¿ ∞¿ ∞L¿ ∞î¿ ∞ù¿ ∞§¿ ±¿ ±¿ ±;¿ ±à¿ ±∏¿ ±¡¿ ±»¿ ±‘¿ ±˚¿ ≤F¿ ≤O¿ ≤V¿ ≤b¿ ≤â¿ ≤‘¿ ≥	¿ ≥¿ ≥¿ ≥%¿ ≥J¿ ≥ñ¿ ≥‡¿ ≥È¿ ≥¿ ≥¸¿ ¥!¿ ¥j¿ ¥s¿ ¥z¿ ¥Ü¿ ¥Æ¿ ¥˙¿ µ¿ µ
¿ µ¿ µ=¿ µà¿ µë¿ µò¿ µú¿ µù¿ µ⁄¿ µÍ¿ ∂ ¿ ∂B¿ ∂a¿ ∂≈¿ ∂Ï¿ ∑¿ ∑(¿ ∑3¿ ∑;¿ ∑N¿ ∑X¿ ∑\¿ ∑]¿ ∑≠¿ ∑Ω¿ ∑Ò¿ ∏=¿ ∏ç¿ ∏‹¿ ∏Û¿ π"¿ πD¿ πc¿ π≈¿ πÏ¿ ∫¿ ∫(¿ ∫3¿ ∫;¿ ∫N¿ ∫X¿ ∫\¿ ∫]¿ ∫©¿ ∫π¿ ∫Ì¿ ª¿ ª.¿ ªê¿ ª∑¿ ªÊ¿ ªÛ¿ ª˛¿ º¿ º¿ º#¿ º'¿ º(¿ ºv¿ ºÜ¿ º…¿ ºÎ¿ Ω
¿ Ω/¿ Ωâ¿ Ωò¿ Ωø¿ ΩÓ¿ Ω˚¿ æ¿ æ¿ æ!¿ æ+¿ æ/¿ æ0¿ æu¿ æâ¿ æù¿ æŒ¿ ø¿ ø2¿ øJ¿ ør¿ øs¿ ø÷¿ øˇ¿ ¿¿ ¿$¿ ¿l¿ ¿π¿ ¿‹¿ ¿‚¿ ¡¿ ¡¿ ¡f¿ ¡Ø¿ ¡∞¿ ¬¿ ¬O¿ ¬]¿ ¬ñ¿ ¬√¿ ¬¸¿ √(¿ √a¿ √É¿ √º¿ √Ì¿ √Ó¿ ƒ/¿ ƒh¿ ƒõ¿ ƒü¿ ƒ°¿ ƒ¢¿ ƒÌ¿ ≈3¿ ≈7¿ ≈Ñ¿ ≈ë¿ ≈ï¿ ≈”¿ ∆¿ ∆¿ ∆j¿ ∆Ç¿ ∆Ü¿ ∆Ã¿ «¿ «¿ «e¿ «q¿ «ä¿ «•¿ «ª¿ «‹¿ «‡¿ «·¿ »2¿ »8¿ »¿ »∆¿ …	¿ …G¿ …©¿ …·¿ …‚¿  ¿  b¿  î¿  ö¿  ’¿ À¿ ÀR¿ Àg¿ À©¿ ÀÈ¿ Ã¿ Ã¿ ÃS¿ ÃW¿ ÃX¿ Ãü¿ Ã∆¿ Ã«¿ Ã”¿ ÃÁ¿ Ã˚¿ Õ¿ Õ¿ Õ¿ Õ%¿ Õ&¿ Õ2¿ Õz¿ Õ{¿ Õá¿ Õ™¿ Õ´¿ Õ¸¿ ŒE¿ Œå¿ Œò¿ Œ˜¿ Œ¯¿ œ¿ œ4¿ œ5¿ œA¿ œÄ¿ œÅ¿ œç¿ œÒ¿ –¿ –2¿ –P¿ –n¿ –õ¿ –£¿ –º¿ –€¿ —	¿ —a¿ —è¿ —™¿ —≤¿ —ﬁ¿ “¿ “	¿ “¿ “¿ “¿ “T¿ “d¿ “å¿ “°¿ “©¿ “µ¿ “Ê¿ ”-¿ ”v¿ ”Æ¿ ”∑¿ ”¡¿ ”¬¿ ”Ù¿ ‘¿ ‘x¿ ‘¨¿ ‘∑¿ ‘Œ¿ ‘„¿ ’¿ ’¿ ’4¿ ’Q¿ ’]¿ ’ú¿ ’ß¿ ’∆¿ ’€¿ ’˙¿ ÷¿ ÷*¿ ÷R¿ ÷^¿ ÷£¿ ÷Æ¿ ÷∑¿ ÷æ¿ ÷ø¿ ÷Ì¿ ◊!¿ ◊O¿ ◊[¿ ◊∂¿ ◊⁄¿ ◊˚¿ ÿ¿ ÿ;¿ ÿl¿ ÿ∂¿ ÿﬂ¿ Ÿ@¿ ŸQ¿ Ÿ`¿ Ÿm¿ Ÿé¿ Ÿö¿ ŸΩ¿ Ÿﬂ¿ Ÿ˛¿ ⁄ ¿ ⁄:¿ ⁄i¿ ⁄±¿ ⁄ÿ¿ €6¿ €E¿ €R¿ €]¿ €|¿ €Ñ¿ €™¿ €“¿ €ı¿ €ˇ¿ ‹¿ ‹#¿ ‹'¿ ‹(¿ ‹4¿ ‹^¿ ‹ë¿ ‹≈¿ ‹˙¿ ‹˛¿ ‹ˇ¿ ›¿ ›*¿ ›á¿ ›”¿ ›Á¿ ﬁ¿ ﬁ-¿ ﬁD¿ ﬁn¿ ﬁr¿ ﬁs¿ ﬁù¿ ﬁ£¿ ﬁÈ¿ ﬂ¿ ﬂV¿ ﬂW¿ ﬂë¿ ﬂƒ¿ ﬂÒ¿ ‡¿ ‡g¿ ‡Ö¿ ‡ê¿ ‡ô¿ ‡†¿ ‡Ì¿ ·3¿ ·w¿ ·{¿ ·|¿ ·à¿ ·Ω¿ ‚¿ ‚j¿ ‚~¿ ‚†¿ ‚ ¿ ‚Œ¿ ‚œ¿ ‚€¿ ‚Û¿ „¿ „5¿ „c¿ „v¿ „z¿ „{¿ „ü¿ „ø¿ „¿¿ „Ã¿ ‰¿ ‰ ¿ ‰,¿ ‰G¿ ‰r¿ ‰ï¿ ‰ô¿ ‰ö¿ ‰¶¿ ‰¡¿ ‰Î¿ Â¿ Â\¿ Âò¿ Âú¿ Âù¿ Â©¿ Â»¿ ÂÂ¿ ÂÈ¿ ÂÍ¿ Ê"¿ Ê#¿ Êo¿ Ê{¿ Êê¿ Ê§¿ ÊÆ¿ Ê◊¿ Á¿ Á,¿ ÁU¿ ÁÅ¿ Áµ¿ ÁÏ¿ Ë¿ Ë]¿ ËÉ¿ Ëƒ¿ È¿ È#¿ ÈX¿ È≥¿ ÈÀ¿ Í0¿ ÍC¿ ÍS¿ Ía¿ Ím¿ Íw¿ Í¿ Í°¿ Í±¿ Í€¿ Í·¿ ÍÂ¿ ÍÊ¿ ÍÚ¿ Î¿ ÎE¿ În¿ Îè¿ Îì¿ Îî¿ Î‡¿ Î˜¿ Ï"¿ ÏS¿ ÏW¿ ÏX¿ Ïd¿ Ï|¿ Ï¢¿ Ï∆¿ Ï„¿ ÏÍ¿ Ïˇ¿ Ì&¿ ÌB¿ ÌC¿ Ìp¿ Ì®¿ Ì›¿ Ó¿ Ó2¿ Ó`¿ Óã¿ Ó‘¿ ÓÍ¿ ÓÚ¿ ÓÛ¿ Ô ¿ Ôh¿ Ô¥¿ ¿ S¿ ¢¿ ∆¿ «¿ Ò¿ Ò&¿ Ò0¿ Ò1¿ Òu¿ Òò¿ Ò√¿ ÒÌ¿ Ú¿ Ú¿ Ú5¿ Ú=¿ ÚA¿ ÚB¿ ÚN¿ Úf¿ Úç¿ Ú∑¿ Ú—¿ Ú’¿ Ú÷¿ Ú‚¿ Úˇ¿ Û¿ Û¿ Û3¿ Û4¿ ÛT¿ Ûä¿ Û√¿ ÛË¿ Ù0¿ ÙD¿ Ùu¿ Ù´¿ Ù∂¿ Ùı¿ ı¿ ı¿ ı1¿ ı7¿ ıò¿ ıÊ¿ ıÍ¿ ıÎ¿ ı˜¿ ˆ¿ ˆ!¿ ˆH¿ ˆd¿ ˆw¿ ˆï¿ ˆô¿ ˆõ¿ ˆú¿ ˆÍ¿ ˆˆ¿ ˆ˙¿ ˜$¿ ˜^¿ ˜b¿ ˜∞¿ ˜¸¿ ¯$¿ ¯p¿ ¯æ¿ ˘¿ ˘N¿ ˘ä¿ ˘⁄¿ ˘‰¿ ˘Ë¿ ˙8¿ ˙x¿ ˙∑¿ ˙ª¿ ˙«¿ ˚¿ ˚R¿ ˚¢¿ ˚®¿ ˚∞¿ ˚√¿ ˚Û¿ ¸/¿ ¸5¿ ¸~¿ ¸∑¿ ¸ƒ¿ ¸≈¿ ˝¿ ˝Z¿ ˝m¿ ˝s¿ ˝ª¿ ˝ﬂ¿ ˝Â¿ ˛/¿ ˛x¿ ˛à¿ ˛â¿ ˛ÿ¿ ˛Ò¿ ˛˜¿ ˇH¿ ˇ}¿ ˇÉ¿ ˇƒ¿ ¿ \¿ ã¿ ò¿ ô¿ «¿ Õ¿¿m¿∂¿¿U¿[¿´¿¯¿D¿å¿√¿…¿¿Y¿©¿˙¿¿(¿)¿u¿Ç¿à¿’¿¿¿b¿≠¿˙¿/¿w¿}¿Õ¿ ¿¿¿¿J¿K¿å¿‘¿	¿	¿	[¿	û¿	À¿	œ¿
¿
]¿
™¿
˜¿$¿(¿u¿≈¿¿b¿Ø¿˙¿J¿ñ¿Ø¿≥¿Û¿3¿v¿É¿á¿Õ¿¿¿a¿m¿Ü¿°¿∑¿∏¿ˆ¿˙¿˚¿G¿M¿î¿€¿¿\¿π¿Ï¿Ì¿&¿h¿ö¿†¿€¿¿X¿m¿™¿Â¿¿¿E¿I¿J¿V¿t¿å¿ç¿ô¿Ω¿æ¿ ¿Â¿¿g¿v¿z¿{¿á¿”¿‘¿ˆ¿¿B¿b¿Ö¿Ü¿¬¿»¿¿Q¿ú¿È¿*¿0¿}¿É¿π¿Ú¿/¿0¿<¿h¿ì¿ó¿ò¿§¿Ω¿
¿Q¿_¿e¿Ä¿Ñ¿Ö¿ë¿∞¿˝¿D¿R¿X¿y¿}¿~¿ä¿≥¿€¿¿	¿
¿B¿C¿O¿Å¿±¿¿¿)¿P¿ü¿Ú¿A¿¶¿’¿¿¿=¿C¿G¿H¿T¿o¿ü¿ı¿˚¿ /¿ N¿ T¿ }¿ ö¿ √¿ ﬁ¿ ˜¿!¿!U¿!q¿!ê¿!‰¿"¿"¿"¿"¿"E¿"a¿"â¿"†¿"∫¿#¿#Q¿#t¿#z¿#~¿#¿#ñ¿#Ú¿#Û¿$¿$)¿$M¿$N¿$ê¿$ù¿$Ω¿$÷¿$Î¿$˘¿$ˇ¿%?¿%ò¿%÷¿%Ï¿&¿&¿&¿&f¿&ô¿&ö¿&˘¿'¿'¿']¿'ò¿'›¿(¿(6¿(G¿(ì¿(º¿(‰¿)¿)6¿)b¿)|¿)é¿)∏¿)‰¿)˛¿*L¿*|¿*∆¿*—¿+¿+.¿+F¿+P¿+k¿+s¿+ê¿+⁄¿+Ó¿,¿,/¿,N¿,å¿,ò¿,†¿,¶¿,ß¿,Ï¿,¿,Ò¿-/¿-5¿-Ü¿-À¿.
¿.>¿.D¿.á¿.≥¿.¥¿/ ¿/¿/O¿/ò¿/’¿/€¿0&¿0r¿0û¿0™¿0⁄¿0¸¿1$¿1@¿1{¿1∫¿1€¿1Ó¿1˙¿2¿2"¿2S¿2†¿2¿¿2Ó¿3¿3:¿3H¿3w¿3ö¿3˘¿4]¿4z¿4ò¿4ß¿4÷¿4‚¿4Ï¿5¿5?¿5q¿5ú¿5≠¿5∑¿5‰¿64¿6Ä¿6ª¿6˚¿7?¿7L¿7Ü¿7«¿7‘¿7ˆ¿8!¿8Y¿8f¿8p¿8v¿8z¿8{¿8á¿8–¿8Ú¿9¿9M¿9w¿9‹¿:¿:C¿:T¿:^¿:ç¿:≤¿:¯¿;¿;¿;¿;¿;¿;}¿;∂¿; ¿;Ë¿<¿<\¿<Ö¿<∂¿<º¿<Á¿=¿="¿=D¿=_¿=k¿=z¿=ö¿=≥¿=ª¿=‰¿>¿>¿>¿>¿>!¿>a¿>q¿>í¿>ß¿>Ø¿>ª¿>Ï¿?3¿?|¿?¥¿?Ω¿?«¿?»¿?Á¿?Ò¿@¿@-¿@M¿@j¿@Ü¿@û¿@À¿A¿A¿A!¿A4¿AD¿Af¿Al¿Ap¿Aq¿A}¿Aï¿Aª¿Aﬂ¿A¸¿B¿B¿B,¿BG¿BÑ¿Bà¿Bâ¿Bï¿B‘¿C	¿C.¿Cå¿Cœ¿Cﬂ¿D7¿Dê¿DÍ¿E;¿EB¿E^¿Eb¿Ec¿Eo¿EÉ¿Eô¿E∑¿E⁄¿EÔ¿EÛ¿EÙ¿F ¿FH¿F}¿F∞¿F›¿G¿G*¿G3¿G9¿Gt¿G◊¿G€¿G‹¿GË¿H ¿Hp¿H¡¿HÊ¿I3¿I{¿I∏¿I„¿I˚¿JK¿Jî¿JÛ¿J˜¿J¯¿K¿K<¿Kå¿K›¿L¿LM¿Lé¿LÀ¿M"¿Mp¿M∏¿Mº¿Mæ¿Mø¿N¿N$¿N(¿Nx¿N¢¿N¶¿N¯¿O7¿Oi¿O§¿OÊ¿OÏ¿P6¿Pm¿Ps¿Pß¿P∂¿PÈ¿Q-¿Qg¿Qk¿QŒ¿R ¿R$¿R%¿Rk¿Rq¿Ró¿Rù¿RÌ¿S(¿Sx¿S∂¿SÍ¿T¿T/¿TZ¿Tã¿T√¿U¿UY¿UÉ¿UÑ¿Uê¿U±¿U≤¿Uæ¿UÈ¿UÍ¿Uˆ¿V"¿V#¿V|¿V»¿W¿W\¿Wà¿W∂¿Wÿ¿X¿X"¿X6¿XJ¿Xö¿X∆¿Y¿Y¿Y"¿YL¿Y`¿Yù¿Y£¿Yœ¿Z¿Z+¿ZV¿Z]¿Zp¿Zt¿Zu¿Zì¿Zî¿Z†¿ZŒ¿Zœ¿Z€¿[¿[R¿[ö¿[Á¿[˙¿\ ¿\/¿\k¿\•¿\©¿\™¿\∆¿\«¿\”¿]¿]¿]¿]J¿]L¿]M¿]Å¿]§¿]•¿]±¿]”¿]‘¿]‡¿^¿^¿^&¿^(¿^)¿^H¿^I¿^h¿^û¿^Ú¿_¿_¿_-¿_@¿_ï¿_ó   EnginePhaseTestBindingEventSource_kDefaultTestViewportSize!TestDefaultBinaryMessengerBinding!CapturedAccessibilityAnnouncementTestWidgetsFlutterBinding"AutomatedTestWidgetsFlutterBinding(LiveTestWidgetsFlutterBindingFramePolicy_HandleDrawFrameLiveTestWidgetsFlutterBindingTestViewConfiguration_TestSamplingClock_kPointerDecay_LiveTestPointerRecord3flutter.flutter_test.TakeAccessibilityAnnouncementsÄÓReturns a list of all the accessibility announcements made by the Flutter
framework since the last time this function was called.

It's safe to call this when there hasn't been any announcements; it will return
an empty list in that case.=flutter.flutter_test.LiveTestWidgetsFlutterBindingFramePolicyÉ±The default is [LiveTestWidgetsFlutterBindingFramePolicy.fadePointers].
Setting this to anything other than
[LiveTestWidgetsFlutterBindingFramePolicy.onlyPumps] results in pumping
extra frames, which might involve calling builders more, or calling paint
callbacks more, etc, and might interfere with the test. If you know that
your test won't be affected by this, you can set the policy to
[LiveTestWidgetsFlutterBindingFramePolicy.fullyLive] or
[LiveTestWidgetsFlutterBindingFramePolicy.benchmarkLive] in that particular
file.

To set a value while still allowing the test file to work as a normal test,
add the following code to your test file at the top of your
`void main() { }` function, before calls to [testWidgets]:

```dart
TestWidgetsFlutterBinding binding = TestWidgetsFlutterBinding.ensureInitialized();
if (binding is LiveTestWidgetsFlutterBinding) {
  binding.framePolicy = LiveTestWidgetsFlutterBindingFramePolicy.onlyPumps;
}
``` ‰ç